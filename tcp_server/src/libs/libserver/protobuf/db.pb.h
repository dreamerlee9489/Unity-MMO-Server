// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: db.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_db_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_db_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_db_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_db_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[12]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_db_2eproto;
namespace Proto {
class ItemData;
class ItemDataDefaultTypeInternal;
extern ItemDataDefaultTypeInternal _ItemData_default_instance_;
class LastWorld;
class LastWorldDefaultTypeInternal;
extern LastWorldDefaultTypeInternal _LastWorld_default_instance_;
class Player;
class PlayerDefaultTypeInternal;
extern PlayerDefaultTypeInternal _Player_default_instance_;
class PlayerBase;
class PlayerBaseDefaultTypeInternal;
extern PlayerBaseDefaultTypeInternal _PlayerBase_default_instance_;
class PlayerKnap;
class PlayerKnapDefaultTypeInternal;
extern PlayerKnapDefaultTypeInternal _PlayerKnap_default_instance_;
class PlayerMisc;
class PlayerMiscDefaultTypeInternal;
extern PlayerMiscDefaultTypeInternal _PlayerMisc_default_instance_;
class Team;
class TeamDefaultTypeInternal;
extern TeamDefaultTypeInternal _Team_default_instance_;
class TradeClose;
class TradeCloseDefaultTypeInternal;
extern TradeCloseDefaultTypeInternal _TradeClose_default_instance_;
class TradeOpen;
class TradeOpenDefaultTypeInternal;
extern TradeOpenDefaultTypeInternal _TradeOpen_default_instance_;
class UpdateKnapItem;
class UpdateKnapItemDefaultTypeInternal;
extern UpdateKnapItemDefaultTypeInternal _UpdateKnapItem_default_instance_;
class UpdateTradeItem;
class UpdateTradeItemDefaultTypeInternal;
extern UpdateTradeItemDefaultTypeInternal _UpdateTradeItem_default_instance_;
class Vector3D;
class Vector3DDefaultTypeInternal;
extern Vector3DDefaultTypeInternal _Vector3D_default_instance_;
}  // namespace Proto
PROTOBUF_NAMESPACE_OPEN
template<> ::Proto::ItemData* Arena::CreateMaybeMessage<::Proto::ItemData>(Arena*);
template<> ::Proto::LastWorld* Arena::CreateMaybeMessage<::Proto::LastWorld>(Arena*);
template<> ::Proto::Player* Arena::CreateMaybeMessage<::Proto::Player>(Arena*);
template<> ::Proto::PlayerBase* Arena::CreateMaybeMessage<::Proto::PlayerBase>(Arena*);
template<> ::Proto::PlayerKnap* Arena::CreateMaybeMessage<::Proto::PlayerKnap>(Arena*);
template<> ::Proto::PlayerMisc* Arena::CreateMaybeMessage<::Proto::PlayerMisc>(Arena*);
template<> ::Proto::Team* Arena::CreateMaybeMessage<::Proto::Team>(Arena*);
template<> ::Proto::TradeClose* Arena::CreateMaybeMessage<::Proto::TradeClose>(Arena*);
template<> ::Proto::TradeOpen* Arena::CreateMaybeMessage<::Proto::TradeOpen>(Arena*);
template<> ::Proto::UpdateKnapItem* Arena::CreateMaybeMessage<::Proto::UpdateKnapItem>(Arena*);
template<> ::Proto::UpdateTradeItem* Arena::CreateMaybeMessage<::Proto::UpdateTradeItem>(Arena*);
template<> ::Proto::Vector3D* Arena::CreateMaybeMessage<::Proto::Vector3D>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Proto {

enum ItemData_ItemType : int {
  ItemData_ItemType_None = 0,
  ItemData_ItemType_Potion = 1,
  ItemData_ItemType_Weapon = 2,
  ItemData_ItemType_ItemData_ItemType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ItemData_ItemType_ItemData_ItemType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ItemData_ItemType_IsValid(int value);
constexpr ItemData_ItemType ItemData_ItemType_ItemType_MIN = ItemData_ItemType_None;
constexpr ItemData_ItemType ItemData_ItemType_ItemType_MAX = ItemData_ItemType_Weapon;
constexpr int ItemData_ItemType_ItemType_ARRAYSIZE = ItemData_ItemType_ItemType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ItemData_ItemType_descriptor();
template<typename T>
inline const std::string& ItemData_ItemType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ItemData_ItemType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ItemData_ItemType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ItemData_ItemType_descriptor(), enum_t_value);
}
inline bool ItemData_ItemType_Parse(
    const std::string& name, ItemData_ItemType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ItemData_ItemType>(
    ItemData_ItemType_descriptor(), name, value);
}
enum ItemData_KnapType : int {
  ItemData_KnapType_World = 0,
  ItemData_KnapType_Bag = 1,
  ItemData_KnapType_Equip = 2,
  ItemData_KnapType_Action = 3,
  ItemData_KnapType_Trade = 4,
  ItemData_KnapType_ItemData_KnapType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ItemData_KnapType_ItemData_KnapType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ItemData_KnapType_IsValid(int value);
constexpr ItemData_KnapType ItemData_KnapType_KnapType_MIN = ItemData_KnapType_World;
constexpr ItemData_KnapType ItemData_KnapType_KnapType_MAX = ItemData_KnapType_Trade;
constexpr int ItemData_KnapType_KnapType_ARRAYSIZE = ItemData_KnapType_KnapType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ItemData_KnapType_descriptor();
template<typename T>
inline const std::string& ItemData_KnapType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ItemData_KnapType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ItemData_KnapType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ItemData_KnapType_descriptor(), enum_t_value);
}
inline bool ItemData_KnapType_Parse(
    const std::string& name, ItemData_KnapType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ItemData_KnapType>(
    ItemData_KnapType_descriptor(), name, value);
}
enum Gender : int {
  none = 0,
  male = 1,
  female = 2,
  Gender_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Gender_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Gender_IsValid(int value);
constexpr Gender Gender_MIN = none;
constexpr Gender Gender_MAX = female;
constexpr int Gender_ARRAYSIZE = Gender_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Gender_descriptor();
template<typename T>
inline const std::string& Gender_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Gender>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Gender_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Gender_descriptor(), enum_t_value);
}
inline bool Gender_Parse(
    const std::string& name, Gender* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Gender>(
    Gender_descriptor(), name, value);
}
// ===================================================================

class Vector3D :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.Vector3D) */ {
 public:
  Vector3D();
  virtual ~Vector3D();

  Vector3D(const Vector3D& from);
  Vector3D(Vector3D&& from) noexcept
    : Vector3D() {
    *this = ::std::move(from);
  }

  inline Vector3D& operator=(const Vector3D& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vector3D& operator=(Vector3D&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Vector3D& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Vector3D* internal_default_instance() {
    return reinterpret_cast<const Vector3D*>(
               &_Vector3D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Vector3D& a, Vector3D& b) {
    a.Swap(&b);
  }
  inline void Swap(Vector3D* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Vector3D* New() const final {
    return CreateMaybeMessage<Vector3D>(nullptr);
  }

  Vector3D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Vector3D>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Vector3D& from);
  void MergeFrom(const Vector3D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vector3D* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.Vector3D";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_db_2eproto);
    return ::descriptor_table_db_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);

  // @@protoc_insertion_point(class_scope:Proto.Vector3D)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float x_;
  float y_;
  float z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_db_2eproto;
};
// -------------------------------------------------------------------

class PlayerBase :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.PlayerBase) */ {
 public:
  PlayerBase();
  virtual ~PlayerBase();

  PlayerBase(const PlayerBase& from);
  PlayerBase(PlayerBase&& from) noexcept
    : PlayerBase() {
    *this = ::std::move(from);
  }

  inline PlayerBase& operator=(const PlayerBase& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerBase& operator=(PlayerBase&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlayerBase& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerBase* internal_default_instance() {
    return reinterpret_cast<const PlayerBase*>(
               &_PlayerBase_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PlayerBase& a, PlayerBase& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerBase* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlayerBase* New() const final {
    return CreateMaybeMessage<PlayerBase>(nullptr);
  }

  PlayerBase* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayerBase>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlayerBase& from);
  void MergeFrom(const PlayerBase& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerBase* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.PlayerBase";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_db_2eproto);
    return ::descriptor_table_db_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGenderFieldNumber = 1,
    kLevelFieldNumber = 2,
    kXpFieldNumber = 3,
    kHpFieldNumber = 4,
    kMpFieldNumber = 5,
    kAtkFieldNumber = 6,
    kDefFieldNumber = 7,
  };
  // .Proto.Gender gender = 1;
  void clear_gender();
  ::Proto::Gender gender() const;
  void set_gender(::Proto::Gender value);

  // int32 level = 2;
  void clear_level();
  ::PROTOBUF_NAMESPACE_ID::int32 level() const;
  void set_level(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 xp = 3;
  void clear_xp();
  ::PROTOBUF_NAMESPACE_ID::int32 xp() const;
  void set_xp(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 hp = 4;
  void clear_hp();
  ::PROTOBUF_NAMESPACE_ID::int32 hp() const;
  void set_hp(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 mp = 5;
  void clear_mp();
  ::PROTOBUF_NAMESPACE_ID::int32 mp() const;
  void set_mp(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 atk = 6;
  void clear_atk();
  ::PROTOBUF_NAMESPACE_ID::int32 atk() const;
  void set_atk(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 def = 7;
  void clear_def();
  ::PROTOBUF_NAMESPACE_ID::int32 def() const;
  void set_def(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Proto.PlayerBase)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int gender_;
  ::PROTOBUF_NAMESPACE_ID::int32 level_;
  ::PROTOBUF_NAMESPACE_ID::int32 xp_;
  ::PROTOBUF_NAMESPACE_ID::int32 hp_;
  ::PROTOBUF_NAMESPACE_ID::int32 mp_;
  ::PROTOBUF_NAMESPACE_ID::int32 atk_;
  ::PROTOBUF_NAMESPACE_ID::int32 def_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_db_2eproto;
};
// -------------------------------------------------------------------

class LastWorld :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.LastWorld) */ {
 public:
  LastWorld();
  virtual ~LastWorld();

  LastWorld(const LastWorld& from);
  LastWorld(LastWorld&& from) noexcept
    : LastWorld() {
    *this = ::std::move(from);
  }

  inline LastWorld& operator=(const LastWorld& from) {
    CopyFrom(from);
    return *this;
  }
  inline LastWorld& operator=(LastWorld&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LastWorld& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LastWorld* internal_default_instance() {
    return reinterpret_cast<const LastWorld*>(
               &_LastWorld_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(LastWorld& a, LastWorld& b) {
    a.Swap(&b);
  }
  inline void Swap(LastWorld* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LastWorld* New() const final {
    return CreateMaybeMessage<LastWorld>(nullptr);
  }

  LastWorld* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LastWorld>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LastWorld& from);
  void MergeFrom(const LastWorld& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LastWorld* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.LastWorld";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_db_2eproto);
    return ::descriptor_table_db_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 3,
    kWorldSnFieldNumber = 2,
    kWorldIdFieldNumber = 1,
  };
  // .Proto.Vector3D position = 3;
  bool has_position() const;
  void clear_position();
  const ::Proto::Vector3D& position() const;
  ::Proto::Vector3D* release_position();
  ::Proto::Vector3D* mutable_position();
  void set_allocated_position(::Proto::Vector3D* position);

  // int64 world_sn = 2;
  void clear_world_sn();
  ::PROTOBUF_NAMESPACE_ID::int64 world_sn() const;
  void set_world_sn(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int32 world_id = 1;
  void clear_world_id();
  ::PROTOBUF_NAMESPACE_ID::int32 world_id() const;
  void set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Proto.LastWorld)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::Proto::Vector3D* position_;
  ::PROTOBUF_NAMESPACE_ID::int64 world_sn_;
  ::PROTOBUF_NAMESPACE_ID::int32 world_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_db_2eproto;
};
// -------------------------------------------------------------------

class PlayerMisc :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.PlayerMisc) */ {
 public:
  PlayerMisc();
  virtual ~PlayerMisc();

  PlayerMisc(const PlayerMisc& from);
  PlayerMisc(PlayerMisc&& from) noexcept
    : PlayerMisc() {
    *this = ::std::move(from);
  }

  inline PlayerMisc& operator=(const PlayerMisc& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerMisc& operator=(PlayerMisc&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlayerMisc& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerMisc* internal_default_instance() {
    return reinterpret_cast<const PlayerMisc*>(
               &_PlayerMisc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PlayerMisc& a, PlayerMisc& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerMisc* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlayerMisc* New() const final {
    return CreateMaybeMessage<PlayerMisc>(nullptr);
  }

  PlayerMisc* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayerMisc>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlayerMisc& from);
  void MergeFrom(const PlayerMisc& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerMisc* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.PlayerMisc";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_db_2eproto);
    return ::descriptor_table_db_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLastWorldFieldNumber = 1,
    kLastDungeonFieldNumber = 2,
    kOnlineVersionFieldNumber = 3,
  };
  // .Proto.LastWorld last_world = 1;
  bool has_last_world() const;
  void clear_last_world();
  const ::Proto::LastWorld& last_world() const;
  ::Proto::LastWorld* release_last_world();
  ::Proto::LastWorld* mutable_last_world();
  void set_allocated_last_world(::Proto::LastWorld* last_world);

  // .Proto.LastWorld last_dungeon = 2;
  bool has_last_dungeon() const;
  void clear_last_dungeon();
  const ::Proto::LastWorld& last_dungeon() const;
  ::Proto::LastWorld* release_last_dungeon();
  ::Proto::LastWorld* mutable_last_dungeon();
  void set_allocated_last_dungeon(::Proto::LastWorld* last_dungeon);

  // int32 online_version = 3;
  void clear_online_version();
  ::PROTOBUF_NAMESPACE_ID::int32 online_version() const;
  void set_online_version(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Proto.PlayerMisc)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::Proto::LastWorld* last_world_;
  ::Proto::LastWorld* last_dungeon_;
  ::PROTOBUF_NAMESPACE_ID::int32 online_version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_db_2eproto;
};
// -------------------------------------------------------------------

class Team :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.Team) */ {
 public:
  Team();
  virtual ~Team();

  Team(const Team& from);
  Team(Team&& from) noexcept
    : Team() {
    *this = ::std::move(from);
  }

  inline Team& operator=(const Team& from) {
    CopyFrom(from);
    return *this;
  }
  inline Team& operator=(Team&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Team& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Team* internal_default_instance() {
    return reinterpret_cast<const Team*>(
               &_Team_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Team& a, Team& b) {
    a.Swap(&b);
  }
  inline void Swap(Team* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Team* New() const final {
    return CreateMaybeMessage<Team>(nullptr);
  }

  Team* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Team>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Team& from);
  void MergeFrom(const Team& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Team* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.Team";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_db_2eproto);
    return ::descriptor_table_db_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMembersFieldNumber = 2,
    kCaptainFieldNumber = 1,
  };
  // repeated uint64 members = 2;
  int members_size() const;
  void clear_members();
  ::PROTOBUF_NAMESPACE_ID::uint64 members(int index) const;
  void set_members(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_members(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      members() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_members();

  // uint64 captain = 1;
  void clear_captain();
  ::PROTOBUF_NAMESPACE_ID::uint64 captain() const;
  void set_captain(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:Proto.Team)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > members_;
  mutable std::atomic<int> _members_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 captain_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_db_2eproto;
};
// -------------------------------------------------------------------

class Player :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.Player) */ {
 public:
  Player();
  virtual ~Player();

  Player(const Player& from);
  Player(Player&& from) noexcept
    : Player() {
    *this = ::std::move(from);
  }

  inline Player& operator=(const Player& from) {
    CopyFrom(from);
    return *this;
  }
  inline Player& operator=(Player&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Player& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Player* internal_default_instance() {
    return reinterpret_cast<const Player*>(
               &_Player_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Player& a, Player& b) {
    a.Swap(&b);
  }
  inline void Swap(Player* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Player* New() const final {
    return CreateMaybeMessage<Player>(nullptr);
  }

  Player* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Player>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Player& from);
  void MergeFrom(const Player& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Player* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.Player";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_db_2eproto);
    return ::descriptor_table_db_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kBaseFieldNumber = 3,
    kKnapFieldNumber = 4,
    kMiscFieldNumber = 5,
    kTeamFieldNumber = 6,
    kSnFieldNumber = 1,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // .Proto.PlayerBase base = 3;
  bool has_base() const;
  void clear_base();
  const ::Proto::PlayerBase& base() const;
  ::Proto::PlayerBase* release_base();
  ::Proto::PlayerBase* mutable_base();
  void set_allocated_base(::Proto::PlayerBase* base);

  // .Proto.PlayerKnap knap = 4;
  bool has_knap() const;
  void clear_knap();
  const ::Proto::PlayerKnap& knap() const;
  ::Proto::PlayerKnap* release_knap();
  ::Proto::PlayerKnap* mutable_knap();
  void set_allocated_knap(::Proto::PlayerKnap* knap);

  // .Proto.PlayerMisc misc = 5;
  bool has_misc() const;
  void clear_misc();
  const ::Proto::PlayerMisc& misc() const;
  ::Proto::PlayerMisc* release_misc();
  ::Proto::PlayerMisc* mutable_misc();
  void set_allocated_misc(::Proto::PlayerMisc* misc);

  // .Proto.Team team = 6;
  bool has_team() const;
  void clear_team();
  const ::Proto::Team& team() const;
  ::Proto::Team* release_team();
  ::Proto::Team* mutable_team();
  void set_allocated_team(::Proto::Team* team);

  // uint64 sn = 1;
  void clear_sn();
  ::PROTOBUF_NAMESPACE_ID::uint64 sn() const;
  void set_sn(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:Proto.Player)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::Proto::PlayerBase* base_;
  ::Proto::PlayerKnap* knap_;
  ::Proto::PlayerMisc* misc_;
  ::Proto::Team* team_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sn_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_db_2eproto;
};
// -------------------------------------------------------------------

class ItemData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.ItemData) */ {
 public:
  ItemData();
  virtual ~ItemData();

  ItemData(const ItemData& from);
  ItemData(ItemData&& from) noexcept
    : ItemData() {
    *this = ::std::move(from);
  }

  inline ItemData& operator=(const ItemData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ItemData& operator=(ItemData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ItemData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ItemData* internal_default_instance() {
    return reinterpret_cast<const ItemData*>(
               &_ItemData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ItemData& a, ItemData& b) {
    a.Swap(&b);
  }
  inline void Swap(ItemData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ItemData* New() const final {
    return CreateMaybeMessage<ItemData>(nullptr);
  }

  ItemData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ItemData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ItemData& from);
  void MergeFrom(const ItemData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ItemData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.ItemData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_db_2eproto);
    return ::descriptor_table_db_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ItemData_ItemType ItemType;
  static constexpr ItemType None =
    ItemData_ItemType_None;
  static constexpr ItemType Potion =
    ItemData_ItemType_Potion;
  static constexpr ItemType Weapon =
    ItemData_ItemType_Weapon;
  static inline bool ItemType_IsValid(int value) {
    return ItemData_ItemType_IsValid(value);
  }
  static constexpr ItemType ItemType_MIN =
    ItemData_ItemType_ItemType_MIN;
  static constexpr ItemType ItemType_MAX =
    ItemData_ItemType_ItemType_MAX;
  static constexpr int ItemType_ARRAYSIZE =
    ItemData_ItemType_ItemType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ItemType_descriptor() {
    return ItemData_ItemType_descriptor();
  }
  template<typename T>
  static inline const std::string& ItemType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ItemType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ItemType_Name.");
    return ItemData_ItemType_Name(enum_t_value);
  }
  static inline bool ItemType_Parse(const std::string& name,
      ItemType* value) {
    return ItemData_ItemType_Parse(name, value);
  }

  typedef ItemData_KnapType KnapType;
  static constexpr KnapType World =
    ItemData_KnapType_World;
  static constexpr KnapType Bag =
    ItemData_KnapType_Bag;
  static constexpr KnapType Equip =
    ItemData_KnapType_Equip;
  static constexpr KnapType Action =
    ItemData_KnapType_Action;
  static constexpr KnapType Trade =
    ItemData_KnapType_Trade;
  static inline bool KnapType_IsValid(int value) {
    return ItemData_KnapType_IsValid(value);
  }
  static constexpr KnapType KnapType_MIN =
    ItemData_KnapType_KnapType_MIN;
  static constexpr KnapType KnapType_MAX =
    ItemData_KnapType_KnapType_MAX;
  static constexpr int KnapType_ARRAYSIZE =
    ItemData_KnapType_KnapType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  KnapType_descriptor() {
    return ItemData_KnapType_descriptor();
  }
  template<typename T>
  static inline const std::string& KnapType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, KnapType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function KnapType_Name.");
    return ItemData_KnapType_Name(enum_t_value);
  }
  static inline bool KnapType_Parse(const std::string& name,
      KnapType* value) {
    return ItemData_KnapType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSnFieldNumber = 1,
    kItemTypeFieldNumber = 2,
    kIdFieldNumber = 3,
    kKnapTypeFieldNumber = 4,
    kIndexFieldNumber = 5,
  };
  // uint64 sn = 1;
  void clear_sn();
  ::PROTOBUF_NAMESPACE_ID::uint64 sn() const;
  void set_sn(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // .Proto.ItemData.ItemType itemType = 2;
  void clear_itemtype();
  ::Proto::ItemData_ItemType itemtype() const;
  void set_itemtype(::Proto::ItemData_ItemType value);

  // int32 id = 3;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // .Proto.ItemData.KnapType knapType = 4;
  void clear_knaptype();
  ::Proto::ItemData_KnapType knaptype() const;
  void set_knaptype(::Proto::ItemData_KnapType value);

  // int32 index = 5;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::int32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Proto.ItemData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sn_;
  int itemtype_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  int knaptype_;
  ::PROTOBUF_NAMESPACE_ID::int32 index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_db_2eproto;
};
// -------------------------------------------------------------------

class PlayerKnap :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.PlayerKnap) */ {
 public:
  PlayerKnap();
  virtual ~PlayerKnap();

  PlayerKnap(const PlayerKnap& from);
  PlayerKnap(PlayerKnap&& from) noexcept
    : PlayerKnap() {
    *this = ::std::move(from);
  }

  inline PlayerKnap& operator=(const PlayerKnap& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerKnap& operator=(PlayerKnap&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlayerKnap& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerKnap* internal_default_instance() {
    return reinterpret_cast<const PlayerKnap*>(
               &_PlayerKnap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(PlayerKnap& a, PlayerKnap& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerKnap* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlayerKnap* New() const final {
    return CreateMaybeMessage<PlayerKnap>(nullptr);
  }

  PlayerKnap* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayerKnap>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlayerKnap& from);
  void MergeFrom(const PlayerKnap& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerKnap* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.PlayerKnap";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_db_2eproto);
    return ::descriptor_table_db_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 2,
    kGoldFieldNumber = 1,
  };
  // repeated .Proto.ItemData items = 2;
  int items_size() const;
  void clear_items();
  ::Proto::ItemData* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::ItemData >*
      mutable_items();
  const ::Proto::ItemData& items(int index) const;
  ::Proto::ItemData* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::ItemData >&
      items() const;

  // int32 gold = 1;
  void clear_gold();
  ::PROTOBUF_NAMESPACE_ID::int32 gold() const;
  void set_gold(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Proto.PlayerKnap)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::ItemData > items_;
  ::PROTOBUF_NAMESPACE_ID::int32 gold_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_db_2eproto;
};
// -------------------------------------------------------------------

class UpdateKnapItem :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.UpdateKnapItem) */ {
 public:
  UpdateKnapItem();
  virtual ~UpdateKnapItem();

  UpdateKnapItem(const UpdateKnapItem& from);
  UpdateKnapItem(UpdateKnapItem&& from) noexcept
    : UpdateKnapItem() {
    *this = ::std::move(from);
  }

  inline UpdateKnapItem& operator=(const UpdateKnapItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateKnapItem& operator=(UpdateKnapItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateKnapItem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateKnapItem* internal_default_instance() {
    return reinterpret_cast<const UpdateKnapItem*>(
               &_UpdateKnapItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(UpdateKnapItem& a, UpdateKnapItem& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateKnapItem* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateKnapItem* New() const final {
    return CreateMaybeMessage<UpdateKnapItem>(nullptr);
  }

  UpdateKnapItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateKnapItem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateKnapItem& from);
  void MergeFrom(const UpdateKnapItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateKnapItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.UpdateKnapItem";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_db_2eproto);
    return ::descriptor_table_db_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemFieldNumber = 1,
  };
  // .Proto.ItemData item = 1;
  bool has_item() const;
  void clear_item();
  const ::Proto::ItemData& item() const;
  ::Proto::ItemData* release_item();
  ::Proto::ItemData* mutable_item();
  void set_allocated_item(::Proto::ItemData* item);

  // @@protoc_insertion_point(class_scope:Proto.UpdateKnapItem)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::Proto::ItemData* item_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_db_2eproto;
};
// -------------------------------------------------------------------

class UpdateTradeItem :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.UpdateTradeItem) */ {
 public:
  UpdateTradeItem();
  virtual ~UpdateTradeItem();

  UpdateTradeItem(const UpdateTradeItem& from);
  UpdateTradeItem(UpdateTradeItem&& from) noexcept
    : UpdateTradeItem() {
    *this = ::std::move(from);
  }

  inline UpdateTradeItem& operator=(const UpdateTradeItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateTradeItem& operator=(UpdateTradeItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateTradeItem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateTradeItem* internal_default_instance() {
    return reinterpret_cast<const UpdateTradeItem*>(
               &_UpdateTradeItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(UpdateTradeItem& a, UpdateTradeItem& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateTradeItem* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateTradeItem* New() const final {
    return CreateMaybeMessage<UpdateTradeItem>(nullptr);
  }

  UpdateTradeItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateTradeItem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateTradeItem& from);
  void MergeFrom(const UpdateTradeItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateTradeItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.UpdateTradeItem";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_db_2eproto);
    return ::descriptor_table_db_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemFieldNumber = 3,
    kSenderFieldNumber = 1,
    kRecverFieldNumber = 2,
    kGoldFieldNumber = 4,
    kAckFieldNumber = 5,
  };
  // .Proto.ItemData item = 3;
  bool has_item() const;
  void clear_item();
  const ::Proto::ItemData& item() const;
  ::Proto::ItemData* release_item();
  ::Proto::ItemData* mutable_item();
  void set_allocated_item(::Proto::ItemData* item);

  // uint64 sender = 1;
  void clear_sender();
  ::PROTOBUF_NAMESPACE_ID::uint64 sender() const;
  void set_sender(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 recver = 2;
  void clear_recver();
  ::PROTOBUF_NAMESPACE_ID::uint64 recver() const;
  void set_recver(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // int32 gold = 4;
  void clear_gold();
  ::PROTOBUF_NAMESPACE_ID::int32 gold() const;
  void set_gold(::PROTOBUF_NAMESPACE_ID::int32 value);

  // bool ack = 5;
  void clear_ack();
  bool ack() const;
  void set_ack(bool value);

  // @@protoc_insertion_point(class_scope:Proto.UpdateTradeItem)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::Proto::ItemData* item_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sender_;
  ::PROTOBUF_NAMESPACE_ID::uint64 recver_;
  ::PROTOBUF_NAMESPACE_ID::int32 gold_;
  bool ack_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_db_2eproto;
};
// -------------------------------------------------------------------

class TradeOpen :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.TradeOpen) */ {
 public:
  TradeOpen();
  virtual ~TradeOpen();

  TradeOpen(const TradeOpen& from);
  TradeOpen(TradeOpen&& from) noexcept
    : TradeOpen() {
    *this = ::std::move(from);
  }

  inline TradeOpen& operator=(const TradeOpen& from) {
    CopyFrom(from);
    return *this;
  }
  inline TradeOpen& operator=(TradeOpen&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TradeOpen& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TradeOpen* internal_default_instance() {
    return reinterpret_cast<const TradeOpen*>(
               &_TradeOpen_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(TradeOpen& a, TradeOpen& b) {
    a.Swap(&b);
  }
  inline void Swap(TradeOpen* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TradeOpen* New() const final {
    return CreateMaybeMessage<TradeOpen>(nullptr);
  }

  TradeOpen* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TradeOpen>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TradeOpen& from);
  void MergeFrom(const TradeOpen& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TradeOpen* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.TradeOpen";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_db_2eproto);
    return ::descriptor_table_db_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kApplicantFieldNumber = 1,
    kResponderFieldNumber = 2,
  };
  // uint64 applicant = 1;
  void clear_applicant();
  ::PROTOBUF_NAMESPACE_ID::uint64 applicant() const;
  void set_applicant(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 responder = 2;
  void clear_responder();
  ::PROTOBUF_NAMESPACE_ID::uint64 responder() const;
  void set_responder(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:Proto.TradeOpen)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 applicant_;
  ::PROTOBUF_NAMESPACE_ID::uint64 responder_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_db_2eproto;
};
// -------------------------------------------------------------------

class TradeClose :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.TradeClose) */ {
 public:
  TradeClose();
  virtual ~TradeClose();

  TradeClose(const TradeClose& from);
  TradeClose(TradeClose&& from) noexcept
    : TradeClose() {
    *this = ::std::move(from);
  }

  inline TradeClose& operator=(const TradeClose& from) {
    CopyFrom(from);
    return *this;
  }
  inline TradeClose& operator=(TradeClose&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TradeClose& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TradeClose* internal_default_instance() {
    return reinterpret_cast<const TradeClose*>(
               &_TradeClose_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(TradeClose& a, TradeClose& b) {
    a.Swap(&b);
  }
  inline void Swap(TradeClose* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TradeClose* New() const final {
    return CreateMaybeMessage<TradeClose>(nullptr);
  }

  TradeClose* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TradeClose>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TradeClose& from);
  void MergeFrom(const TradeClose& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TradeClose* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.TradeClose";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_db_2eproto);
    return ::descriptor_table_db_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);

  // @@protoc_insertion_point(class_scope:Proto.TradeClose)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_db_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Vector3D

// float x = 1;
inline void Vector3D::clear_x() {
  x_ = 0;
}
inline float Vector3D::x() const {
  // @@protoc_insertion_point(field_get:Proto.Vector3D.x)
  return x_;
}
inline void Vector3D::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:Proto.Vector3D.x)
}

// float y = 2;
inline void Vector3D::clear_y() {
  y_ = 0;
}
inline float Vector3D::y() const {
  // @@protoc_insertion_point(field_get:Proto.Vector3D.y)
  return y_;
}
inline void Vector3D::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:Proto.Vector3D.y)
}

// float z = 3;
inline void Vector3D::clear_z() {
  z_ = 0;
}
inline float Vector3D::z() const {
  // @@protoc_insertion_point(field_get:Proto.Vector3D.z)
  return z_;
}
inline void Vector3D::set_z(float value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:Proto.Vector3D.z)
}

// -------------------------------------------------------------------

// PlayerBase

// .Proto.Gender gender = 1;
inline void PlayerBase::clear_gender() {
  gender_ = 0;
}
inline ::Proto::Gender PlayerBase::gender() const {
  // @@protoc_insertion_point(field_get:Proto.PlayerBase.gender)
  return static_cast< ::Proto::Gender >(gender_);
}
inline void PlayerBase::set_gender(::Proto::Gender value) {
  
  gender_ = value;
  // @@protoc_insertion_point(field_set:Proto.PlayerBase.gender)
}

// int32 level = 2;
inline void PlayerBase::clear_level() {
  level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerBase::level() const {
  // @@protoc_insertion_point(field_get:Proto.PlayerBase.level)
  return level_;
}
inline void PlayerBase::set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:Proto.PlayerBase.level)
}

// int32 xp = 3;
inline void PlayerBase::clear_xp() {
  xp_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerBase::xp() const {
  // @@protoc_insertion_point(field_get:Proto.PlayerBase.xp)
  return xp_;
}
inline void PlayerBase::set_xp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xp_ = value;
  // @@protoc_insertion_point(field_set:Proto.PlayerBase.xp)
}

// int32 hp = 4;
inline void PlayerBase::clear_hp() {
  hp_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerBase::hp() const {
  // @@protoc_insertion_point(field_get:Proto.PlayerBase.hp)
  return hp_;
}
inline void PlayerBase::set_hp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  hp_ = value;
  // @@protoc_insertion_point(field_set:Proto.PlayerBase.hp)
}

// int32 mp = 5;
inline void PlayerBase::clear_mp() {
  mp_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerBase::mp() const {
  // @@protoc_insertion_point(field_get:Proto.PlayerBase.mp)
  return mp_;
}
inline void PlayerBase::set_mp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mp_ = value;
  // @@protoc_insertion_point(field_set:Proto.PlayerBase.mp)
}

// int32 atk = 6;
inline void PlayerBase::clear_atk() {
  atk_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerBase::atk() const {
  // @@protoc_insertion_point(field_get:Proto.PlayerBase.atk)
  return atk_;
}
inline void PlayerBase::set_atk(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  atk_ = value;
  // @@protoc_insertion_point(field_set:Proto.PlayerBase.atk)
}

// int32 def = 7;
inline void PlayerBase::clear_def() {
  def_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerBase::def() const {
  // @@protoc_insertion_point(field_get:Proto.PlayerBase.def)
  return def_;
}
inline void PlayerBase::set_def(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  def_ = value;
  // @@protoc_insertion_point(field_set:Proto.PlayerBase.def)
}

// -------------------------------------------------------------------

// LastWorld

// int32 world_id = 1;
inline void LastWorld::clear_world_id() {
  world_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LastWorld::world_id() const {
  // @@protoc_insertion_point(field_get:Proto.LastWorld.world_id)
  return world_id_;
}
inline void LastWorld::set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  world_id_ = value;
  // @@protoc_insertion_point(field_set:Proto.LastWorld.world_id)
}

// int64 world_sn = 2;
inline void LastWorld::clear_world_sn() {
  world_sn_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LastWorld::world_sn() const {
  // @@protoc_insertion_point(field_get:Proto.LastWorld.world_sn)
  return world_sn_;
}
inline void LastWorld::set_world_sn(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  world_sn_ = value;
  // @@protoc_insertion_point(field_set:Proto.LastWorld.world_sn)
}

// .Proto.Vector3D position = 3;
inline bool LastWorld::has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline void LastWorld::clear_position() {
  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
inline const ::Proto::Vector3D& LastWorld::position() const {
  const ::Proto::Vector3D* p = position_;
  // @@protoc_insertion_point(field_get:Proto.LastWorld.position)
  return p != nullptr ? *p : *reinterpret_cast<const ::Proto::Vector3D*>(
      &::Proto::_Vector3D_default_instance_);
}
inline ::Proto::Vector3D* LastWorld::release_position() {
  // @@protoc_insertion_point(field_release:Proto.LastWorld.position)
  
  ::Proto::Vector3D* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::Proto::Vector3D* LastWorld::mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::Vector3D>(GetArenaNoVirtual());
    position_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Proto.LastWorld.position)
  return position_;
}
inline void LastWorld::set_allocated_position(::Proto::Vector3D* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:Proto.LastWorld.position)
}

// -------------------------------------------------------------------

// PlayerMisc

// .Proto.LastWorld last_world = 1;
inline bool PlayerMisc::has_last_world() const {
  return this != internal_default_instance() && last_world_ != nullptr;
}
inline void PlayerMisc::clear_last_world() {
  if (GetArenaNoVirtual() == nullptr && last_world_ != nullptr) {
    delete last_world_;
  }
  last_world_ = nullptr;
}
inline const ::Proto::LastWorld& PlayerMisc::last_world() const {
  const ::Proto::LastWorld* p = last_world_;
  // @@protoc_insertion_point(field_get:Proto.PlayerMisc.last_world)
  return p != nullptr ? *p : *reinterpret_cast<const ::Proto::LastWorld*>(
      &::Proto::_LastWorld_default_instance_);
}
inline ::Proto::LastWorld* PlayerMisc::release_last_world() {
  // @@protoc_insertion_point(field_release:Proto.PlayerMisc.last_world)
  
  ::Proto::LastWorld* temp = last_world_;
  last_world_ = nullptr;
  return temp;
}
inline ::Proto::LastWorld* PlayerMisc::mutable_last_world() {
  
  if (last_world_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::LastWorld>(GetArenaNoVirtual());
    last_world_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Proto.PlayerMisc.last_world)
  return last_world_;
}
inline void PlayerMisc::set_allocated_last_world(::Proto::LastWorld* last_world) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete last_world_;
  }
  if (last_world) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      last_world = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, last_world, submessage_arena);
    }
    
  } else {
    
  }
  last_world_ = last_world;
  // @@protoc_insertion_point(field_set_allocated:Proto.PlayerMisc.last_world)
}

// .Proto.LastWorld last_dungeon = 2;
inline bool PlayerMisc::has_last_dungeon() const {
  return this != internal_default_instance() && last_dungeon_ != nullptr;
}
inline void PlayerMisc::clear_last_dungeon() {
  if (GetArenaNoVirtual() == nullptr && last_dungeon_ != nullptr) {
    delete last_dungeon_;
  }
  last_dungeon_ = nullptr;
}
inline const ::Proto::LastWorld& PlayerMisc::last_dungeon() const {
  const ::Proto::LastWorld* p = last_dungeon_;
  // @@protoc_insertion_point(field_get:Proto.PlayerMisc.last_dungeon)
  return p != nullptr ? *p : *reinterpret_cast<const ::Proto::LastWorld*>(
      &::Proto::_LastWorld_default_instance_);
}
inline ::Proto::LastWorld* PlayerMisc::release_last_dungeon() {
  // @@protoc_insertion_point(field_release:Proto.PlayerMisc.last_dungeon)
  
  ::Proto::LastWorld* temp = last_dungeon_;
  last_dungeon_ = nullptr;
  return temp;
}
inline ::Proto::LastWorld* PlayerMisc::mutable_last_dungeon() {
  
  if (last_dungeon_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::LastWorld>(GetArenaNoVirtual());
    last_dungeon_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Proto.PlayerMisc.last_dungeon)
  return last_dungeon_;
}
inline void PlayerMisc::set_allocated_last_dungeon(::Proto::LastWorld* last_dungeon) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete last_dungeon_;
  }
  if (last_dungeon) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      last_dungeon = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, last_dungeon, submessage_arena);
    }
    
  } else {
    
  }
  last_dungeon_ = last_dungeon;
  // @@protoc_insertion_point(field_set_allocated:Proto.PlayerMisc.last_dungeon)
}

// int32 online_version = 3;
inline void PlayerMisc::clear_online_version() {
  online_version_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerMisc::online_version() const {
  // @@protoc_insertion_point(field_get:Proto.PlayerMisc.online_version)
  return online_version_;
}
inline void PlayerMisc::set_online_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  online_version_ = value;
  // @@protoc_insertion_point(field_set:Proto.PlayerMisc.online_version)
}

// -------------------------------------------------------------------

// Team

// uint64 captain = 1;
inline void Team::clear_captain() {
  captain_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Team::captain() const {
  // @@protoc_insertion_point(field_get:Proto.Team.captain)
  return captain_;
}
inline void Team::set_captain(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  captain_ = value;
  // @@protoc_insertion_point(field_set:Proto.Team.captain)
}

// repeated uint64 members = 2;
inline int Team::members_size() const {
  return members_.size();
}
inline void Team::clear_members() {
  members_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Team::members(int index) const {
  // @@protoc_insertion_point(field_get:Proto.Team.members)
  return members_.Get(index);
}
inline void Team::set_members(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  members_.Set(index, value);
  // @@protoc_insertion_point(field_set:Proto.Team.members)
}
inline void Team::add_members(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  members_.Add(value);
  // @@protoc_insertion_point(field_add:Proto.Team.members)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
Team::members() const {
  // @@protoc_insertion_point(field_list:Proto.Team.members)
  return members_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
Team::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:Proto.Team.members)
  return &members_;
}

// -------------------------------------------------------------------

// Player

// uint64 sn = 1;
inline void Player::clear_sn() {
  sn_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Player::sn() const {
  // @@protoc_insertion_point(field_get:Proto.Player.sn)
  return sn_;
}
inline void Player::set_sn(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  sn_ = value;
  // @@protoc_insertion_point(field_set:Proto.Player.sn)
}

// string name = 2;
inline void Player::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Player::name() const {
  // @@protoc_insertion_point(field_get:Proto.Player.name)
  return name_.GetNoArena();
}
inline void Player::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Proto.Player.name)
}
inline void Player::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Proto.Player.name)
}
inline void Player::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proto.Player.name)
}
inline void Player::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proto.Player.name)
}
inline std::string* Player::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:Proto.Player.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Player::release_name() {
  // @@protoc_insertion_point(field_release:Proto.Player.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Player::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Proto.Player.name)
}

// .Proto.PlayerBase base = 3;
inline bool Player::has_base() const {
  return this != internal_default_instance() && base_ != nullptr;
}
inline void Player::clear_base() {
  if (GetArenaNoVirtual() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
inline const ::Proto::PlayerBase& Player::base() const {
  const ::Proto::PlayerBase* p = base_;
  // @@protoc_insertion_point(field_get:Proto.Player.base)
  return p != nullptr ? *p : *reinterpret_cast<const ::Proto::PlayerBase*>(
      &::Proto::_PlayerBase_default_instance_);
}
inline ::Proto::PlayerBase* Player::release_base() {
  // @@protoc_insertion_point(field_release:Proto.Player.base)
  
  ::Proto::PlayerBase* temp = base_;
  base_ = nullptr;
  return temp;
}
inline ::Proto::PlayerBase* Player::mutable_base() {
  
  if (base_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::PlayerBase>(GetArenaNoVirtual());
    base_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Proto.Player.base)
  return base_;
}
inline void Player::set_allocated_base(::Proto::PlayerBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete base_;
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:Proto.Player.base)
}

// .Proto.PlayerKnap knap = 4;
inline bool Player::has_knap() const {
  return this != internal_default_instance() && knap_ != nullptr;
}
inline void Player::clear_knap() {
  if (GetArenaNoVirtual() == nullptr && knap_ != nullptr) {
    delete knap_;
  }
  knap_ = nullptr;
}
inline const ::Proto::PlayerKnap& Player::knap() const {
  const ::Proto::PlayerKnap* p = knap_;
  // @@protoc_insertion_point(field_get:Proto.Player.knap)
  return p != nullptr ? *p : *reinterpret_cast<const ::Proto::PlayerKnap*>(
      &::Proto::_PlayerKnap_default_instance_);
}
inline ::Proto::PlayerKnap* Player::release_knap() {
  // @@protoc_insertion_point(field_release:Proto.Player.knap)
  
  ::Proto::PlayerKnap* temp = knap_;
  knap_ = nullptr;
  return temp;
}
inline ::Proto::PlayerKnap* Player::mutable_knap() {
  
  if (knap_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::PlayerKnap>(GetArenaNoVirtual());
    knap_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Proto.Player.knap)
  return knap_;
}
inline void Player::set_allocated_knap(::Proto::PlayerKnap* knap) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete knap_;
  }
  if (knap) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      knap = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, knap, submessage_arena);
    }
    
  } else {
    
  }
  knap_ = knap;
  // @@protoc_insertion_point(field_set_allocated:Proto.Player.knap)
}

// .Proto.PlayerMisc misc = 5;
inline bool Player::has_misc() const {
  return this != internal_default_instance() && misc_ != nullptr;
}
inline void Player::clear_misc() {
  if (GetArenaNoVirtual() == nullptr && misc_ != nullptr) {
    delete misc_;
  }
  misc_ = nullptr;
}
inline const ::Proto::PlayerMisc& Player::misc() const {
  const ::Proto::PlayerMisc* p = misc_;
  // @@protoc_insertion_point(field_get:Proto.Player.misc)
  return p != nullptr ? *p : *reinterpret_cast<const ::Proto::PlayerMisc*>(
      &::Proto::_PlayerMisc_default_instance_);
}
inline ::Proto::PlayerMisc* Player::release_misc() {
  // @@protoc_insertion_point(field_release:Proto.Player.misc)
  
  ::Proto::PlayerMisc* temp = misc_;
  misc_ = nullptr;
  return temp;
}
inline ::Proto::PlayerMisc* Player::mutable_misc() {
  
  if (misc_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::PlayerMisc>(GetArenaNoVirtual());
    misc_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Proto.Player.misc)
  return misc_;
}
inline void Player::set_allocated_misc(::Proto::PlayerMisc* misc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete misc_;
  }
  if (misc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      misc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, misc, submessage_arena);
    }
    
  } else {
    
  }
  misc_ = misc;
  // @@protoc_insertion_point(field_set_allocated:Proto.Player.misc)
}

// .Proto.Team team = 6;
inline bool Player::has_team() const {
  return this != internal_default_instance() && team_ != nullptr;
}
inline void Player::clear_team() {
  if (GetArenaNoVirtual() == nullptr && team_ != nullptr) {
    delete team_;
  }
  team_ = nullptr;
}
inline const ::Proto::Team& Player::team() const {
  const ::Proto::Team* p = team_;
  // @@protoc_insertion_point(field_get:Proto.Player.team)
  return p != nullptr ? *p : *reinterpret_cast<const ::Proto::Team*>(
      &::Proto::_Team_default_instance_);
}
inline ::Proto::Team* Player::release_team() {
  // @@protoc_insertion_point(field_release:Proto.Player.team)
  
  ::Proto::Team* temp = team_;
  team_ = nullptr;
  return temp;
}
inline ::Proto::Team* Player::mutable_team() {
  
  if (team_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::Team>(GetArenaNoVirtual());
    team_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Proto.Player.team)
  return team_;
}
inline void Player::set_allocated_team(::Proto::Team* team) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete team_;
  }
  if (team) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      team = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, team, submessage_arena);
    }
    
  } else {
    
  }
  team_ = team;
  // @@protoc_insertion_point(field_set_allocated:Proto.Player.team)
}

// -------------------------------------------------------------------

// ItemData

// uint64 sn = 1;
inline void ItemData::clear_sn() {
  sn_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ItemData::sn() const {
  // @@protoc_insertion_point(field_get:Proto.ItemData.sn)
  return sn_;
}
inline void ItemData::set_sn(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  sn_ = value;
  // @@protoc_insertion_point(field_set:Proto.ItemData.sn)
}

// .Proto.ItemData.ItemType itemType = 2;
inline void ItemData::clear_itemtype() {
  itemtype_ = 0;
}
inline ::Proto::ItemData_ItemType ItemData::itemtype() const {
  // @@protoc_insertion_point(field_get:Proto.ItemData.itemType)
  return static_cast< ::Proto::ItemData_ItemType >(itemtype_);
}
inline void ItemData::set_itemtype(::Proto::ItemData_ItemType value) {
  
  itemtype_ = value;
  // @@protoc_insertion_point(field_set:Proto.ItemData.itemType)
}

// int32 id = 3;
inline void ItemData::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ItemData::id() const {
  // @@protoc_insertion_point(field_get:Proto.ItemData.id)
  return id_;
}
inline void ItemData::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:Proto.ItemData.id)
}

// .Proto.ItemData.KnapType knapType = 4;
inline void ItemData::clear_knaptype() {
  knaptype_ = 0;
}
inline ::Proto::ItemData_KnapType ItemData::knaptype() const {
  // @@protoc_insertion_point(field_get:Proto.ItemData.knapType)
  return static_cast< ::Proto::ItemData_KnapType >(knaptype_);
}
inline void ItemData::set_knaptype(::Proto::ItemData_KnapType value) {
  
  knaptype_ = value;
  // @@protoc_insertion_point(field_set:Proto.ItemData.knapType)
}

// int32 index = 5;
inline void ItemData::clear_index() {
  index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ItemData::index() const {
  // @@protoc_insertion_point(field_get:Proto.ItemData.index)
  return index_;
}
inline void ItemData::set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:Proto.ItemData.index)
}

// -------------------------------------------------------------------

// PlayerKnap

// int32 gold = 1;
inline void PlayerKnap::clear_gold() {
  gold_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerKnap::gold() const {
  // @@protoc_insertion_point(field_get:Proto.PlayerKnap.gold)
  return gold_;
}
inline void PlayerKnap::set_gold(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gold_ = value;
  // @@protoc_insertion_point(field_set:Proto.PlayerKnap.gold)
}

// repeated .Proto.ItemData items = 2;
inline int PlayerKnap::items_size() const {
  return items_.size();
}
inline void PlayerKnap::clear_items() {
  items_.Clear();
}
inline ::Proto::ItemData* PlayerKnap::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.PlayerKnap.items)
  return items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::ItemData >*
PlayerKnap::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:Proto.PlayerKnap.items)
  return &items_;
}
inline const ::Proto::ItemData& PlayerKnap::items(int index) const {
  // @@protoc_insertion_point(field_get:Proto.PlayerKnap.items)
  return items_.Get(index);
}
inline ::Proto::ItemData* PlayerKnap::add_items() {
  // @@protoc_insertion_point(field_add:Proto.PlayerKnap.items)
  return items_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::ItemData >&
PlayerKnap::items() const {
  // @@protoc_insertion_point(field_list:Proto.PlayerKnap.items)
  return items_;
}

// -------------------------------------------------------------------

// UpdateKnapItem

// .Proto.ItemData item = 1;
inline bool UpdateKnapItem::has_item() const {
  return this != internal_default_instance() && item_ != nullptr;
}
inline void UpdateKnapItem::clear_item() {
  if (GetArenaNoVirtual() == nullptr && item_ != nullptr) {
    delete item_;
  }
  item_ = nullptr;
}
inline const ::Proto::ItemData& UpdateKnapItem::item() const {
  const ::Proto::ItemData* p = item_;
  // @@protoc_insertion_point(field_get:Proto.UpdateKnapItem.item)
  return p != nullptr ? *p : *reinterpret_cast<const ::Proto::ItemData*>(
      &::Proto::_ItemData_default_instance_);
}
inline ::Proto::ItemData* UpdateKnapItem::release_item() {
  // @@protoc_insertion_point(field_release:Proto.UpdateKnapItem.item)
  
  ::Proto::ItemData* temp = item_;
  item_ = nullptr;
  return temp;
}
inline ::Proto::ItemData* UpdateKnapItem::mutable_item() {
  
  if (item_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::ItemData>(GetArenaNoVirtual());
    item_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Proto.UpdateKnapItem.item)
  return item_;
}
inline void UpdateKnapItem::set_allocated_item(::Proto::ItemData* item) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete item_;
  }
  if (item) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      item = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, item, submessage_arena);
    }
    
  } else {
    
  }
  item_ = item;
  // @@protoc_insertion_point(field_set_allocated:Proto.UpdateKnapItem.item)
}

// -------------------------------------------------------------------

// UpdateTradeItem

// uint64 sender = 1;
inline void UpdateTradeItem::clear_sender() {
  sender_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UpdateTradeItem::sender() const {
  // @@protoc_insertion_point(field_get:Proto.UpdateTradeItem.sender)
  return sender_;
}
inline void UpdateTradeItem::set_sender(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  sender_ = value;
  // @@protoc_insertion_point(field_set:Proto.UpdateTradeItem.sender)
}

// uint64 recver = 2;
inline void UpdateTradeItem::clear_recver() {
  recver_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UpdateTradeItem::recver() const {
  // @@protoc_insertion_point(field_get:Proto.UpdateTradeItem.recver)
  return recver_;
}
inline void UpdateTradeItem::set_recver(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  recver_ = value;
  // @@protoc_insertion_point(field_set:Proto.UpdateTradeItem.recver)
}

// .Proto.ItemData item = 3;
inline bool UpdateTradeItem::has_item() const {
  return this != internal_default_instance() && item_ != nullptr;
}
inline void UpdateTradeItem::clear_item() {
  if (GetArenaNoVirtual() == nullptr && item_ != nullptr) {
    delete item_;
  }
  item_ = nullptr;
}
inline const ::Proto::ItemData& UpdateTradeItem::item() const {
  const ::Proto::ItemData* p = item_;
  // @@protoc_insertion_point(field_get:Proto.UpdateTradeItem.item)
  return p != nullptr ? *p : *reinterpret_cast<const ::Proto::ItemData*>(
      &::Proto::_ItemData_default_instance_);
}
inline ::Proto::ItemData* UpdateTradeItem::release_item() {
  // @@protoc_insertion_point(field_release:Proto.UpdateTradeItem.item)
  
  ::Proto::ItemData* temp = item_;
  item_ = nullptr;
  return temp;
}
inline ::Proto::ItemData* UpdateTradeItem::mutable_item() {
  
  if (item_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::ItemData>(GetArenaNoVirtual());
    item_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Proto.UpdateTradeItem.item)
  return item_;
}
inline void UpdateTradeItem::set_allocated_item(::Proto::ItemData* item) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete item_;
  }
  if (item) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      item = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, item, submessage_arena);
    }
    
  } else {
    
  }
  item_ = item;
  // @@protoc_insertion_point(field_set_allocated:Proto.UpdateTradeItem.item)
}

// int32 gold = 4;
inline void UpdateTradeItem::clear_gold() {
  gold_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateTradeItem::gold() const {
  // @@protoc_insertion_point(field_get:Proto.UpdateTradeItem.gold)
  return gold_;
}
inline void UpdateTradeItem::set_gold(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gold_ = value;
  // @@protoc_insertion_point(field_set:Proto.UpdateTradeItem.gold)
}

// bool ack = 5;
inline void UpdateTradeItem::clear_ack() {
  ack_ = false;
}
inline bool UpdateTradeItem::ack() const {
  // @@protoc_insertion_point(field_get:Proto.UpdateTradeItem.ack)
  return ack_;
}
inline void UpdateTradeItem::set_ack(bool value) {
  
  ack_ = value;
  // @@protoc_insertion_point(field_set:Proto.UpdateTradeItem.ack)
}

// -------------------------------------------------------------------

// TradeOpen

// uint64 applicant = 1;
inline void TradeOpen::clear_applicant() {
  applicant_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TradeOpen::applicant() const {
  // @@protoc_insertion_point(field_get:Proto.TradeOpen.applicant)
  return applicant_;
}
inline void TradeOpen::set_applicant(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  applicant_ = value;
  // @@protoc_insertion_point(field_set:Proto.TradeOpen.applicant)
}

// uint64 responder = 2;
inline void TradeOpen::clear_responder() {
  responder_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TradeOpen::responder() const {
  // @@protoc_insertion_point(field_get:Proto.TradeOpen.responder)
  return responder_;
}
inline void TradeOpen::set_responder(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  responder_ = value;
  // @@protoc_insertion_point(field_set:Proto.TradeOpen.responder)
}

// -------------------------------------------------------------------

// TradeClose

// bool success = 1;
inline void TradeClose::clear_success() {
  success_ = false;
}
inline bool TradeClose::success() const {
  // @@protoc_insertion_point(field_get:Proto.TradeClose.success)
  return success_;
}
inline void TradeClose::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:Proto.TradeClose.success)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Proto

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Proto::ItemData_ItemType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Proto::ItemData_ItemType>() {
  return ::Proto::ItemData_ItemType_descriptor();
}
template <> struct is_proto_enum< ::Proto::ItemData_KnapType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Proto::ItemData_KnapType>() {
  return ::Proto::ItemData_KnapType_descriptor();
}
template <> struct is_proto_enum< ::Proto::Gender> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Proto::Gender>() {
  return ::Proto::Gender_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_db_2eproto

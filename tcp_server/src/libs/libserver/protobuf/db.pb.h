// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: db.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_db_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_db_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_db_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_db_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_db_2eproto;
namespace Proto {
class AddItemToKnap;
class AddItemToKnapDefaultTypeInternal;
extern AddItemToKnapDefaultTypeInternal _AddItemToKnap_default_instance_;
class ItemData;
class ItemDataDefaultTypeInternal;
extern ItemDataDefaultTypeInternal _ItemData_default_instance_;
class LastWorld;
class LastWorldDefaultTypeInternal;
extern LastWorldDefaultTypeInternal _LastWorld_default_instance_;
class Player;
class PlayerDefaultTypeInternal;
extern PlayerDefaultTypeInternal _Player_default_instance_;
class PlayerBase;
class PlayerBaseDefaultTypeInternal;
extern PlayerBaseDefaultTypeInternal _PlayerBase_default_instance_;
class PlayerKnap;
class PlayerKnapDefaultTypeInternal;
extern PlayerKnapDefaultTypeInternal _PlayerKnap_default_instance_;
class PlayerMisc;
class PlayerMiscDefaultTypeInternal;
extern PlayerMiscDefaultTypeInternal _PlayerMisc_default_instance_;
class Vector3D;
class Vector3DDefaultTypeInternal;
extern Vector3DDefaultTypeInternal _Vector3D_default_instance_;
}  // namespace Proto
PROTOBUF_NAMESPACE_OPEN
template<> ::Proto::AddItemToKnap* Arena::CreateMaybeMessage<::Proto::AddItemToKnap>(Arena*);
template<> ::Proto::ItemData* Arena::CreateMaybeMessage<::Proto::ItemData>(Arena*);
template<> ::Proto::LastWorld* Arena::CreateMaybeMessage<::Proto::LastWorld>(Arena*);
template<> ::Proto::Player* Arena::CreateMaybeMessage<::Proto::Player>(Arena*);
template<> ::Proto::PlayerBase* Arena::CreateMaybeMessage<::Proto::PlayerBase>(Arena*);
template<> ::Proto::PlayerKnap* Arena::CreateMaybeMessage<::Proto::PlayerKnap>(Arena*);
template<> ::Proto::PlayerMisc* Arena::CreateMaybeMessage<::Proto::PlayerMisc>(Arena*);
template<> ::Proto::Vector3D* Arena::CreateMaybeMessage<::Proto::Vector3D>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Proto {

enum ItemData_ItemType : int {
  ItemData_ItemType_None = 0,
  ItemData_ItemType_Potion = 1,
  ItemData_ItemType_Weapon = 2,
  ItemData_ItemType_ItemData_ItemType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ItemData_ItemType_ItemData_ItemType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ItemData_ItemType_IsValid(int value);
constexpr ItemData_ItemType ItemData_ItemType_ItemType_MIN = ItemData_ItemType_None;
constexpr ItemData_ItemType ItemData_ItemType_ItemType_MAX = ItemData_ItemType_Weapon;
constexpr int ItemData_ItemType_ItemType_ARRAYSIZE = ItemData_ItemType_ItemType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ItemData_ItemType_descriptor();
template<typename T>
inline const std::string& ItemData_ItemType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ItemData_ItemType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ItemData_ItemType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ItemData_ItemType_descriptor(), enum_t_value);
}
inline bool ItemData_ItemType_Parse(
    const std::string& name, ItemData_ItemType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ItemData_ItemType>(
    ItemData_ItemType_descriptor(), name, value);
}
enum Gender : int {
  none = 0,
  male = 1,
  female = 2,
  Gender_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Gender_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Gender_IsValid(int value);
constexpr Gender Gender_MIN = none;
constexpr Gender Gender_MAX = female;
constexpr int Gender_ARRAYSIZE = Gender_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Gender_descriptor();
template<typename T>
inline const std::string& Gender_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Gender>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Gender_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Gender_descriptor(), enum_t_value);
}
inline bool Gender_Parse(
    const std::string& name, Gender* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Gender>(
    Gender_descriptor(), name, value);
}
// ===================================================================

class Vector3D :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.Vector3D) */ {
 public:
  Vector3D();
  virtual ~Vector3D();

  Vector3D(const Vector3D& from);
  Vector3D(Vector3D&& from) noexcept
    : Vector3D() {
    *this = ::std::move(from);
  }

  inline Vector3D& operator=(const Vector3D& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vector3D& operator=(Vector3D&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Vector3D& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Vector3D* internal_default_instance() {
    return reinterpret_cast<const Vector3D*>(
               &_Vector3D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Vector3D& a, Vector3D& b) {
    a.Swap(&b);
  }
  inline void Swap(Vector3D* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Vector3D* New() const final {
    return CreateMaybeMessage<Vector3D>(nullptr);
  }

  Vector3D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Vector3D>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Vector3D& from);
  void MergeFrom(const Vector3D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vector3D* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.Vector3D";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_db_2eproto);
    return ::descriptor_table_db_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);

  // @@protoc_insertion_point(class_scope:Proto.Vector3D)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float x_;
  float y_;
  float z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_db_2eproto;
};
// -------------------------------------------------------------------

class PlayerBase :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.PlayerBase) */ {
 public:
  PlayerBase();
  virtual ~PlayerBase();

  PlayerBase(const PlayerBase& from);
  PlayerBase(PlayerBase&& from) noexcept
    : PlayerBase() {
    *this = ::std::move(from);
  }

  inline PlayerBase& operator=(const PlayerBase& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerBase& operator=(PlayerBase&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlayerBase& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerBase* internal_default_instance() {
    return reinterpret_cast<const PlayerBase*>(
               &_PlayerBase_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PlayerBase& a, PlayerBase& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerBase* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlayerBase* New() const final {
    return CreateMaybeMessage<PlayerBase>(nullptr);
  }

  PlayerBase* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayerBase>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlayerBase& from);
  void MergeFrom(const PlayerBase& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerBase* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.PlayerBase";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_db_2eproto);
    return ::descriptor_table_db_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGenderFieldNumber = 1,
    kLevelFieldNumber = 2,
    kXpFieldNumber = 3,
    kHpFieldNumber = 4,
    kMpFieldNumber = 5,
    kAtkFieldNumber = 6,
    kDefFieldNumber = 7,
  };
  // .Proto.Gender gender = 1;
  void clear_gender();
  ::Proto::Gender gender() const;
  void set_gender(::Proto::Gender value);

  // int32 level = 2;
  void clear_level();
  ::PROTOBUF_NAMESPACE_ID::int32 level() const;
  void set_level(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 xp = 3;
  void clear_xp();
  ::PROTOBUF_NAMESPACE_ID::int32 xp() const;
  void set_xp(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 hp = 4;
  void clear_hp();
  ::PROTOBUF_NAMESPACE_ID::int32 hp() const;
  void set_hp(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 mp = 5;
  void clear_mp();
  ::PROTOBUF_NAMESPACE_ID::int32 mp() const;
  void set_mp(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 atk = 6;
  void clear_atk();
  ::PROTOBUF_NAMESPACE_ID::int32 atk() const;
  void set_atk(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 def = 7;
  void clear_def();
  ::PROTOBUF_NAMESPACE_ID::int32 def() const;
  void set_def(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Proto.PlayerBase)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int gender_;
  ::PROTOBUF_NAMESPACE_ID::int32 level_;
  ::PROTOBUF_NAMESPACE_ID::int32 xp_;
  ::PROTOBUF_NAMESPACE_ID::int32 hp_;
  ::PROTOBUF_NAMESPACE_ID::int32 mp_;
  ::PROTOBUF_NAMESPACE_ID::int32 atk_;
  ::PROTOBUF_NAMESPACE_ID::int32 def_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_db_2eproto;
};
// -------------------------------------------------------------------

class LastWorld :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.LastWorld) */ {
 public:
  LastWorld();
  virtual ~LastWorld();

  LastWorld(const LastWorld& from);
  LastWorld(LastWorld&& from) noexcept
    : LastWorld() {
    *this = ::std::move(from);
  }

  inline LastWorld& operator=(const LastWorld& from) {
    CopyFrom(from);
    return *this;
  }
  inline LastWorld& operator=(LastWorld&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LastWorld& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LastWorld* internal_default_instance() {
    return reinterpret_cast<const LastWorld*>(
               &_LastWorld_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(LastWorld& a, LastWorld& b) {
    a.Swap(&b);
  }
  inline void Swap(LastWorld* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LastWorld* New() const final {
    return CreateMaybeMessage<LastWorld>(nullptr);
  }

  LastWorld* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LastWorld>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LastWorld& from);
  void MergeFrom(const LastWorld& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LastWorld* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.LastWorld";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_db_2eproto);
    return ::descriptor_table_db_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 3,
    kWorldSnFieldNumber = 2,
    kWorldIdFieldNumber = 1,
  };
  // .Proto.Vector3D position = 3;
  bool has_position() const;
  void clear_position();
  const ::Proto::Vector3D& position() const;
  ::Proto::Vector3D* release_position();
  ::Proto::Vector3D* mutable_position();
  void set_allocated_position(::Proto::Vector3D* position);

  // int64 world_sn = 2;
  void clear_world_sn();
  ::PROTOBUF_NAMESPACE_ID::int64 world_sn() const;
  void set_world_sn(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int32 world_id = 1;
  void clear_world_id();
  ::PROTOBUF_NAMESPACE_ID::int32 world_id() const;
  void set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Proto.LastWorld)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::Proto::Vector3D* position_;
  ::PROTOBUF_NAMESPACE_ID::int64 world_sn_;
  ::PROTOBUF_NAMESPACE_ID::int32 world_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_db_2eproto;
};
// -------------------------------------------------------------------

class PlayerMisc :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.PlayerMisc) */ {
 public:
  PlayerMisc();
  virtual ~PlayerMisc();

  PlayerMisc(const PlayerMisc& from);
  PlayerMisc(PlayerMisc&& from) noexcept
    : PlayerMisc() {
    *this = ::std::move(from);
  }

  inline PlayerMisc& operator=(const PlayerMisc& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerMisc& operator=(PlayerMisc&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlayerMisc& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerMisc* internal_default_instance() {
    return reinterpret_cast<const PlayerMisc*>(
               &_PlayerMisc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PlayerMisc& a, PlayerMisc& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerMisc* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlayerMisc* New() const final {
    return CreateMaybeMessage<PlayerMisc>(nullptr);
  }

  PlayerMisc* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayerMisc>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlayerMisc& from);
  void MergeFrom(const PlayerMisc& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerMisc* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.PlayerMisc";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_db_2eproto);
    return ::descriptor_table_db_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLastWorldFieldNumber = 1,
    kLastDungeonFieldNumber = 2,
    kOnlineVersionFieldNumber = 3,
  };
  // .Proto.LastWorld last_world = 1;
  bool has_last_world() const;
  void clear_last_world();
  const ::Proto::LastWorld& last_world() const;
  ::Proto::LastWorld* release_last_world();
  ::Proto::LastWorld* mutable_last_world();
  void set_allocated_last_world(::Proto::LastWorld* last_world);

  // .Proto.LastWorld last_dungeon = 2;
  bool has_last_dungeon() const;
  void clear_last_dungeon();
  const ::Proto::LastWorld& last_dungeon() const;
  ::Proto::LastWorld* release_last_dungeon();
  ::Proto::LastWorld* mutable_last_dungeon();
  void set_allocated_last_dungeon(::Proto::LastWorld* last_dungeon);

  // int32 online_version = 3;
  void clear_online_version();
  ::PROTOBUF_NAMESPACE_ID::int32 online_version() const;
  void set_online_version(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Proto.PlayerMisc)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::Proto::LastWorld* last_world_;
  ::Proto::LastWorld* last_dungeon_;
  ::PROTOBUF_NAMESPACE_ID::int32 online_version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_db_2eproto;
};
// -------------------------------------------------------------------

class Player :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.Player) */ {
 public:
  Player();
  virtual ~Player();

  Player(const Player& from);
  Player(Player&& from) noexcept
    : Player() {
    *this = ::std::move(from);
  }

  inline Player& operator=(const Player& from) {
    CopyFrom(from);
    return *this;
  }
  inline Player& operator=(Player&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Player& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Player* internal_default_instance() {
    return reinterpret_cast<const Player*>(
               &_Player_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Player& a, Player& b) {
    a.Swap(&b);
  }
  inline void Swap(Player* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Player* New() const final {
    return CreateMaybeMessage<Player>(nullptr);
  }

  Player* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Player>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Player& from);
  void MergeFrom(const Player& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Player* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.Player";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_db_2eproto);
    return ::descriptor_table_db_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kBaseFieldNumber = 3,
    kKnapFieldNumber = 4,
    kMiscFieldNumber = 5,
    kSnFieldNumber = 1,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // .Proto.PlayerBase base = 3;
  bool has_base() const;
  void clear_base();
  const ::Proto::PlayerBase& base() const;
  ::Proto::PlayerBase* release_base();
  ::Proto::PlayerBase* mutable_base();
  void set_allocated_base(::Proto::PlayerBase* base);

  // .Proto.PlayerKnap knap = 4;
  bool has_knap() const;
  void clear_knap();
  const ::Proto::PlayerKnap& knap() const;
  ::Proto::PlayerKnap* release_knap();
  ::Proto::PlayerKnap* mutable_knap();
  void set_allocated_knap(::Proto::PlayerKnap* knap);

  // .Proto.PlayerMisc misc = 5;
  bool has_misc() const;
  void clear_misc();
  const ::Proto::PlayerMisc& misc() const;
  ::Proto::PlayerMisc* release_misc();
  ::Proto::PlayerMisc* mutable_misc();
  void set_allocated_misc(::Proto::PlayerMisc* misc);

  // uint64 sn = 1;
  void clear_sn();
  ::PROTOBUF_NAMESPACE_ID::uint64 sn() const;
  void set_sn(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:Proto.Player)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::Proto::PlayerBase* base_;
  ::Proto::PlayerKnap* knap_;
  ::Proto::PlayerMisc* misc_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sn_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_db_2eproto;
};
// -------------------------------------------------------------------

class ItemData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.ItemData) */ {
 public:
  ItemData();
  virtual ~ItemData();

  ItemData(const ItemData& from);
  ItemData(ItemData&& from) noexcept
    : ItemData() {
    *this = ::std::move(from);
  }

  inline ItemData& operator=(const ItemData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ItemData& operator=(ItemData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ItemData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ItemData* internal_default_instance() {
    return reinterpret_cast<const ItemData*>(
               &_ItemData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ItemData& a, ItemData& b) {
    a.Swap(&b);
  }
  inline void Swap(ItemData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ItemData* New() const final {
    return CreateMaybeMessage<ItemData>(nullptr);
  }

  ItemData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ItemData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ItemData& from);
  void MergeFrom(const ItemData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ItemData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.ItemData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_db_2eproto);
    return ::descriptor_table_db_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ItemData_ItemType ItemType;
  static constexpr ItemType None =
    ItemData_ItemType_None;
  static constexpr ItemType Potion =
    ItemData_ItemType_Potion;
  static constexpr ItemType Weapon =
    ItemData_ItemType_Weapon;
  static inline bool ItemType_IsValid(int value) {
    return ItemData_ItemType_IsValid(value);
  }
  static constexpr ItemType ItemType_MIN =
    ItemData_ItemType_ItemType_MIN;
  static constexpr ItemType ItemType_MAX =
    ItemData_ItemType_ItemType_MAX;
  static constexpr int ItemType_ARRAYSIZE =
    ItemData_ItemType_ItemType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ItemType_descriptor() {
    return ItemData_ItemType_descriptor();
  }
  template<typename T>
  static inline const std::string& ItemType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ItemType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ItemType_Name.");
    return ItemData_ItemType_Name(enum_t_value);
  }
  static inline bool ItemType_Parse(const std::string& name,
      ItemType* value) {
    return ItemData_ItemType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kIdFieldNumber = 2,
    kNumFieldNumber = 3,
    kIndexFieldNumber = 4,
    kHashFieldNumber = 5,
  };
  // .Proto.ItemData.ItemType type = 1;
  void clear_type();
  ::Proto::ItemData_ItemType type() const;
  void set_type(::Proto::ItemData_ItemType value);

  // int32 id = 2;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 num = 3;
  void clear_num();
  ::PROTOBUF_NAMESPACE_ID::int32 num() const;
  void set_num(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 index = 4;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::int32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 hash = 5;
  void clear_hash();
  ::PROTOBUF_NAMESPACE_ID::int32 hash() const;
  void set_hash(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Proto.ItemData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int type_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_;
  ::PROTOBUF_NAMESPACE_ID::int32 index_;
  ::PROTOBUF_NAMESPACE_ID::int32 hash_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_db_2eproto;
};
// -------------------------------------------------------------------

class PlayerKnap :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.PlayerKnap) */ {
 public:
  PlayerKnap();
  virtual ~PlayerKnap();

  PlayerKnap(const PlayerKnap& from);
  PlayerKnap(PlayerKnap&& from) noexcept
    : PlayerKnap() {
    *this = ::std::move(from);
  }

  inline PlayerKnap& operator=(const PlayerKnap& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerKnap& operator=(PlayerKnap&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlayerKnap& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerKnap* internal_default_instance() {
    return reinterpret_cast<const PlayerKnap*>(
               &_PlayerKnap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(PlayerKnap& a, PlayerKnap& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerKnap* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlayerKnap* New() const final {
    return CreateMaybeMessage<PlayerKnap>(nullptr);
  }

  PlayerKnap* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayerKnap>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlayerKnap& from);
  void MergeFrom(const PlayerKnap& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerKnap* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.PlayerKnap";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_db_2eproto);
    return ::descriptor_table_db_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsInBagFieldNumber = 2,
    kItemsInActFieldNumber = 3,
    kItemsInEquFieldNumber = 4,
    kGoldFieldNumber = 1,
  };
  // repeated .Proto.ItemData itemsInBag = 2;
  int itemsinbag_size() const;
  void clear_itemsinbag();
  ::Proto::ItemData* mutable_itemsinbag(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::ItemData >*
      mutable_itemsinbag();
  const ::Proto::ItemData& itemsinbag(int index) const;
  ::Proto::ItemData* add_itemsinbag();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::ItemData >&
      itemsinbag() const;

  // repeated .Proto.ItemData itemsInAct = 3;
  int itemsinact_size() const;
  void clear_itemsinact();
  ::Proto::ItemData* mutable_itemsinact(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::ItemData >*
      mutable_itemsinact();
  const ::Proto::ItemData& itemsinact(int index) const;
  ::Proto::ItemData* add_itemsinact();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::ItemData >&
      itemsinact() const;

  // repeated .Proto.ItemData itemsInEqu = 4;
  int itemsinequ_size() const;
  void clear_itemsinequ();
  ::Proto::ItemData* mutable_itemsinequ(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::ItemData >*
      mutable_itemsinequ();
  const ::Proto::ItemData& itemsinequ(int index) const;
  ::Proto::ItemData* add_itemsinequ();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::ItemData >&
      itemsinequ() const;

  // int32 gold = 1;
  void clear_gold();
  ::PROTOBUF_NAMESPACE_ID::int32 gold() const;
  void set_gold(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Proto.PlayerKnap)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::ItemData > itemsinbag_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::ItemData > itemsinact_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::ItemData > itemsinequ_;
  ::PROTOBUF_NAMESPACE_ID::int32 gold_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_db_2eproto;
};
// -------------------------------------------------------------------

class AddItemToKnap :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.AddItemToKnap) */ {
 public:
  AddItemToKnap();
  virtual ~AddItemToKnap();

  AddItemToKnap(const AddItemToKnap& from);
  AddItemToKnap(AddItemToKnap&& from) noexcept
    : AddItemToKnap() {
    *this = ::std::move(from);
  }

  inline AddItemToKnap& operator=(const AddItemToKnap& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddItemToKnap& operator=(AddItemToKnap&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddItemToKnap& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddItemToKnap* internal_default_instance() {
    return reinterpret_cast<const AddItemToKnap*>(
               &_AddItemToKnap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(AddItemToKnap& a, AddItemToKnap& b) {
    a.Swap(&b);
  }
  inline void Swap(AddItemToKnap* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddItemToKnap* New() const final {
    return CreateMaybeMessage<AddItemToKnap>(nullptr);
  }

  AddItemToKnap* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddItemToKnap>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddItemToKnap& from);
  void MergeFrom(const AddItemToKnap& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddItemToKnap* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.AddItemToKnap";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_db_2eproto);
    return ::descriptor_table_db_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemFieldNumber = 1,
  };
  // .Proto.ItemData item = 1;
  bool has_item() const;
  void clear_item();
  const ::Proto::ItemData& item() const;
  ::Proto::ItemData* release_item();
  ::Proto::ItemData* mutable_item();
  void set_allocated_item(::Proto::ItemData* item);

  // @@protoc_insertion_point(class_scope:Proto.AddItemToKnap)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::Proto::ItemData* item_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_db_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Vector3D

// float x = 1;
inline void Vector3D::clear_x() {
  x_ = 0;
}
inline float Vector3D::x() const {
  // @@protoc_insertion_point(field_get:Proto.Vector3D.x)
  return x_;
}
inline void Vector3D::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:Proto.Vector3D.x)
}

// float y = 2;
inline void Vector3D::clear_y() {
  y_ = 0;
}
inline float Vector3D::y() const {
  // @@protoc_insertion_point(field_get:Proto.Vector3D.y)
  return y_;
}
inline void Vector3D::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:Proto.Vector3D.y)
}

// float z = 3;
inline void Vector3D::clear_z() {
  z_ = 0;
}
inline float Vector3D::z() const {
  // @@protoc_insertion_point(field_get:Proto.Vector3D.z)
  return z_;
}
inline void Vector3D::set_z(float value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:Proto.Vector3D.z)
}

// -------------------------------------------------------------------

// PlayerBase

// .Proto.Gender gender = 1;
inline void PlayerBase::clear_gender() {
  gender_ = 0;
}
inline ::Proto::Gender PlayerBase::gender() const {
  // @@protoc_insertion_point(field_get:Proto.PlayerBase.gender)
  return static_cast< ::Proto::Gender >(gender_);
}
inline void PlayerBase::set_gender(::Proto::Gender value) {
  
  gender_ = value;
  // @@protoc_insertion_point(field_set:Proto.PlayerBase.gender)
}

// int32 level = 2;
inline void PlayerBase::clear_level() {
  level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerBase::level() const {
  // @@protoc_insertion_point(field_get:Proto.PlayerBase.level)
  return level_;
}
inline void PlayerBase::set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:Proto.PlayerBase.level)
}

// int32 xp = 3;
inline void PlayerBase::clear_xp() {
  xp_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerBase::xp() const {
  // @@protoc_insertion_point(field_get:Proto.PlayerBase.xp)
  return xp_;
}
inline void PlayerBase::set_xp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xp_ = value;
  // @@protoc_insertion_point(field_set:Proto.PlayerBase.xp)
}

// int32 hp = 4;
inline void PlayerBase::clear_hp() {
  hp_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerBase::hp() const {
  // @@protoc_insertion_point(field_get:Proto.PlayerBase.hp)
  return hp_;
}
inline void PlayerBase::set_hp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  hp_ = value;
  // @@protoc_insertion_point(field_set:Proto.PlayerBase.hp)
}

// int32 mp = 5;
inline void PlayerBase::clear_mp() {
  mp_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerBase::mp() const {
  // @@protoc_insertion_point(field_get:Proto.PlayerBase.mp)
  return mp_;
}
inline void PlayerBase::set_mp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mp_ = value;
  // @@protoc_insertion_point(field_set:Proto.PlayerBase.mp)
}

// int32 atk = 6;
inline void PlayerBase::clear_atk() {
  atk_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerBase::atk() const {
  // @@protoc_insertion_point(field_get:Proto.PlayerBase.atk)
  return atk_;
}
inline void PlayerBase::set_atk(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  atk_ = value;
  // @@protoc_insertion_point(field_set:Proto.PlayerBase.atk)
}

// int32 def = 7;
inline void PlayerBase::clear_def() {
  def_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerBase::def() const {
  // @@protoc_insertion_point(field_get:Proto.PlayerBase.def)
  return def_;
}
inline void PlayerBase::set_def(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  def_ = value;
  // @@protoc_insertion_point(field_set:Proto.PlayerBase.def)
}

// -------------------------------------------------------------------

// LastWorld

// int32 world_id = 1;
inline void LastWorld::clear_world_id() {
  world_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LastWorld::world_id() const {
  // @@protoc_insertion_point(field_get:Proto.LastWorld.world_id)
  return world_id_;
}
inline void LastWorld::set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  world_id_ = value;
  // @@protoc_insertion_point(field_set:Proto.LastWorld.world_id)
}

// int64 world_sn = 2;
inline void LastWorld::clear_world_sn() {
  world_sn_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LastWorld::world_sn() const {
  // @@protoc_insertion_point(field_get:Proto.LastWorld.world_sn)
  return world_sn_;
}
inline void LastWorld::set_world_sn(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  world_sn_ = value;
  // @@protoc_insertion_point(field_set:Proto.LastWorld.world_sn)
}

// .Proto.Vector3D position = 3;
inline bool LastWorld::has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline void LastWorld::clear_position() {
  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
inline const ::Proto::Vector3D& LastWorld::position() const {
  const ::Proto::Vector3D* p = position_;
  // @@protoc_insertion_point(field_get:Proto.LastWorld.position)
  return p != nullptr ? *p : *reinterpret_cast<const ::Proto::Vector3D*>(
      &::Proto::_Vector3D_default_instance_);
}
inline ::Proto::Vector3D* LastWorld::release_position() {
  // @@protoc_insertion_point(field_release:Proto.LastWorld.position)
  
  ::Proto::Vector3D* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::Proto::Vector3D* LastWorld::mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::Vector3D>(GetArenaNoVirtual());
    position_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Proto.LastWorld.position)
  return position_;
}
inline void LastWorld::set_allocated_position(::Proto::Vector3D* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:Proto.LastWorld.position)
}

// -------------------------------------------------------------------

// PlayerMisc

// .Proto.LastWorld last_world = 1;
inline bool PlayerMisc::has_last_world() const {
  return this != internal_default_instance() && last_world_ != nullptr;
}
inline void PlayerMisc::clear_last_world() {
  if (GetArenaNoVirtual() == nullptr && last_world_ != nullptr) {
    delete last_world_;
  }
  last_world_ = nullptr;
}
inline const ::Proto::LastWorld& PlayerMisc::last_world() const {
  const ::Proto::LastWorld* p = last_world_;
  // @@protoc_insertion_point(field_get:Proto.PlayerMisc.last_world)
  return p != nullptr ? *p : *reinterpret_cast<const ::Proto::LastWorld*>(
      &::Proto::_LastWorld_default_instance_);
}
inline ::Proto::LastWorld* PlayerMisc::release_last_world() {
  // @@protoc_insertion_point(field_release:Proto.PlayerMisc.last_world)
  
  ::Proto::LastWorld* temp = last_world_;
  last_world_ = nullptr;
  return temp;
}
inline ::Proto::LastWorld* PlayerMisc::mutable_last_world() {
  
  if (last_world_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::LastWorld>(GetArenaNoVirtual());
    last_world_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Proto.PlayerMisc.last_world)
  return last_world_;
}
inline void PlayerMisc::set_allocated_last_world(::Proto::LastWorld* last_world) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete last_world_;
  }
  if (last_world) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      last_world = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, last_world, submessage_arena);
    }
    
  } else {
    
  }
  last_world_ = last_world;
  // @@protoc_insertion_point(field_set_allocated:Proto.PlayerMisc.last_world)
}

// .Proto.LastWorld last_dungeon = 2;
inline bool PlayerMisc::has_last_dungeon() const {
  return this != internal_default_instance() && last_dungeon_ != nullptr;
}
inline void PlayerMisc::clear_last_dungeon() {
  if (GetArenaNoVirtual() == nullptr && last_dungeon_ != nullptr) {
    delete last_dungeon_;
  }
  last_dungeon_ = nullptr;
}
inline const ::Proto::LastWorld& PlayerMisc::last_dungeon() const {
  const ::Proto::LastWorld* p = last_dungeon_;
  // @@protoc_insertion_point(field_get:Proto.PlayerMisc.last_dungeon)
  return p != nullptr ? *p : *reinterpret_cast<const ::Proto::LastWorld*>(
      &::Proto::_LastWorld_default_instance_);
}
inline ::Proto::LastWorld* PlayerMisc::release_last_dungeon() {
  // @@protoc_insertion_point(field_release:Proto.PlayerMisc.last_dungeon)
  
  ::Proto::LastWorld* temp = last_dungeon_;
  last_dungeon_ = nullptr;
  return temp;
}
inline ::Proto::LastWorld* PlayerMisc::mutable_last_dungeon() {
  
  if (last_dungeon_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::LastWorld>(GetArenaNoVirtual());
    last_dungeon_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Proto.PlayerMisc.last_dungeon)
  return last_dungeon_;
}
inline void PlayerMisc::set_allocated_last_dungeon(::Proto::LastWorld* last_dungeon) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete last_dungeon_;
  }
  if (last_dungeon) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      last_dungeon = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, last_dungeon, submessage_arena);
    }
    
  } else {
    
  }
  last_dungeon_ = last_dungeon;
  // @@protoc_insertion_point(field_set_allocated:Proto.PlayerMisc.last_dungeon)
}

// int32 online_version = 3;
inline void PlayerMisc::clear_online_version() {
  online_version_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerMisc::online_version() const {
  // @@protoc_insertion_point(field_get:Proto.PlayerMisc.online_version)
  return online_version_;
}
inline void PlayerMisc::set_online_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  online_version_ = value;
  // @@protoc_insertion_point(field_set:Proto.PlayerMisc.online_version)
}

// -------------------------------------------------------------------

// Player

// uint64 sn = 1;
inline void Player::clear_sn() {
  sn_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Player::sn() const {
  // @@protoc_insertion_point(field_get:Proto.Player.sn)
  return sn_;
}
inline void Player::set_sn(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  sn_ = value;
  // @@protoc_insertion_point(field_set:Proto.Player.sn)
}

// string name = 2;
inline void Player::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Player::name() const {
  // @@protoc_insertion_point(field_get:Proto.Player.name)
  return name_.GetNoArena();
}
inline void Player::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Proto.Player.name)
}
inline void Player::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Proto.Player.name)
}
inline void Player::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proto.Player.name)
}
inline void Player::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proto.Player.name)
}
inline std::string* Player::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:Proto.Player.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Player::release_name() {
  // @@protoc_insertion_point(field_release:Proto.Player.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Player::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Proto.Player.name)
}

// .Proto.PlayerBase base = 3;
inline bool Player::has_base() const {
  return this != internal_default_instance() && base_ != nullptr;
}
inline void Player::clear_base() {
  if (GetArenaNoVirtual() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
inline const ::Proto::PlayerBase& Player::base() const {
  const ::Proto::PlayerBase* p = base_;
  // @@protoc_insertion_point(field_get:Proto.Player.base)
  return p != nullptr ? *p : *reinterpret_cast<const ::Proto::PlayerBase*>(
      &::Proto::_PlayerBase_default_instance_);
}
inline ::Proto::PlayerBase* Player::release_base() {
  // @@protoc_insertion_point(field_release:Proto.Player.base)
  
  ::Proto::PlayerBase* temp = base_;
  base_ = nullptr;
  return temp;
}
inline ::Proto::PlayerBase* Player::mutable_base() {
  
  if (base_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::PlayerBase>(GetArenaNoVirtual());
    base_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Proto.Player.base)
  return base_;
}
inline void Player::set_allocated_base(::Proto::PlayerBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete base_;
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:Proto.Player.base)
}

// .Proto.PlayerKnap knap = 4;
inline bool Player::has_knap() const {
  return this != internal_default_instance() && knap_ != nullptr;
}
inline void Player::clear_knap() {
  if (GetArenaNoVirtual() == nullptr && knap_ != nullptr) {
    delete knap_;
  }
  knap_ = nullptr;
}
inline const ::Proto::PlayerKnap& Player::knap() const {
  const ::Proto::PlayerKnap* p = knap_;
  // @@protoc_insertion_point(field_get:Proto.Player.knap)
  return p != nullptr ? *p : *reinterpret_cast<const ::Proto::PlayerKnap*>(
      &::Proto::_PlayerKnap_default_instance_);
}
inline ::Proto::PlayerKnap* Player::release_knap() {
  // @@protoc_insertion_point(field_release:Proto.Player.knap)
  
  ::Proto::PlayerKnap* temp = knap_;
  knap_ = nullptr;
  return temp;
}
inline ::Proto::PlayerKnap* Player::mutable_knap() {
  
  if (knap_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::PlayerKnap>(GetArenaNoVirtual());
    knap_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Proto.Player.knap)
  return knap_;
}
inline void Player::set_allocated_knap(::Proto::PlayerKnap* knap) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete knap_;
  }
  if (knap) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      knap = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, knap, submessage_arena);
    }
    
  } else {
    
  }
  knap_ = knap;
  // @@protoc_insertion_point(field_set_allocated:Proto.Player.knap)
}

// .Proto.PlayerMisc misc = 5;
inline bool Player::has_misc() const {
  return this != internal_default_instance() && misc_ != nullptr;
}
inline void Player::clear_misc() {
  if (GetArenaNoVirtual() == nullptr && misc_ != nullptr) {
    delete misc_;
  }
  misc_ = nullptr;
}
inline const ::Proto::PlayerMisc& Player::misc() const {
  const ::Proto::PlayerMisc* p = misc_;
  // @@protoc_insertion_point(field_get:Proto.Player.misc)
  return p != nullptr ? *p : *reinterpret_cast<const ::Proto::PlayerMisc*>(
      &::Proto::_PlayerMisc_default_instance_);
}
inline ::Proto::PlayerMisc* Player::release_misc() {
  // @@protoc_insertion_point(field_release:Proto.Player.misc)
  
  ::Proto::PlayerMisc* temp = misc_;
  misc_ = nullptr;
  return temp;
}
inline ::Proto::PlayerMisc* Player::mutable_misc() {
  
  if (misc_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::PlayerMisc>(GetArenaNoVirtual());
    misc_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Proto.Player.misc)
  return misc_;
}
inline void Player::set_allocated_misc(::Proto::PlayerMisc* misc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete misc_;
  }
  if (misc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      misc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, misc, submessage_arena);
    }
    
  } else {
    
  }
  misc_ = misc;
  // @@protoc_insertion_point(field_set_allocated:Proto.Player.misc)
}

// -------------------------------------------------------------------

// ItemData

// .Proto.ItemData.ItemType type = 1;
inline void ItemData::clear_type() {
  type_ = 0;
}
inline ::Proto::ItemData_ItemType ItemData::type() const {
  // @@protoc_insertion_point(field_get:Proto.ItemData.type)
  return static_cast< ::Proto::ItemData_ItemType >(type_);
}
inline void ItemData::set_type(::Proto::ItemData_ItemType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:Proto.ItemData.type)
}

// int32 id = 2;
inline void ItemData::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ItemData::id() const {
  // @@protoc_insertion_point(field_get:Proto.ItemData.id)
  return id_;
}
inline void ItemData::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:Proto.ItemData.id)
}

// int32 num = 3;
inline void ItemData::clear_num() {
  num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ItemData::num() const {
  // @@protoc_insertion_point(field_get:Proto.ItemData.num)
  return num_;
}
inline void ItemData::set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_ = value;
  // @@protoc_insertion_point(field_set:Proto.ItemData.num)
}

// int32 index = 4;
inline void ItemData::clear_index() {
  index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ItemData::index() const {
  // @@protoc_insertion_point(field_get:Proto.ItemData.index)
  return index_;
}
inline void ItemData::set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:Proto.ItemData.index)
}

// int32 hash = 5;
inline void ItemData::clear_hash() {
  hash_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ItemData::hash() const {
  // @@protoc_insertion_point(field_get:Proto.ItemData.hash)
  return hash_;
}
inline void ItemData::set_hash(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  hash_ = value;
  // @@protoc_insertion_point(field_set:Proto.ItemData.hash)
}

// -------------------------------------------------------------------

// PlayerKnap

// int32 gold = 1;
inline void PlayerKnap::clear_gold() {
  gold_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerKnap::gold() const {
  // @@protoc_insertion_point(field_get:Proto.PlayerKnap.gold)
  return gold_;
}
inline void PlayerKnap::set_gold(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gold_ = value;
  // @@protoc_insertion_point(field_set:Proto.PlayerKnap.gold)
}

// repeated .Proto.ItemData itemsInBag = 2;
inline int PlayerKnap::itemsinbag_size() const {
  return itemsinbag_.size();
}
inline void PlayerKnap::clear_itemsinbag() {
  itemsinbag_.Clear();
}
inline ::Proto::ItemData* PlayerKnap::mutable_itemsinbag(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.PlayerKnap.itemsInBag)
  return itemsinbag_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::ItemData >*
PlayerKnap::mutable_itemsinbag() {
  // @@protoc_insertion_point(field_mutable_list:Proto.PlayerKnap.itemsInBag)
  return &itemsinbag_;
}
inline const ::Proto::ItemData& PlayerKnap::itemsinbag(int index) const {
  // @@protoc_insertion_point(field_get:Proto.PlayerKnap.itemsInBag)
  return itemsinbag_.Get(index);
}
inline ::Proto::ItemData* PlayerKnap::add_itemsinbag() {
  // @@protoc_insertion_point(field_add:Proto.PlayerKnap.itemsInBag)
  return itemsinbag_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::ItemData >&
PlayerKnap::itemsinbag() const {
  // @@protoc_insertion_point(field_list:Proto.PlayerKnap.itemsInBag)
  return itemsinbag_;
}

// repeated .Proto.ItemData itemsInAct = 3;
inline int PlayerKnap::itemsinact_size() const {
  return itemsinact_.size();
}
inline void PlayerKnap::clear_itemsinact() {
  itemsinact_.Clear();
}
inline ::Proto::ItemData* PlayerKnap::mutable_itemsinact(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.PlayerKnap.itemsInAct)
  return itemsinact_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::ItemData >*
PlayerKnap::mutable_itemsinact() {
  // @@protoc_insertion_point(field_mutable_list:Proto.PlayerKnap.itemsInAct)
  return &itemsinact_;
}
inline const ::Proto::ItemData& PlayerKnap::itemsinact(int index) const {
  // @@protoc_insertion_point(field_get:Proto.PlayerKnap.itemsInAct)
  return itemsinact_.Get(index);
}
inline ::Proto::ItemData* PlayerKnap::add_itemsinact() {
  // @@protoc_insertion_point(field_add:Proto.PlayerKnap.itemsInAct)
  return itemsinact_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::ItemData >&
PlayerKnap::itemsinact() const {
  // @@protoc_insertion_point(field_list:Proto.PlayerKnap.itemsInAct)
  return itemsinact_;
}

// repeated .Proto.ItemData itemsInEqu = 4;
inline int PlayerKnap::itemsinequ_size() const {
  return itemsinequ_.size();
}
inline void PlayerKnap::clear_itemsinequ() {
  itemsinequ_.Clear();
}
inline ::Proto::ItemData* PlayerKnap::mutable_itemsinequ(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.PlayerKnap.itemsInEqu)
  return itemsinequ_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::ItemData >*
PlayerKnap::mutable_itemsinequ() {
  // @@protoc_insertion_point(field_mutable_list:Proto.PlayerKnap.itemsInEqu)
  return &itemsinequ_;
}
inline const ::Proto::ItemData& PlayerKnap::itemsinequ(int index) const {
  // @@protoc_insertion_point(field_get:Proto.PlayerKnap.itemsInEqu)
  return itemsinequ_.Get(index);
}
inline ::Proto::ItemData* PlayerKnap::add_itemsinequ() {
  // @@protoc_insertion_point(field_add:Proto.PlayerKnap.itemsInEqu)
  return itemsinequ_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::ItemData >&
PlayerKnap::itemsinequ() const {
  // @@protoc_insertion_point(field_list:Proto.PlayerKnap.itemsInEqu)
  return itemsinequ_;
}

// -------------------------------------------------------------------

// AddItemToKnap

// .Proto.ItemData item = 1;
inline bool AddItemToKnap::has_item() const {
  return this != internal_default_instance() && item_ != nullptr;
}
inline void AddItemToKnap::clear_item() {
  if (GetArenaNoVirtual() == nullptr && item_ != nullptr) {
    delete item_;
  }
  item_ = nullptr;
}
inline const ::Proto::ItemData& AddItemToKnap::item() const {
  const ::Proto::ItemData* p = item_;
  // @@protoc_insertion_point(field_get:Proto.AddItemToKnap.item)
  return p != nullptr ? *p : *reinterpret_cast<const ::Proto::ItemData*>(
      &::Proto::_ItemData_default_instance_);
}
inline ::Proto::ItemData* AddItemToKnap::release_item() {
  // @@protoc_insertion_point(field_release:Proto.AddItemToKnap.item)
  
  ::Proto::ItemData* temp = item_;
  item_ = nullptr;
  return temp;
}
inline ::Proto::ItemData* AddItemToKnap::mutable_item() {
  
  if (item_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::ItemData>(GetArenaNoVirtual());
    item_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Proto.AddItemToKnap.item)
  return item_;
}
inline void AddItemToKnap::set_allocated_item(::Proto::ItemData* item) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete item_;
  }
  if (item) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      item = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, item, submessage_arena);
    }
    
  } else {
    
  }
  item_ = item;
  // @@protoc_insertion_point(field_set_allocated:Proto.AddItemToKnap.item)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Proto

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Proto::ItemData_ItemType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Proto::ItemData_ItemType>() {
  return ::Proto::ItemData_ItemType_descriptor();
}
template <> struct is_proto_enum< ::Proto::Gender> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Proto::Gender>() {
  return ::Proto::Gender_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_db_2eproto

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_msg_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_msg_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "db.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_msg_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_msg_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[74]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_msg_2eproto;
namespace Proto {
class AccountCheck;
class AccountCheckDefaultTypeInternal;
extern AccountCheckDefaultTypeInternal _AccountCheck_default_instance_;
class AccountCheckRs;
class AccountCheckRsDefaultTypeInternal;
extern AccountCheckRsDefaultTypeInternal _AccountCheckRs_default_instance_;
class AccountDeleteOnlineToRedis;
class AccountDeleteOnlineToRedisDefaultTypeInternal;
extern AccountDeleteOnlineToRedisDefaultTypeInternal _AccountDeleteOnlineToRedis_default_instance_;
class AccountQueryOnlineToRedis;
class AccountQueryOnlineToRedisDefaultTypeInternal;
extern AccountQueryOnlineToRedisDefaultTypeInternal _AccountQueryOnlineToRedis_default_instance_;
class AccountQueryOnlineToRedisRs;
class AccountQueryOnlineToRedisRsDefaultTypeInternal;
extern AccountQueryOnlineToRedisRsDefaultTypeInternal _AccountQueryOnlineToRedisRs_default_instance_;
class AccountSyncOnlineToRedis;
class AccountSyncOnlineToRedisDefaultTypeInternal;
extern AccountSyncOnlineToRedisDefaultTypeInternal _AccountSyncOnlineToRedis_default_instance_;
class AllRoleAppear;
class AllRoleAppearDefaultTypeInternal;
extern AllRoleAppearDefaultTypeInternal _AllRoleAppear_default_instance_;
class AppInfoListSync;
class AppInfoListSyncDefaultTypeInternal;
extern AppInfoListSyncDefaultTypeInternal _AppInfoListSync_default_instance_;
class AppInfoSync;
class AppInfoSyncDefaultTypeInternal;
extern AppInfoSyncDefaultTypeInternal _AppInfoSync_default_instance_;
class AppRegister;
class AppRegisterDefaultTypeInternal;
extern AppRegisterDefaultTypeInternal _AppRegister_default_instance_;
class BroadcastCreateWorld;
class BroadcastCreateWorldDefaultTypeInternal;
extern BroadcastCreateWorldDefaultTypeInternal _BroadcastCreateWorld_default_instance_;
class BroadcastCreateWorldProxy;
class BroadcastCreateWorldProxyDefaultTypeInternal;
extern BroadcastCreateWorldProxyDefaultTypeInternal _BroadcastCreateWorldProxy_default_instance_;
class CmdApp;
class CmdAppDefaultTypeInternal;
extern CmdAppDefaultTypeInternal _CmdApp_default_instance_;
class CmdThread;
class CmdThreadDefaultTypeInternal;
extern CmdThreadDefaultTypeInternal _CmdThread_default_instance_;
class CreateComponent;
class CreateComponentDefaultTypeInternal;
extern CreateComponentDefaultTypeInternal _CreateComponent_default_instance_;
class CreateComponentParam;
class CreateComponentParamDefaultTypeInternal;
extern CreateComponentParamDefaultTypeInternal _CreateComponentParam_default_instance_;
class CreatePlayer;
class CreatePlayerDefaultTypeInternal;
extern CreatePlayerDefaultTypeInternal _CreatePlayer_default_instance_;
class CreatePlayerRs;
class CreatePlayerRsDefaultTypeInternal;
extern CreatePlayerRsDefaultTypeInternal _CreatePlayerRs_default_instance_;
class CreatePlayerToDB;
class CreatePlayerToDBDefaultTypeInternal;
extern CreatePlayerToDBDefaultTypeInternal _CreatePlayerToDB_default_instance_;
class CreatePlayerToDBRs;
class CreatePlayerToDBRsDefaultTypeInternal;
extern CreatePlayerToDBRsDefaultTypeInternal _CreatePlayerToDBRs_default_instance_;
class CreateSystem;
class CreateSystemDefaultTypeInternal;
extern CreateSystemDefaultTypeInternal _CreateSystem_default_instance_;
class CreateWorld;
class CreateWorldDefaultTypeInternal;
extern CreateWorldDefaultTypeInternal _CreateWorld_default_instance_;
class DropItemList;
class DropItemListDefaultTypeInternal;
extern DropItemListDefaultTypeInternal _DropItemList_default_instance_;
class Efficiency;
class EfficiencyDefaultTypeInternal;
extern EfficiencyDefaultTypeInternal _Efficiency_default_instance_;
class EnterWorld;
class EnterWorldDefaultTypeInternal;
extern EnterWorldDefaultTypeInternal _EnterWorld_default_instance_;
class GameToken;
class GameTokenDefaultTypeInternal;
extern GameTokenDefaultTypeInternal _GameToken_default_instance_;
class GameTokenToRedis;
class GameTokenToRedisDefaultTypeInternal;
extern GameTokenToRedisDefaultTypeInternal _GameTokenToRedis_default_instance_;
class GameTokenToRedisRs;
class GameTokenToRedisRsDefaultTypeInternal;
extern GameTokenToRedisRsDefaultTypeInternal _GameTokenToRedisRs_default_instance_;
class Http;
class HttpDefaultTypeInternal;
extern HttpDefaultTypeInternal _Http_default_instance_;
class LoginByToken;
class LoginByTokenDefaultTypeInternal;
extern LoginByTokenDefaultTypeInternal _LoginByToken_default_instance_;
class LoginByTokenRs;
class LoginByTokenRsDefaultTypeInternal;
extern LoginByTokenRsDefaultTypeInternal _LoginByTokenRs_default_instance_;
class LoginTokenToRedis;
class LoginTokenToRedisDefaultTypeInternal;
extern LoginTokenToRedisDefaultTypeInternal _LoginTokenToRedis_default_instance_;
class LoginTokenToRedisRs;
class LoginTokenToRedisRsDefaultTypeInternal;
extern LoginTokenToRedisRsDefaultTypeInternal _LoginTokenToRedisRs_default_instance_;
class Move;
class MoveDefaultTypeInternal;
extern MoveDefaultTypeInternal _Move_default_instance_;
class NetworkConnect;
class NetworkConnectDefaultTypeInternal;
extern NetworkConnectDefaultTypeInternal _NetworkConnect_default_instance_;
class NetworkDisconnect;
class NetworkDisconnectDefaultTypeInternal;
extern NetworkDisconnectDefaultTypeInternal _NetworkDisconnect_default_instance_;
class NpcAtkEvent;
class NpcAtkEventDefaultTypeInternal;
extern NpcAtkEventDefaultTypeInternal _NpcAtkEvent_default_instance_;
class PlayerAtkEvent;
class PlayerAtkEventDefaultTypeInternal;
extern PlayerAtkEventDefaultTypeInternal _PlayerAtkEvent_default_instance_;
class PlayerDeleteOnlineToRedis;
class PlayerDeleteOnlineToRedisDefaultTypeInternal;
extern PlayerDeleteOnlineToRedisDefaultTypeInternal _PlayerDeleteOnlineToRedis_default_instance_;
class PlayerList;
class PlayerListDefaultTypeInternal;
extern PlayerListDefaultTypeInternal _PlayerList_default_instance_;
class PlayerLittle;
class PlayerLittleDefaultTypeInternal;
extern PlayerLittleDefaultTypeInternal _PlayerLittle_default_instance_;
class PlayerSyncOnlineToRedis;
class PlayerSyncOnlineToRedisDefaultTypeInternal;
extern PlayerSyncOnlineToRedisDefaultTypeInternal _PlayerSyncOnlineToRedis_default_instance_;
class QueryPlayer;
class QueryPlayerDefaultTypeInternal;
extern QueryPlayerDefaultTypeInternal _QueryPlayer_default_instance_;
class QueryPlayerList;
class QueryPlayerListDefaultTypeInternal;
extern QueryPlayerListDefaultTypeInternal _QueryPlayerList_default_instance_;
class QueryPlayerRs;
class QueryPlayerRsDefaultTypeInternal;
extern QueryPlayerRsDefaultTypeInternal _QueryPlayerRs_default_instance_;
class QueryWorld;
class QueryWorldDefaultTypeInternal;
extern QueryWorldDefaultTypeInternal _QueryWorld_default_instance_;
class QueryWorldRs;
class QueryWorldRsDefaultTypeInternal;
extern QueryWorldRsDefaultTypeInternal _QueryWorldRs_default_instance_;
class RemoveComponent;
class RemoveComponentDefaultTypeInternal;
extern RemoveComponentDefaultTypeInternal _RemoveComponent_default_instance_;
class RemovePlayer;
class RemovePlayerDefaultTypeInternal;
extern RemovePlayerDefaultTypeInternal _RemovePlayer_default_instance_;
class ReqLinkPlayer;
class ReqLinkPlayerDefaultTypeInternal;
extern ReqLinkPlayerDefaultTypeInternal _ReqLinkPlayer_default_instance_;
class ReqSyncNpc;
class ReqSyncNpcDefaultTypeInternal;
extern ReqSyncNpcDefaultTypeInternal _ReqSyncNpc_default_instance_;
class RequestSyncPlayer;
class RequestSyncPlayerDefaultTypeInternal;
extern RequestSyncPlayerDefaultTypeInternal _RequestSyncPlayer_default_instance_;
class RequestWorld;
class RequestWorldDefaultTypeInternal;
extern RequestWorldDefaultTypeInternal _RequestWorld_default_instance_;
class RobotCreate;
class RobotCreateDefaultTypeInternal;
extern RobotCreateDefaultTypeInternal _RobotCreate_default_instance_;
class RobotState;
class RobotStateDefaultTypeInternal;
extern RobotStateDefaultTypeInternal _RobotState_default_instance_;
class RobotSyncState;
class RobotSyncStateDefaultTypeInternal;
extern RobotSyncStateDefaultTypeInternal _RobotSyncState_default_instance_;
class Role;
class RoleDefaultTypeInternal;
extern RoleDefaultTypeInternal _Role_default_instance_;
class RoleDisappear;
class RoleDisappearDefaultTypeInternal;
extern RoleDisappearDefaultTypeInternal _RoleDisappear_default_instance_;
class SavePlayer;
class SavePlayerDefaultTypeInternal;
extern SavePlayerDefaultTypeInternal _SavePlayer_default_instance_;
class SelectPlayer;
class SelectPlayerDefaultTypeInternal;
extern SelectPlayerDefaultTypeInternal _SelectPlayer_default_instance_;
class SelectPlayerRs;
class SelectPlayerRsDefaultTypeInternal;
extern SelectPlayerRsDefaultTypeInternal _SelectPlayerRs_default_instance_;
class SyncEntityStatus;
class SyncEntityStatusDefaultTypeInternal;
extern SyncEntityStatusDefaultTypeInternal _SyncEntityStatus_default_instance_;
class SyncFsmState;
class SyncFsmStateDefaultTypeInternal;
extern SyncFsmStateDefaultTypeInternal _SyncFsmState_default_instance_;
class SyncNpcPos;
class SyncNpcPosDefaultTypeInternal;
extern SyncNpcPosDefaultTypeInternal _SyncNpcPos_default_instance_;
class SyncPlayer;
class SyncPlayerDefaultTypeInternal;
extern SyncPlayerDefaultTypeInternal _SyncPlayer_default_instance_;
class SyncPlayerCmd;
class SyncPlayerCmdDefaultTypeInternal;
extern SyncPlayerCmdDefaultTypeInternal _SyncPlayerCmd_default_instance_;
class SyncPlayerPos;
class SyncPlayerPosDefaultTypeInternal;
extern SyncPlayerPosDefaultTypeInternal _SyncPlayerPos_default_instance_;
class Tag;
class TagDefaultTypeInternal;
extern TagDefaultTypeInternal _Tag_default_instance_;
class TagValue;
class TagValueDefaultTypeInternal;
extern TagValueDefaultTypeInternal _TagValue_default_instance_;
class Teleport;
class TeleportDefaultTypeInternal;
extern TeleportDefaultTypeInternal _Teleport_default_instance_;
class TeleportAfter;
class TeleportAfterDefaultTypeInternal;
extern TeleportAfterDefaultTypeInternal _TeleportAfter_default_instance_;
class TokenInfo;
class TokenInfoDefaultTypeInternal;
extern TokenInfoDefaultTypeInternal _TokenInfo_default_instance_;
class WorldProxySyncToGather;
class WorldProxySyncToGatherDefaultTypeInternal;
extern WorldProxySyncToGatherDefaultTypeInternal _WorldProxySyncToGather_default_instance_;
class WorldSyncToGather;
class WorldSyncToGatherDefaultTypeInternal;
extern WorldSyncToGatherDefaultTypeInternal _WorldSyncToGather_default_instance_;
}  // namespace Proto
PROTOBUF_NAMESPACE_OPEN
template<> ::Proto::AccountCheck* Arena::CreateMaybeMessage<::Proto::AccountCheck>(Arena*);
template<> ::Proto::AccountCheckRs* Arena::CreateMaybeMessage<::Proto::AccountCheckRs>(Arena*);
template<> ::Proto::AccountDeleteOnlineToRedis* Arena::CreateMaybeMessage<::Proto::AccountDeleteOnlineToRedis>(Arena*);
template<> ::Proto::AccountQueryOnlineToRedis* Arena::CreateMaybeMessage<::Proto::AccountQueryOnlineToRedis>(Arena*);
template<> ::Proto::AccountQueryOnlineToRedisRs* Arena::CreateMaybeMessage<::Proto::AccountQueryOnlineToRedisRs>(Arena*);
template<> ::Proto::AccountSyncOnlineToRedis* Arena::CreateMaybeMessage<::Proto::AccountSyncOnlineToRedis>(Arena*);
template<> ::Proto::AllRoleAppear* Arena::CreateMaybeMessage<::Proto::AllRoleAppear>(Arena*);
template<> ::Proto::AppInfoListSync* Arena::CreateMaybeMessage<::Proto::AppInfoListSync>(Arena*);
template<> ::Proto::AppInfoSync* Arena::CreateMaybeMessage<::Proto::AppInfoSync>(Arena*);
template<> ::Proto::AppRegister* Arena::CreateMaybeMessage<::Proto::AppRegister>(Arena*);
template<> ::Proto::BroadcastCreateWorld* Arena::CreateMaybeMessage<::Proto::BroadcastCreateWorld>(Arena*);
template<> ::Proto::BroadcastCreateWorldProxy* Arena::CreateMaybeMessage<::Proto::BroadcastCreateWorldProxy>(Arena*);
template<> ::Proto::CmdApp* Arena::CreateMaybeMessage<::Proto::CmdApp>(Arena*);
template<> ::Proto::CmdThread* Arena::CreateMaybeMessage<::Proto::CmdThread>(Arena*);
template<> ::Proto::CreateComponent* Arena::CreateMaybeMessage<::Proto::CreateComponent>(Arena*);
template<> ::Proto::CreateComponentParam* Arena::CreateMaybeMessage<::Proto::CreateComponentParam>(Arena*);
template<> ::Proto::CreatePlayer* Arena::CreateMaybeMessage<::Proto::CreatePlayer>(Arena*);
template<> ::Proto::CreatePlayerRs* Arena::CreateMaybeMessage<::Proto::CreatePlayerRs>(Arena*);
template<> ::Proto::CreatePlayerToDB* Arena::CreateMaybeMessage<::Proto::CreatePlayerToDB>(Arena*);
template<> ::Proto::CreatePlayerToDBRs* Arena::CreateMaybeMessage<::Proto::CreatePlayerToDBRs>(Arena*);
template<> ::Proto::CreateSystem* Arena::CreateMaybeMessage<::Proto::CreateSystem>(Arena*);
template<> ::Proto::CreateWorld* Arena::CreateMaybeMessage<::Proto::CreateWorld>(Arena*);
template<> ::Proto::DropItemList* Arena::CreateMaybeMessage<::Proto::DropItemList>(Arena*);
template<> ::Proto::Efficiency* Arena::CreateMaybeMessage<::Proto::Efficiency>(Arena*);
template<> ::Proto::EnterWorld* Arena::CreateMaybeMessage<::Proto::EnterWorld>(Arena*);
template<> ::Proto::GameToken* Arena::CreateMaybeMessage<::Proto::GameToken>(Arena*);
template<> ::Proto::GameTokenToRedis* Arena::CreateMaybeMessage<::Proto::GameTokenToRedis>(Arena*);
template<> ::Proto::GameTokenToRedisRs* Arena::CreateMaybeMessage<::Proto::GameTokenToRedisRs>(Arena*);
template<> ::Proto::Http* Arena::CreateMaybeMessage<::Proto::Http>(Arena*);
template<> ::Proto::LoginByToken* Arena::CreateMaybeMessage<::Proto::LoginByToken>(Arena*);
template<> ::Proto::LoginByTokenRs* Arena::CreateMaybeMessage<::Proto::LoginByTokenRs>(Arena*);
template<> ::Proto::LoginTokenToRedis* Arena::CreateMaybeMessage<::Proto::LoginTokenToRedis>(Arena*);
template<> ::Proto::LoginTokenToRedisRs* Arena::CreateMaybeMessage<::Proto::LoginTokenToRedisRs>(Arena*);
template<> ::Proto::Move* Arena::CreateMaybeMessage<::Proto::Move>(Arena*);
template<> ::Proto::NetworkConnect* Arena::CreateMaybeMessage<::Proto::NetworkConnect>(Arena*);
template<> ::Proto::NetworkDisconnect* Arena::CreateMaybeMessage<::Proto::NetworkDisconnect>(Arena*);
template<> ::Proto::NpcAtkEvent* Arena::CreateMaybeMessage<::Proto::NpcAtkEvent>(Arena*);
template<> ::Proto::PlayerAtkEvent* Arena::CreateMaybeMessage<::Proto::PlayerAtkEvent>(Arena*);
template<> ::Proto::PlayerDeleteOnlineToRedis* Arena::CreateMaybeMessage<::Proto::PlayerDeleteOnlineToRedis>(Arena*);
template<> ::Proto::PlayerList* Arena::CreateMaybeMessage<::Proto::PlayerList>(Arena*);
template<> ::Proto::PlayerLittle* Arena::CreateMaybeMessage<::Proto::PlayerLittle>(Arena*);
template<> ::Proto::PlayerSyncOnlineToRedis* Arena::CreateMaybeMessage<::Proto::PlayerSyncOnlineToRedis>(Arena*);
template<> ::Proto::QueryPlayer* Arena::CreateMaybeMessage<::Proto::QueryPlayer>(Arena*);
template<> ::Proto::QueryPlayerList* Arena::CreateMaybeMessage<::Proto::QueryPlayerList>(Arena*);
template<> ::Proto::QueryPlayerRs* Arena::CreateMaybeMessage<::Proto::QueryPlayerRs>(Arena*);
template<> ::Proto::QueryWorld* Arena::CreateMaybeMessage<::Proto::QueryWorld>(Arena*);
template<> ::Proto::QueryWorldRs* Arena::CreateMaybeMessage<::Proto::QueryWorldRs>(Arena*);
template<> ::Proto::RemoveComponent* Arena::CreateMaybeMessage<::Proto::RemoveComponent>(Arena*);
template<> ::Proto::RemovePlayer* Arena::CreateMaybeMessage<::Proto::RemovePlayer>(Arena*);
template<> ::Proto::ReqLinkPlayer* Arena::CreateMaybeMessage<::Proto::ReqLinkPlayer>(Arena*);
template<> ::Proto::ReqSyncNpc* Arena::CreateMaybeMessage<::Proto::ReqSyncNpc>(Arena*);
template<> ::Proto::RequestSyncPlayer* Arena::CreateMaybeMessage<::Proto::RequestSyncPlayer>(Arena*);
template<> ::Proto::RequestWorld* Arena::CreateMaybeMessage<::Proto::RequestWorld>(Arena*);
template<> ::Proto::RobotCreate* Arena::CreateMaybeMessage<::Proto::RobotCreate>(Arena*);
template<> ::Proto::RobotState* Arena::CreateMaybeMessage<::Proto::RobotState>(Arena*);
template<> ::Proto::RobotSyncState* Arena::CreateMaybeMessage<::Proto::RobotSyncState>(Arena*);
template<> ::Proto::Role* Arena::CreateMaybeMessage<::Proto::Role>(Arena*);
template<> ::Proto::RoleDisappear* Arena::CreateMaybeMessage<::Proto::RoleDisappear>(Arena*);
template<> ::Proto::SavePlayer* Arena::CreateMaybeMessage<::Proto::SavePlayer>(Arena*);
template<> ::Proto::SelectPlayer* Arena::CreateMaybeMessage<::Proto::SelectPlayer>(Arena*);
template<> ::Proto::SelectPlayerRs* Arena::CreateMaybeMessage<::Proto::SelectPlayerRs>(Arena*);
template<> ::Proto::SyncEntityStatus* Arena::CreateMaybeMessage<::Proto::SyncEntityStatus>(Arena*);
template<> ::Proto::SyncFsmState* Arena::CreateMaybeMessage<::Proto::SyncFsmState>(Arena*);
template<> ::Proto::SyncNpcPos* Arena::CreateMaybeMessage<::Proto::SyncNpcPos>(Arena*);
template<> ::Proto::SyncPlayer* Arena::CreateMaybeMessage<::Proto::SyncPlayer>(Arena*);
template<> ::Proto::SyncPlayerCmd* Arena::CreateMaybeMessage<::Proto::SyncPlayerCmd>(Arena*);
template<> ::Proto::SyncPlayerPos* Arena::CreateMaybeMessage<::Proto::SyncPlayerPos>(Arena*);
template<> ::Proto::Tag* Arena::CreateMaybeMessage<::Proto::Tag>(Arena*);
template<> ::Proto::TagValue* Arena::CreateMaybeMessage<::Proto::TagValue>(Arena*);
template<> ::Proto::Teleport* Arena::CreateMaybeMessage<::Proto::Teleport>(Arena*);
template<> ::Proto::TeleportAfter* Arena::CreateMaybeMessage<::Proto::TeleportAfter>(Arena*);
template<> ::Proto::TokenInfo* Arena::CreateMaybeMessage<::Proto::TokenInfo>(Arena*);
template<> ::Proto::WorldProxySyncToGather* Arena::CreateMaybeMessage<::Proto::WorldProxySyncToGather>(Arena*);
template<> ::Proto::WorldSyncToGather* Arena::CreateMaybeMessage<::Proto::WorldSyncToGather>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Proto {

enum CmdThread_CmdType : int {
  CmdThread_CmdType_Entity = 0,
  CmdThread_CmdType_Pool = 1,
  CmdThread_CmdType_Connect = 2,
  CmdThread_CmdType_CmdThread_CmdType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CmdThread_CmdType_CmdThread_CmdType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CmdThread_CmdType_IsValid(int value);
constexpr CmdThread_CmdType CmdThread_CmdType_CmdType_MIN = CmdThread_CmdType_Entity;
constexpr CmdThread_CmdType CmdThread_CmdType_CmdType_MAX = CmdThread_CmdType_Connect;
constexpr int CmdThread_CmdType_CmdType_ARRAYSIZE = CmdThread_CmdType_CmdType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CmdThread_CmdType_descriptor();
template<typename T>
inline const std::string& CmdThread_CmdType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CmdThread_CmdType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CmdThread_CmdType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CmdThread_CmdType_descriptor(), enum_t_value);
}
inline bool CmdThread_CmdType_Parse(
    const std::string& name, CmdThread_CmdType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CmdThread_CmdType>(
    CmdThread_CmdType_descriptor(), name, value);
}
enum CmdApp_CmdType : int {
  CmdApp_CmdType_Info = 0,
  CmdApp_CmdType_CmdApp_CmdType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CmdApp_CmdType_CmdApp_CmdType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CmdApp_CmdType_IsValid(int value);
constexpr CmdApp_CmdType CmdApp_CmdType_CmdType_MIN = CmdApp_CmdType_Info;
constexpr CmdApp_CmdType CmdApp_CmdType_CmdType_MAX = CmdApp_CmdType_Info;
constexpr int CmdApp_CmdType_CmdType_ARRAYSIZE = CmdApp_CmdType_CmdType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CmdApp_CmdType_descriptor();
template<typename T>
inline const std::string& CmdApp_CmdType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CmdApp_CmdType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CmdApp_CmdType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CmdApp_CmdType_descriptor(), enum_t_value);
}
inline bool CmdApp_CmdType_Parse(
    const std::string& name, CmdApp_CmdType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CmdApp_CmdType>(
    CmdApp_CmdType_descriptor(), name, value);
}
enum CreateComponentParam_ParamType : int {
  CreateComponentParam_ParamType_Int = 0,
  CreateComponentParam_ParamType_String = 1,
  CreateComponentParam_ParamType_UInt64 = 2,
  CreateComponentParam_ParamType_CreateComponentParam_ParamType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CreateComponentParam_ParamType_CreateComponentParam_ParamType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CreateComponentParam_ParamType_IsValid(int value);
constexpr CreateComponentParam_ParamType CreateComponentParam_ParamType_ParamType_MIN = CreateComponentParam_ParamType_Int;
constexpr CreateComponentParam_ParamType CreateComponentParam_ParamType_ParamType_MAX = CreateComponentParam_ParamType_UInt64;
constexpr int CreateComponentParam_ParamType_ParamType_ARRAYSIZE = CreateComponentParam_ParamType_ParamType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CreateComponentParam_ParamType_descriptor();
template<typename T>
inline const std::string& CreateComponentParam_ParamType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CreateComponentParam_ParamType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CreateComponentParam_ParamType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CreateComponentParam_ParamType_descriptor(), enum_t_value);
}
inline bool CreateComponentParam_ParamType_Parse(
    const std::string& name, CreateComponentParam_ParamType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CreateComponentParam_ParamType>(
    CreateComponentParam_ParamType_descriptor(), name, value);
}
enum SelectPlayerRs_SelectPlayerReturnCode : int {
  SelectPlayerRs_SelectPlayerReturnCode_SPRC_OK = 0,
  SelectPlayerRs_SelectPlayerReturnCode_SPRC_NotFound = 1,
  SelectPlayerRs_SelectPlayerReturnCode_SelectPlayerRs_SelectPlayerReturnCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SelectPlayerRs_SelectPlayerReturnCode_SelectPlayerRs_SelectPlayerReturnCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SelectPlayerRs_SelectPlayerReturnCode_IsValid(int value);
constexpr SelectPlayerRs_SelectPlayerReturnCode SelectPlayerRs_SelectPlayerReturnCode_SelectPlayerReturnCode_MIN = SelectPlayerRs_SelectPlayerReturnCode_SPRC_OK;
constexpr SelectPlayerRs_SelectPlayerReturnCode SelectPlayerRs_SelectPlayerReturnCode_SelectPlayerReturnCode_MAX = SelectPlayerRs_SelectPlayerReturnCode_SPRC_NotFound;
constexpr int SelectPlayerRs_SelectPlayerReturnCode_SelectPlayerReturnCode_ARRAYSIZE = SelectPlayerRs_SelectPlayerReturnCode_SelectPlayerReturnCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SelectPlayerRs_SelectPlayerReturnCode_descriptor();
template<typename T>
inline const std::string& SelectPlayerRs_SelectPlayerReturnCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SelectPlayerRs_SelectPlayerReturnCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SelectPlayerRs_SelectPlayerReturnCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SelectPlayerRs_SelectPlayerReturnCode_descriptor(), enum_t_value);
}
inline bool SelectPlayerRs_SelectPlayerReturnCode_Parse(
    const std::string& name, SelectPlayerRs_SelectPlayerReturnCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SelectPlayerRs_SelectPlayerReturnCode>(
    SelectPlayerRs_SelectPlayerReturnCode_descriptor(), name, value);
}
enum GameToken_ReturnCode : int {
  GameToken_ReturnCode_GameToken_OK = 0,
  GameToken_ReturnCode_GameToken_NO_GAME = 1,
  GameToken_ReturnCode_GameToken_ReturnCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  GameToken_ReturnCode_GameToken_ReturnCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool GameToken_ReturnCode_IsValid(int value);
constexpr GameToken_ReturnCode GameToken_ReturnCode_ReturnCode_MIN = GameToken_ReturnCode_GameToken_OK;
constexpr GameToken_ReturnCode GameToken_ReturnCode_ReturnCode_MAX = GameToken_ReturnCode_GameToken_NO_GAME;
constexpr int GameToken_ReturnCode_ReturnCode_ARRAYSIZE = GameToken_ReturnCode_ReturnCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GameToken_ReturnCode_descriptor();
template<typename T>
inline const std::string& GameToken_ReturnCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GameToken_ReturnCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GameToken_ReturnCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GameToken_ReturnCode_descriptor(), enum_t_value);
}
inline bool GameToken_ReturnCode_Parse(
    const std::string& name, GameToken_ReturnCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GameToken_ReturnCode>(
    GameToken_ReturnCode_descriptor(), name, value);
}
enum LoginByTokenRs_ReturnCode : int {
  LoginByTokenRs_ReturnCode_LGRC_OK = 0,
  LoginByTokenRs_ReturnCode_LGRC_UNKONWN = 1,
  LoginByTokenRs_ReturnCode_LGRC_NOT_FOUND_ACCOUNT = 2,
  LoginByTokenRs_ReturnCode_LGRC_TOKEN_WRONG = 3,
  LoginByTokenRs_ReturnCode_LoginByTokenRs_ReturnCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  LoginByTokenRs_ReturnCode_LoginByTokenRs_ReturnCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool LoginByTokenRs_ReturnCode_IsValid(int value);
constexpr LoginByTokenRs_ReturnCode LoginByTokenRs_ReturnCode_ReturnCode_MIN = LoginByTokenRs_ReturnCode_LGRC_OK;
constexpr LoginByTokenRs_ReturnCode LoginByTokenRs_ReturnCode_ReturnCode_MAX = LoginByTokenRs_ReturnCode_LGRC_TOKEN_WRONG;
constexpr int LoginByTokenRs_ReturnCode_ReturnCode_ARRAYSIZE = LoginByTokenRs_ReturnCode_ReturnCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LoginByTokenRs_ReturnCode_descriptor();
template<typename T>
inline const std::string& LoginByTokenRs_ReturnCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LoginByTokenRs_ReturnCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LoginByTokenRs_ReturnCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LoginByTokenRs_ReturnCode_descriptor(), enum_t_value);
}
inline bool LoginByTokenRs_ReturnCode_Parse(
    const std::string& name, LoginByTokenRs_ReturnCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LoginByTokenRs_ReturnCode>(
    LoginByTokenRs_ReturnCode_descriptor(), name, value);
}
enum AccountQueryOnlineToRedisRs_ReturnCode : int {
  AccountQueryOnlineToRedisRs_ReturnCode_SOTR_Offline = 0,
  AccountQueryOnlineToRedisRs_ReturnCode_SOTR_Online = 1,
  AccountQueryOnlineToRedisRs_ReturnCode_AccountQueryOnlineToRedisRs_ReturnCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  AccountQueryOnlineToRedisRs_ReturnCode_AccountQueryOnlineToRedisRs_ReturnCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool AccountQueryOnlineToRedisRs_ReturnCode_IsValid(int value);
constexpr AccountQueryOnlineToRedisRs_ReturnCode AccountQueryOnlineToRedisRs_ReturnCode_ReturnCode_MIN = AccountQueryOnlineToRedisRs_ReturnCode_SOTR_Offline;
constexpr AccountQueryOnlineToRedisRs_ReturnCode AccountQueryOnlineToRedisRs_ReturnCode_ReturnCode_MAX = AccountQueryOnlineToRedisRs_ReturnCode_SOTR_Online;
constexpr int AccountQueryOnlineToRedisRs_ReturnCode_ReturnCode_ARRAYSIZE = AccountQueryOnlineToRedisRs_ReturnCode_ReturnCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AccountQueryOnlineToRedisRs_ReturnCode_descriptor();
template<typename T>
inline const std::string& AccountQueryOnlineToRedisRs_ReturnCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AccountQueryOnlineToRedisRs_ReturnCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AccountQueryOnlineToRedisRs_ReturnCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AccountQueryOnlineToRedisRs_ReturnCode_descriptor(), enum_t_value);
}
inline bool AccountQueryOnlineToRedisRs_ReturnCode_Parse(
    const std::string& name, AccountQueryOnlineToRedisRs_ReturnCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AccountQueryOnlineToRedisRs_ReturnCode>(
    AccountQueryOnlineToRedisRs_ReturnCode_descriptor(), name, value);
}
enum QueryWorldRs_ReturnCode : int {
  QueryWorldRs_ReturnCode_QueryWorld_OK = 0,
  QueryWorldRs_ReturnCode_QueryWorld_Failed = 1,
  QueryWorldRs_ReturnCode_QueryWorldRs_ReturnCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  QueryWorldRs_ReturnCode_QueryWorldRs_ReturnCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool QueryWorldRs_ReturnCode_IsValid(int value);
constexpr QueryWorldRs_ReturnCode QueryWorldRs_ReturnCode_ReturnCode_MIN = QueryWorldRs_ReturnCode_QueryWorld_OK;
constexpr QueryWorldRs_ReturnCode QueryWorldRs_ReturnCode_ReturnCode_MAX = QueryWorldRs_ReturnCode_QueryWorld_Failed;
constexpr int QueryWorldRs_ReturnCode_ReturnCode_ARRAYSIZE = QueryWorldRs_ReturnCode_ReturnCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* QueryWorldRs_ReturnCode_descriptor();
template<typename T>
inline const std::string& QueryWorldRs_ReturnCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, QueryWorldRs_ReturnCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function QueryWorldRs_ReturnCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    QueryWorldRs_ReturnCode_descriptor(), enum_t_value);
}
inline bool QueryWorldRs_ReturnCode_Parse(
    const std::string& name, QueryWorldRs_ReturnCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<QueryWorldRs_ReturnCode>(
    QueryWorldRs_ReturnCode_descriptor(), name, value);
}
enum TagType : int {
  TagTypeNone = 0,
  TagTypeAccount = 1,
  TagTypeApp = 2,
  TagTypeEntity = 3,
  TagTypeToWorld = 4,
  TagTypePlayer = 5,
  TagType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  TagType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool TagType_IsValid(int value);
constexpr TagType TagType_MIN = TagTypeNone;
constexpr TagType TagType_MAX = TagTypePlayer;
constexpr int TagType_ARRAYSIZE = TagType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TagType_descriptor();
template<typename T>
inline const std::string& TagType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TagType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TagType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TagType_descriptor(), enum_t_value);
}
inline bool TagType_Parse(
    const std::string& name, TagType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TagType>(
    TagType_descriptor(), name, value);
}
enum AccountCheckReturnCode : int {
  ARC_OK = 0,
  ARC_UNKONWN = 1,
  ARC_NOT_FOUND_ACCOUNT = 2,
  ARC_PASSWORD_WRONG = 3,
  ARC_LOGGING = 4,
  ARC_TIMEOUT = 5,
  ARC_ONLINE = 6,
  AccountCheckReturnCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  AccountCheckReturnCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool AccountCheckReturnCode_IsValid(int value);
constexpr AccountCheckReturnCode AccountCheckReturnCode_MIN = ARC_OK;
constexpr AccountCheckReturnCode AccountCheckReturnCode_MAX = ARC_ONLINE;
constexpr int AccountCheckReturnCode_ARRAYSIZE = AccountCheckReturnCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AccountCheckReturnCode_descriptor();
template<typename T>
inline const std::string& AccountCheckReturnCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AccountCheckReturnCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AccountCheckReturnCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AccountCheckReturnCode_descriptor(), enum_t_value);
}
inline bool AccountCheckReturnCode_Parse(
    const std::string& name, AccountCheckReturnCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AccountCheckReturnCode>(
    AccountCheckReturnCode_descriptor(), name, value);
}
enum LoginHttpReturnCode : int {
  LHRC_OK = 0,
  LHRC_TIMEOUT = 1,
  LHRC_NOTFOUND = 2,
  LoginHttpReturnCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  LoginHttpReturnCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool LoginHttpReturnCode_IsValid(int value);
constexpr LoginHttpReturnCode LoginHttpReturnCode_MIN = LHRC_OK;
constexpr LoginHttpReturnCode LoginHttpReturnCode_MAX = LHRC_NOTFOUND;
constexpr int LoginHttpReturnCode_ARRAYSIZE = LoginHttpReturnCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LoginHttpReturnCode_descriptor();
template<typename T>
inline const std::string& LoginHttpReturnCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LoginHttpReturnCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LoginHttpReturnCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LoginHttpReturnCode_descriptor(), enum_t_value);
}
inline bool LoginHttpReturnCode_Parse(
    const std::string& name, LoginHttpReturnCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LoginHttpReturnCode>(
    LoginHttpReturnCode_descriptor(), name, value);
}
enum CreatePlayerReturnCode : int {
  CPR_Create_OK = 0,
  CPR_Unkonwn = 1,
  CPR_Rename = 2,
  CreatePlayerReturnCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CreatePlayerReturnCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CreatePlayerReturnCode_IsValid(int value);
constexpr CreatePlayerReturnCode CreatePlayerReturnCode_MIN = CPR_Create_OK;
constexpr CreatePlayerReturnCode CreatePlayerReturnCode_MAX = CPR_Rename;
constexpr int CreatePlayerReturnCode_ARRAYSIZE = CreatePlayerReturnCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CreatePlayerReturnCode_descriptor();
template<typename T>
inline const std::string& CreatePlayerReturnCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CreatePlayerReturnCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CreatePlayerReturnCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CreatePlayerReturnCode_descriptor(), enum_t_value);
}
inline bool CreatePlayerReturnCode_Parse(
    const std::string& name, CreatePlayerReturnCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CreatePlayerReturnCode>(
    CreatePlayerReturnCode_descriptor(), name, value);
}
// ===================================================================

class CmdThread :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.CmdThread) */ {
 public:
  CmdThread();
  virtual ~CmdThread();

  CmdThread(const CmdThread& from);
  CmdThread(CmdThread&& from) noexcept
    : CmdThread() {
    *this = ::std::move(from);
  }

  inline CmdThread& operator=(const CmdThread& from) {
    CopyFrom(from);
    return *this;
  }
  inline CmdThread& operator=(CmdThread&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CmdThread& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CmdThread* internal_default_instance() {
    return reinterpret_cast<const CmdThread*>(
               &_CmdThread_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CmdThread& a, CmdThread& b) {
    a.Swap(&b);
  }
  inline void Swap(CmdThread* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CmdThread* New() const final {
    return CreateMaybeMessage<CmdThread>(nullptr);
  }

  CmdThread* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CmdThread>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CmdThread& from);
  void MergeFrom(const CmdThread& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CmdThread* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.CmdThread";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef CmdThread_CmdType CmdType;
  static constexpr CmdType Entity =
    CmdThread_CmdType_Entity;
  static constexpr CmdType Pool =
    CmdThread_CmdType_Pool;
  static constexpr CmdType Connect =
    CmdThread_CmdType_Connect;
  static inline bool CmdType_IsValid(int value) {
    return CmdThread_CmdType_IsValid(value);
  }
  static constexpr CmdType CmdType_MIN =
    CmdThread_CmdType_CmdType_MIN;
  static constexpr CmdType CmdType_MAX =
    CmdThread_CmdType_CmdType_MAX;
  static constexpr int CmdType_ARRAYSIZE =
    CmdThread_CmdType_CmdType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CmdType_descriptor() {
    return CmdThread_CmdType_descriptor();
  }
  template<typename T>
  static inline const std::string& CmdType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CmdType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CmdType_Name.");
    return CmdThread_CmdType_Name(enum_t_value);
  }
  static inline bool CmdType_Parse(const std::string& name,
      CmdType* value) {
    return CmdThread_CmdType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCmdTypeFieldNumber = 1,
  };
  // .Proto.CmdThread.CmdType cmd_type = 1;
  void clear_cmd_type();
  ::Proto::CmdThread_CmdType cmd_type() const;
  void set_cmd_type(::Proto::CmdThread_CmdType value);

  // @@protoc_insertion_point(class_scope:Proto.CmdThread)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int cmd_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class CmdApp :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.CmdApp) */ {
 public:
  CmdApp();
  virtual ~CmdApp();

  CmdApp(const CmdApp& from);
  CmdApp(CmdApp&& from) noexcept
    : CmdApp() {
    *this = ::std::move(from);
  }

  inline CmdApp& operator=(const CmdApp& from) {
    CopyFrom(from);
    return *this;
  }
  inline CmdApp& operator=(CmdApp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CmdApp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CmdApp* internal_default_instance() {
    return reinterpret_cast<const CmdApp*>(
               &_CmdApp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CmdApp& a, CmdApp& b) {
    a.Swap(&b);
  }
  inline void Swap(CmdApp* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CmdApp* New() const final {
    return CreateMaybeMessage<CmdApp>(nullptr);
  }

  CmdApp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CmdApp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CmdApp& from);
  void MergeFrom(const CmdApp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CmdApp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.CmdApp";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef CmdApp_CmdType CmdType;
  static constexpr CmdType Info =
    CmdApp_CmdType_Info;
  static inline bool CmdType_IsValid(int value) {
    return CmdApp_CmdType_IsValid(value);
  }
  static constexpr CmdType CmdType_MIN =
    CmdApp_CmdType_CmdType_MIN;
  static constexpr CmdType CmdType_MAX =
    CmdApp_CmdType_CmdType_MAX;
  static constexpr int CmdType_ARRAYSIZE =
    CmdApp_CmdType_CmdType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CmdType_descriptor() {
    return CmdApp_CmdType_descriptor();
  }
  template<typename T>
  static inline const std::string& CmdType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CmdType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CmdType_Name.");
    return CmdApp_CmdType_Name(enum_t_value);
  }
  static inline bool CmdType_Parse(const std::string& name,
      CmdType* value) {
    return CmdApp_CmdType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCmdTypeFieldNumber = 1,
  };
  // .Proto.CmdApp.CmdType cmd_type = 1;
  void clear_cmd_type();
  ::Proto::CmdApp_CmdType cmd_type() const;
  void set_cmd_type(::Proto::CmdApp_CmdType value);

  // @@protoc_insertion_point(class_scope:Proto.CmdApp)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int cmd_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class Efficiency :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.Efficiency) */ {
 public:
  Efficiency();
  virtual ~Efficiency();

  Efficiency(const Efficiency& from);
  Efficiency(Efficiency&& from) noexcept
    : Efficiency() {
    *this = ::std::move(from);
  }

  inline Efficiency& operator=(const Efficiency& from) {
    CopyFrom(from);
    return *this;
  }
  inline Efficiency& operator=(Efficiency&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Efficiency& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Efficiency* internal_default_instance() {
    return reinterpret_cast<const Efficiency*>(
               &_Efficiency_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Efficiency& a, Efficiency& b) {
    a.Swap(&b);
  }
  inline void Swap(Efficiency* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Efficiency* New() const final {
    return CreateMaybeMessage<Efficiency>(nullptr);
  }

  Efficiency* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Efficiency>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Efficiency& from);
  void MergeFrom(const Efficiency& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Efficiency* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.Efficiency";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kThreadIdFieldNumber = 2,
    kTimeFieldNumber = 3,
    kThreadTypeFieldNumber = 1,
  };
  // string thread_id = 2;
  void clear_thread_id();
  const std::string& thread_id() const;
  void set_thread_id(const std::string& value);
  void set_thread_id(std::string&& value);
  void set_thread_id(const char* value);
  void set_thread_id(const char* value, size_t size);
  std::string* mutable_thread_id();
  std::string* release_thread_id();
  void set_allocated_thread_id(std::string* thread_id);

  // double time = 3;
  void clear_time();
  double time() const;
  void set_time(double value);

  // int32 thread_type = 1;
  void clear_thread_type();
  ::PROTOBUF_NAMESPACE_ID::int32 thread_type() const;
  void set_thread_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Proto.Efficiency)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr thread_id_;
  double time_;
  ::PROTOBUF_NAMESPACE_ID::int32 thread_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class AppRegister :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.AppRegister) */ {
 public:
  AppRegister();
  virtual ~AppRegister();

  AppRegister(const AppRegister& from);
  AppRegister(AppRegister&& from) noexcept
    : AppRegister() {
    *this = ::std::move(from);
  }

  inline AppRegister& operator=(const AppRegister& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppRegister& operator=(AppRegister&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AppRegister& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AppRegister* internal_default_instance() {
    return reinterpret_cast<const AppRegister*>(
               &_AppRegister_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AppRegister& a, AppRegister& b) {
    a.Swap(&b);
  }
  inline void Swap(AppRegister* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AppRegister* New() const final {
    return CreateMaybeMessage<AppRegister>(nullptr);
  }

  AppRegister* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AppRegister>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AppRegister& from);
  void MergeFrom(const AppRegister& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppRegister* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.AppRegister";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kIdFieldNumber = 2,
  };
  // int32 type = 1;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 id = 2;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Proto.AppRegister)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class AppInfoSync :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.AppInfoSync) */ {
 public:
  AppInfoSync();
  virtual ~AppInfoSync();

  AppInfoSync(const AppInfoSync& from);
  AppInfoSync(AppInfoSync&& from) noexcept
    : AppInfoSync() {
    *this = ::std::move(from);
  }

  inline AppInfoSync& operator=(const AppInfoSync& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppInfoSync& operator=(AppInfoSync&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AppInfoSync& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AppInfoSync* internal_default_instance() {
    return reinterpret_cast<const AppInfoSync*>(
               &_AppInfoSync_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(AppInfoSync& a, AppInfoSync& b) {
    a.Swap(&b);
  }
  inline void Swap(AppInfoSync* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AppInfoSync* New() const final {
    return CreateMaybeMessage<AppInfoSync>(nullptr);
  }

  AppInfoSync* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AppInfoSync>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AppInfoSync& from);
  void MergeFrom(const AppInfoSync& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppInfoSync* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.AppInfoSync";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppIdFieldNumber = 1,
    kAppTypeFieldNumber = 2,
    kOnlineFieldNumber = 3,
  };
  // int32 app_id = 1;
  void clear_app_id();
  ::PROTOBUF_NAMESPACE_ID::int32 app_id() const;
  void set_app_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 app_type = 2;
  void clear_app_type();
  ::PROTOBUF_NAMESPACE_ID::int32 app_type() const;
  void set_app_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 online = 3;
  void clear_online();
  ::PROTOBUF_NAMESPACE_ID::int32 online() const;
  void set_online(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Proto.AppInfoSync)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 app_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 app_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 online_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class AppInfoListSync :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.AppInfoListSync) */ {
 public:
  AppInfoListSync();
  virtual ~AppInfoListSync();

  AppInfoListSync(const AppInfoListSync& from);
  AppInfoListSync(AppInfoListSync&& from) noexcept
    : AppInfoListSync() {
    *this = ::std::move(from);
  }

  inline AppInfoListSync& operator=(const AppInfoListSync& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppInfoListSync& operator=(AppInfoListSync&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AppInfoListSync& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AppInfoListSync* internal_default_instance() {
    return reinterpret_cast<const AppInfoListSync*>(
               &_AppInfoListSync_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(AppInfoListSync& a, AppInfoListSync& b) {
    a.Swap(&b);
  }
  inline void Swap(AppInfoListSync* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AppInfoListSync* New() const final {
    return CreateMaybeMessage<AppInfoListSync>(nullptr);
  }

  AppInfoListSync* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AppInfoListSync>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AppInfoListSync& from);
  void MergeFrom(const AppInfoListSync& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppInfoListSync* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.AppInfoListSync";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppsFieldNumber = 1,
  };
  // repeated .Proto.AppInfoSync apps = 1;
  int apps_size() const;
  void clear_apps();
  ::Proto::AppInfoSync* mutable_apps(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::AppInfoSync >*
      mutable_apps();
  const ::Proto::AppInfoSync& apps(int index) const;
  ::Proto::AppInfoSync* add_apps();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::AppInfoSync >&
      apps() const;

  // @@protoc_insertion_point(class_scope:Proto.AppInfoListSync)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::AppInfoSync > apps_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class NetworkDisconnect :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.NetworkDisconnect) */ {
 public:
  NetworkDisconnect();
  virtual ~NetworkDisconnect();

  NetworkDisconnect(const NetworkDisconnect& from);
  NetworkDisconnect(NetworkDisconnect&& from) noexcept
    : NetworkDisconnect() {
    *this = ::std::move(from);
  }

  inline NetworkDisconnect& operator=(const NetworkDisconnect& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetworkDisconnect& operator=(NetworkDisconnect&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NetworkDisconnect& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NetworkDisconnect* internal_default_instance() {
    return reinterpret_cast<const NetworkDisconnect*>(
               &_NetworkDisconnect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(NetworkDisconnect& a, NetworkDisconnect& b) {
    a.Swap(&b);
  }
  inline void Swap(NetworkDisconnect* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NetworkDisconnect* New() const final {
    return CreateMaybeMessage<NetworkDisconnect>(nullptr);
  }

  NetworkDisconnect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NetworkDisconnect>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NetworkDisconnect& from);
  void MergeFrom(const NetworkDisconnect& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetworkDisconnect* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.NetworkDisconnect";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNetworkTypeFieldNumber = 1,
    kSocketFieldNumber = 2,
  };
  // int32 network_type = 1;
  void clear_network_type();
  ::PROTOBUF_NAMESPACE_ID::int32 network_type() const;
  void set_network_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 socket = 2;
  void clear_socket();
  ::PROTOBUF_NAMESPACE_ID::int32 socket() const;
  void set_socket(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Proto.NetworkDisconnect)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 network_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 socket_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class TagValue :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.TagValue) */ {
 public:
  TagValue();
  virtual ~TagValue();

  TagValue(const TagValue& from);
  TagValue(TagValue&& from) noexcept
    : TagValue() {
    *this = ::std::move(from);
  }

  inline TagValue& operator=(const TagValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline TagValue& operator=(TagValue&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TagValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TagValue* internal_default_instance() {
    return reinterpret_cast<const TagValue*>(
               &_TagValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(TagValue& a, TagValue& b) {
    a.Swap(&b);
  }
  inline void Swap(TagValue* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TagValue* New() const final {
    return CreateMaybeMessage<TagValue>(nullptr);
  }

  TagValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TagValue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TagValue& from);
  void MergeFrom(const TagValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TagValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.TagValue";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueStrFieldNumber = 2,
    kValueInt64FieldNumber = 1,
  };
  // string value_str = 2;
  void clear_value_str();
  const std::string& value_str() const;
  void set_value_str(const std::string& value);
  void set_value_str(std::string&& value);
  void set_value_str(const char* value);
  void set_value_str(const char* value, size_t size);
  std::string* mutable_value_str();
  std::string* release_value_str();
  void set_allocated_value_str(std::string* value_str);

  // uint64 value_int64 = 1;
  void clear_value_int64();
  ::PROTOBUF_NAMESPACE_ID::uint64 value_int64() const;
  void set_value_int64(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:Proto.TagValue)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_str_;
  ::PROTOBUF_NAMESPACE_ID::uint64 value_int64_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class Tag :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.Tag) */ {
 public:
  Tag();
  virtual ~Tag();

  Tag(const Tag& from);
  Tag(Tag&& from) noexcept
    : Tag() {
    *this = ::std::move(from);
  }

  inline Tag& operator=(const Tag& from) {
    CopyFrom(from);
    return *this;
  }
  inline Tag& operator=(Tag&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Tag& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Tag* internal_default_instance() {
    return reinterpret_cast<const Tag*>(
               &_Tag_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Tag& a, Tag& b) {
    a.Swap(&b);
  }
  inline void Swap(Tag* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Tag* New() const final {
    return CreateMaybeMessage<Tag>(nullptr);
  }

  Tag* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Tag>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Tag& from);
  void MergeFrom(const Tag& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Tag* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.Tag";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagValueFieldNumber = 2,
    kTagTypeFieldNumber = 1,
  };
  // .Proto.TagValue tag_value = 2;
  bool has_tag_value() const;
  void clear_tag_value();
  const ::Proto::TagValue& tag_value() const;
  ::Proto::TagValue* release_tag_value();
  ::Proto::TagValue* mutable_tag_value();
  void set_allocated_tag_value(::Proto::TagValue* tag_value);

  // .Proto.TagType tag_type = 1;
  void clear_tag_type();
  ::Proto::TagType tag_type() const;
  void set_tag_type(::Proto::TagType value);

  // @@protoc_insertion_point(class_scope:Proto.Tag)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::Proto::TagValue* tag_value_;
  int tag_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class NetworkConnect :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.NetworkConnect) */ {
 public:
  NetworkConnect();
  virtual ~NetworkConnect();

  NetworkConnect(const NetworkConnect& from);
  NetworkConnect(NetworkConnect&& from) noexcept
    : NetworkConnect() {
    *this = ::std::move(from);
  }

  inline NetworkConnect& operator=(const NetworkConnect& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetworkConnect& operator=(NetworkConnect&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NetworkConnect& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NetworkConnect* internal_default_instance() {
    return reinterpret_cast<const NetworkConnect*>(
               &_NetworkConnect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(NetworkConnect& a, NetworkConnect& b) {
    a.Swap(&b);
  }
  inline void Swap(NetworkConnect* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NetworkConnect* New() const final {
    return CreateMaybeMessage<NetworkConnect>(nullptr);
  }

  NetworkConnect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NetworkConnect>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NetworkConnect& from);
  void MergeFrom(const NetworkConnect& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetworkConnect* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.NetworkConnect";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpFieldNumber = 3,
    kTagFieldNumber = 2,
    kNetworkTypeFieldNumber = 1,
    kPortFieldNumber = 4,
  };
  // string ip = 3;
  void clear_ip();
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);

  // .Proto.Tag tag = 2;
  bool has_tag() const;
  void clear_tag();
  const ::Proto::Tag& tag() const;
  ::Proto::Tag* release_tag();
  ::Proto::Tag* mutable_tag();
  void set_allocated_tag(::Proto::Tag* tag);

  // int32 network_type = 1;
  void clear_network_type();
  ::PROTOBUF_NAMESPACE_ID::int32 network_type() const;
  void set_network_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 port = 4;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::int32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Proto.NetworkConnect)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::Proto::Tag* tag_;
  ::PROTOBUF_NAMESPACE_ID::int32 network_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class Http :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.Http) */ {
 public:
  Http();
  virtual ~Http();

  Http(const Http& from);
  Http(Http&& from) noexcept
    : Http() {
    *this = ::std::move(from);
  }

  inline Http& operator=(const Http& from) {
    CopyFrom(from);
    return *this;
  }
  inline Http& operator=(Http&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Http& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Http* internal_default_instance() {
    return reinterpret_cast<const Http*>(
               &_Http_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Http& a, Http& b) {
    a.Swap(&b);
  }
  inline void Swap(Http* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Http* New() const final {
    return CreateMaybeMessage<Http>(nullptr);
  }

  Http* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Http>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Http& from);
  void MergeFrom(const Http& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Http* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.Http";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBodyFieldNumber = 1,
    kStatusCodeFieldNumber = 2,
  };
  // string body = 1;
  void clear_body();
  const std::string& body() const;
  void set_body(const std::string& value);
  void set_body(std::string&& value);
  void set_body(const char* value);
  void set_body(const char* value, size_t size);
  std::string* mutable_body();
  std::string* release_body();
  void set_allocated_body(std::string* body);

  // int32 status_code = 2;
  void clear_status_code();
  ::PROTOBUF_NAMESPACE_ID::int32 status_code() const;
  void set_status_code(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Proto.Http)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr body_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class CreateComponentParam :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.CreateComponentParam) */ {
 public:
  CreateComponentParam();
  virtual ~CreateComponentParam();

  CreateComponentParam(const CreateComponentParam& from);
  CreateComponentParam(CreateComponentParam&& from) noexcept
    : CreateComponentParam() {
    *this = ::std::move(from);
  }

  inline CreateComponentParam& operator=(const CreateComponentParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateComponentParam& operator=(CreateComponentParam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateComponentParam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateComponentParam* internal_default_instance() {
    return reinterpret_cast<const CreateComponentParam*>(
               &_CreateComponentParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(CreateComponentParam& a, CreateComponentParam& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateComponentParam* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateComponentParam* New() const final {
    return CreateMaybeMessage<CreateComponentParam>(nullptr);
  }

  CreateComponentParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateComponentParam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateComponentParam& from);
  void MergeFrom(const CreateComponentParam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateComponentParam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.CreateComponentParam";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef CreateComponentParam_ParamType ParamType;
  static constexpr ParamType Int =
    CreateComponentParam_ParamType_Int;
  static constexpr ParamType String =
    CreateComponentParam_ParamType_String;
  static constexpr ParamType UInt64 =
    CreateComponentParam_ParamType_UInt64;
  static inline bool ParamType_IsValid(int value) {
    return CreateComponentParam_ParamType_IsValid(value);
  }
  static constexpr ParamType ParamType_MIN =
    CreateComponentParam_ParamType_ParamType_MIN;
  static constexpr ParamType ParamType_MAX =
    CreateComponentParam_ParamType_ParamType_MAX;
  static constexpr int ParamType_ARRAYSIZE =
    CreateComponentParam_ParamType_ParamType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ParamType_descriptor() {
    return CreateComponentParam_ParamType_descriptor();
  }
  template<typename T>
  static inline const std::string& ParamType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ParamType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ParamType_Name.");
    return CreateComponentParam_ParamType_Name(enum_t_value);
  }
  static inline bool ParamType_Parse(const std::string& name,
      ParamType* value) {
    return CreateComponentParam_ParamType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kStringParamFieldNumber = 3,
    kTypeFieldNumber = 1,
    kIntParamFieldNumber = 2,
    kUint64ParamFieldNumber = 4,
  };
  // string string_param = 3;
  void clear_string_param();
  const std::string& string_param() const;
  void set_string_param(const std::string& value);
  void set_string_param(std::string&& value);
  void set_string_param(const char* value);
  void set_string_param(const char* value, size_t size);
  std::string* mutable_string_param();
  std::string* release_string_param();
  void set_allocated_string_param(std::string* string_param);

  // .Proto.CreateComponentParam.ParamType type = 1;
  void clear_type();
  ::Proto::CreateComponentParam_ParamType type() const;
  void set_type(::Proto::CreateComponentParam_ParamType value);

  // int32 int_param = 2;
  void clear_int_param();
  ::PROTOBUF_NAMESPACE_ID::int32 int_param() const;
  void set_int_param(::PROTOBUF_NAMESPACE_ID::int32 value);

  // uint64 uint64_param = 4;
  void clear_uint64_param();
  ::PROTOBUF_NAMESPACE_ID::uint64 uint64_param() const;
  void set_uint64_param(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:Proto.CreateComponentParam)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_param_;
  int type_;
  ::PROTOBUF_NAMESPACE_ID::int32 int_param_;
  ::PROTOBUF_NAMESPACE_ID::uint64 uint64_param_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class CreateComponent :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.CreateComponent) */ {
 public:
  CreateComponent();
  virtual ~CreateComponent();

  CreateComponent(const CreateComponent& from);
  CreateComponent(CreateComponent&& from) noexcept
    : CreateComponent() {
    *this = ::std::move(from);
  }

  inline CreateComponent& operator=(const CreateComponent& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateComponent& operator=(CreateComponent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateComponent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateComponent* internal_default_instance() {
    return reinterpret_cast<const CreateComponent*>(
               &_CreateComponent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CreateComponent& a, CreateComponent& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateComponent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateComponent* New() const final {
    return CreateMaybeMessage<CreateComponent>(nullptr);
  }

  CreateComponent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateComponent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateComponent& from);
  void MergeFrom(const CreateComponent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateComponent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.CreateComponent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParamsFieldNumber = 4,
    kClassNameFieldNumber = 2,
    kThreadTypeFieldNumber = 1,
    kIsToAllThreadFieldNumber = 3,
    kSnFieldNumber = 5,
  };
  // repeated .Proto.CreateComponentParam params = 4;
  int params_size() const;
  void clear_params();
  ::Proto::CreateComponentParam* mutable_params(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::CreateComponentParam >*
      mutable_params();
  const ::Proto::CreateComponentParam& params(int index) const;
  ::Proto::CreateComponentParam* add_params();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::CreateComponentParam >&
      params() const;

  // string class_name = 2;
  void clear_class_name();
  const std::string& class_name() const;
  void set_class_name(const std::string& value);
  void set_class_name(std::string&& value);
  void set_class_name(const char* value);
  void set_class_name(const char* value, size_t size);
  std::string* mutable_class_name();
  std::string* release_class_name();
  void set_allocated_class_name(std::string* class_name);

  // int32 thread_type = 1;
  void clear_thread_type();
  ::PROTOBUF_NAMESPACE_ID::int32 thread_type() const;
  void set_thread_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // bool is_to_all_thread = 3;
  void clear_is_to_all_thread();
  bool is_to_all_thread() const;
  void set_is_to_all_thread(bool value);

  // uint64 sn = 5;
  void clear_sn();
  ::PROTOBUF_NAMESPACE_ID::uint64 sn() const;
  void set_sn(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:Proto.CreateComponent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::CreateComponentParam > params_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr class_name_;
  ::PROTOBUF_NAMESPACE_ID::int32 thread_type_;
  bool is_to_all_thread_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sn_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class RemoveComponent :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.RemoveComponent) */ {
 public:
  RemoveComponent();
  virtual ~RemoveComponent();

  RemoveComponent(const RemoveComponent& from);
  RemoveComponent(RemoveComponent&& from) noexcept
    : RemoveComponent() {
    *this = ::std::move(from);
  }

  inline RemoveComponent& operator=(const RemoveComponent& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveComponent& operator=(RemoveComponent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemoveComponent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveComponent* internal_default_instance() {
    return reinterpret_cast<const RemoveComponent*>(
               &_RemoveComponent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(RemoveComponent& a, RemoveComponent& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveComponent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoveComponent* New() const final {
    return CreateMaybeMessage<RemoveComponent>(nullptr);
  }

  RemoveComponent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoveComponent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemoveComponent& from);
  void MergeFrom(const RemoveComponent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveComponent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.RemoveComponent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSnFieldNumber = 1,
  };
  // uint64 sn = 1;
  void clear_sn();
  ::PROTOBUF_NAMESPACE_ID::uint64 sn() const;
  void set_sn(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:Proto.RemoveComponent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sn_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class CreateSystem :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.CreateSystem) */ {
 public:
  CreateSystem();
  virtual ~CreateSystem();

  CreateSystem(const CreateSystem& from);
  CreateSystem(CreateSystem&& from) noexcept
    : CreateSystem() {
    *this = ::std::move(from);
  }

  inline CreateSystem& operator=(const CreateSystem& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateSystem& operator=(CreateSystem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateSystem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateSystem* internal_default_instance() {
    return reinterpret_cast<const CreateSystem*>(
               &_CreateSystem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(CreateSystem& a, CreateSystem& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateSystem* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateSystem* New() const final {
    return CreateMaybeMessage<CreateSystem>(nullptr);
  }

  CreateSystem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateSystem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateSystem& from);
  void MergeFrom(const CreateSystem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateSystem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.CreateSystem";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSystemNameFieldNumber = 2,
    kThreadTypeFieldNumber = 1,
  };
  // string system_name = 2;
  void clear_system_name();
  const std::string& system_name() const;
  void set_system_name(const std::string& value);
  void set_system_name(std::string&& value);
  void set_system_name(const char* value);
  void set_system_name(const char* value, size_t size);
  std::string* mutable_system_name();
  std::string* release_system_name();
  void set_allocated_system_name(std::string* system_name);

  // int32 thread_type = 1;
  void clear_thread_type();
  ::PROTOBUF_NAMESPACE_ID::int32 thread_type() const;
  void set_thread_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Proto.CreateSystem)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr system_name_;
  ::PROTOBUF_NAMESPACE_ID::int32 thread_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class AccountCheck :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.AccountCheck) */ {
 public:
  AccountCheck();
  virtual ~AccountCheck();

  AccountCheck(const AccountCheck& from);
  AccountCheck(AccountCheck&& from) noexcept
    : AccountCheck() {
    *this = ::std::move(from);
  }

  inline AccountCheck& operator=(const AccountCheck& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccountCheck& operator=(AccountCheck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AccountCheck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AccountCheck* internal_default_instance() {
    return reinterpret_cast<const AccountCheck*>(
               &_AccountCheck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(AccountCheck& a, AccountCheck& b) {
    a.Swap(&b);
  }
  inline void Swap(AccountCheck* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AccountCheck* New() const final {
    return CreateMaybeMessage<AccountCheck>(nullptr);
  }

  AccountCheck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AccountCheck>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AccountCheck& from);
  void MergeFrom(const AccountCheck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccountCheck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.AccountCheck";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 1,
    kPasswordFieldNumber = 2,
  };
  // string account = 1;
  void clear_account();
  const std::string& account() const;
  void set_account(const std::string& value);
  void set_account(std::string&& value);
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  std::string* mutable_account();
  std::string* release_account();
  void set_allocated_account(std::string* account);

  // string password = 2;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);

  // @@protoc_insertion_point(class_scope:Proto.AccountCheck)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class AccountCheckRs :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.AccountCheckRs) */ {
 public:
  AccountCheckRs();
  virtual ~AccountCheckRs();

  AccountCheckRs(const AccountCheckRs& from);
  AccountCheckRs(AccountCheckRs&& from) noexcept
    : AccountCheckRs() {
    *this = ::std::move(from);
  }

  inline AccountCheckRs& operator=(const AccountCheckRs& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccountCheckRs& operator=(AccountCheckRs&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AccountCheckRs& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AccountCheckRs* internal_default_instance() {
    return reinterpret_cast<const AccountCheckRs*>(
               &_AccountCheckRs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(AccountCheckRs& a, AccountCheckRs& b) {
    a.Swap(&b);
  }
  inline void Swap(AccountCheckRs* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AccountCheckRs* New() const final {
    return CreateMaybeMessage<AccountCheckRs>(nullptr);
  }

  AccountCheckRs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AccountCheckRs>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AccountCheckRs& from);
  void MergeFrom(const AccountCheckRs& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccountCheckRs* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.AccountCheckRs";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReturnCodeFieldNumber = 1,
  };
  // .Proto.AccountCheckReturnCode return_code = 1;
  void clear_return_code();
  ::Proto::AccountCheckReturnCode return_code() const;
  void set_return_code(::Proto::AccountCheckReturnCode value);

  // @@protoc_insertion_point(class_scope:Proto.AccountCheckRs)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int return_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class RobotState :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.RobotState) */ {
 public:
  RobotState();
  virtual ~RobotState();

  RobotState(const RobotState& from);
  RobotState(RobotState&& from) noexcept
    : RobotState() {
    *this = ::std::move(from);
  }

  inline RobotState& operator=(const RobotState& from) {
    CopyFrom(from);
    return *this;
  }
  inline RobotState& operator=(RobotState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RobotState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RobotState* internal_default_instance() {
    return reinterpret_cast<const RobotState*>(
               &_RobotState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(RobotState& a, RobotState& b) {
    a.Swap(&b);
  }
  inline void Swap(RobotState* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RobotState* New() const final {
    return CreateMaybeMessage<RobotState>(nullptr);
  }

  RobotState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RobotState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RobotState& from);
  void MergeFrom(const RobotState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RobotState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.RobotState";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 1,
    kStateFieldNumber = 2,
  };
  // string account = 1;
  void clear_account();
  const std::string& account() const;
  void set_account(const std::string& value);
  void set_account(std::string&& value);
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  std::string* mutable_account();
  std::string* release_account();
  void set_allocated_account(std::string* account);

  // int32 state = 2;
  void clear_state();
  ::PROTOBUF_NAMESPACE_ID::int32 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Proto.RobotState)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  ::PROTOBUF_NAMESPACE_ID::int32 state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class RobotSyncState :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.RobotSyncState) */ {
 public:
  RobotSyncState();
  virtual ~RobotSyncState();

  RobotSyncState(const RobotSyncState& from);
  RobotSyncState(RobotSyncState&& from) noexcept
    : RobotSyncState() {
    *this = ::std::move(from);
  }

  inline RobotSyncState& operator=(const RobotSyncState& from) {
    CopyFrom(from);
    return *this;
  }
  inline RobotSyncState& operator=(RobotSyncState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RobotSyncState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RobotSyncState* internal_default_instance() {
    return reinterpret_cast<const RobotSyncState*>(
               &_RobotSyncState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(RobotSyncState& a, RobotSyncState& b) {
    a.Swap(&b);
  }
  inline void Swap(RobotSyncState* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RobotSyncState* New() const final {
    return CreateMaybeMessage<RobotSyncState>(nullptr);
  }

  RobotSyncState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RobotSyncState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RobotSyncState& from);
  void MergeFrom(const RobotSyncState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RobotSyncState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.RobotSyncState";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatesFieldNumber = 1,
  };
  // repeated .Proto.RobotState states = 1;
  int states_size() const;
  void clear_states();
  ::Proto::RobotState* mutable_states(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::RobotState >*
      mutable_states();
  const ::Proto::RobotState& states(int index) const;
  ::Proto::RobotState* add_states();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::RobotState >&
      states() const;

  // @@protoc_insertion_point(class_scope:Proto.RobotSyncState)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::RobotState > states_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class RobotCreate :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.RobotCreate) */ {
 public:
  RobotCreate();
  virtual ~RobotCreate();

  RobotCreate(const RobotCreate& from);
  RobotCreate(RobotCreate&& from) noexcept
    : RobotCreate() {
    *this = ::std::move(from);
  }

  inline RobotCreate& operator=(const RobotCreate& from) {
    CopyFrom(from);
    return *this;
  }
  inline RobotCreate& operator=(RobotCreate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RobotCreate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RobotCreate* internal_default_instance() {
    return reinterpret_cast<const RobotCreate*>(
               &_RobotCreate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(RobotCreate& a, RobotCreate& b) {
    a.Swap(&b);
  }
  inline void Swap(RobotCreate* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RobotCreate* New() const final {
    return CreateMaybeMessage<RobotCreate>(nullptr);
  }

  RobotCreate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RobotCreate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RobotCreate& from);
  void MergeFrom(const RobotCreate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RobotCreate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.RobotCreate";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 1,
  };
  // string account = 1;
  void clear_account();
  const std::string& account() const;
  void set_account(const std::string& value);
  void set_account(std::string&& value);
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  std::string* mutable_account();
  std::string* release_account();
  void set_allocated_account(std::string* account);

  // @@protoc_insertion_point(class_scope:Proto.RobotCreate)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class PlayerLittle :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.PlayerLittle) */ {
 public:
  PlayerLittle();
  virtual ~PlayerLittle();

  PlayerLittle(const PlayerLittle& from);
  PlayerLittle(PlayerLittle&& from) noexcept
    : PlayerLittle() {
    *this = ::std::move(from);
  }

  inline PlayerLittle& operator=(const PlayerLittle& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerLittle& operator=(PlayerLittle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlayerLittle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerLittle* internal_default_instance() {
    return reinterpret_cast<const PlayerLittle*>(
               &_PlayerLittle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(PlayerLittle& a, PlayerLittle& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerLittle* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlayerLittle* New() const final {
    return CreateMaybeMessage<PlayerLittle>(nullptr);
  }

  PlayerLittle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayerLittle>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlayerLittle& from);
  void MergeFrom(const PlayerLittle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerLittle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.PlayerLittle";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kLastWorldFieldNumber = 5,
    kLastDungeonFieldNumber = 6,
    kSnFieldNumber = 1,
    kGenderFieldNumber = 3,
    kLevelFieldNumber = 4,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // .Proto.LastWorld last_world = 5;
  bool has_last_world() const;
  void clear_last_world();
  const ::Proto::LastWorld& last_world() const;
  ::Proto::LastWorld* release_last_world();
  ::Proto::LastWorld* mutable_last_world();
  void set_allocated_last_world(::Proto::LastWorld* last_world);

  // .Proto.LastWorld last_dungeon = 6;
  bool has_last_dungeon() const;
  void clear_last_dungeon();
  const ::Proto::LastWorld& last_dungeon() const;
  ::Proto::LastWorld* release_last_dungeon();
  ::Proto::LastWorld* mutable_last_dungeon();
  void set_allocated_last_dungeon(::Proto::LastWorld* last_dungeon);

  // uint64 sn = 1;
  void clear_sn();
  ::PROTOBUF_NAMESPACE_ID::uint64 sn() const;
  void set_sn(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // .Proto.Gender gender = 3;
  void clear_gender();
  ::Proto::Gender gender() const;
  void set_gender(::Proto::Gender value);

  // int32 level = 4;
  void clear_level();
  ::PROTOBUF_NAMESPACE_ID::int32 level() const;
  void set_level(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Proto.PlayerLittle)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::Proto::LastWorld* last_world_;
  ::Proto::LastWorld* last_dungeon_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sn_;
  int gender_;
  ::PROTOBUF_NAMESPACE_ID::int32 level_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class PlayerList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.PlayerList) */ {
 public:
  PlayerList();
  virtual ~PlayerList();

  PlayerList(const PlayerList& from);
  PlayerList(PlayerList&& from) noexcept
    : PlayerList() {
    *this = ::std::move(from);
  }

  inline PlayerList& operator=(const PlayerList& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerList& operator=(PlayerList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlayerList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerList* internal_default_instance() {
    return reinterpret_cast<const PlayerList*>(
               &_PlayerList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(PlayerList& a, PlayerList& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlayerList* New() const final {
    return CreateMaybeMessage<PlayerList>(nullptr);
  }

  PlayerList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayerList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlayerList& from);
  void MergeFrom(const PlayerList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.PlayerList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerFieldNumber = 2,
    kAccountFieldNumber = 1,
  };
  // repeated .Proto.PlayerLittle player = 2;
  int player_size() const;
  void clear_player();
  ::Proto::PlayerLittle* mutable_player(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::PlayerLittle >*
      mutable_player();
  const ::Proto::PlayerLittle& player(int index) const;
  ::Proto::PlayerLittle* add_player();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::PlayerLittle >&
      player() const;

  // string account = 1;
  void clear_account();
  const std::string& account() const;
  void set_account(const std::string& value);
  void set_account(std::string&& value);
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  std::string* mutable_account();
  std::string* release_account();
  void set_allocated_account(std::string* account);

  // @@protoc_insertion_point(class_scope:Proto.PlayerList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::PlayerLittle > player_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class QueryPlayerList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.QueryPlayerList) */ {
 public:
  QueryPlayerList();
  virtual ~QueryPlayerList();

  QueryPlayerList(const QueryPlayerList& from);
  QueryPlayerList(QueryPlayerList&& from) noexcept
    : QueryPlayerList() {
    *this = ::std::move(from);
  }

  inline QueryPlayerList& operator=(const QueryPlayerList& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryPlayerList& operator=(QueryPlayerList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QueryPlayerList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryPlayerList* internal_default_instance() {
    return reinterpret_cast<const QueryPlayerList*>(
               &_QueryPlayerList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(QueryPlayerList& a, QueryPlayerList& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryPlayerList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QueryPlayerList* New() const final {
    return CreateMaybeMessage<QueryPlayerList>(nullptr);
  }

  QueryPlayerList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueryPlayerList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QueryPlayerList& from);
  void MergeFrom(const QueryPlayerList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryPlayerList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.QueryPlayerList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 1,
  };
  // string account = 1;
  void clear_account();
  const std::string& account() const;
  void set_account(const std::string& value);
  void set_account(std::string&& value);
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  std::string* mutable_account();
  std::string* release_account();
  void set_allocated_account(std::string* account);

  // @@protoc_insertion_point(class_scope:Proto.QueryPlayerList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class QueryPlayer :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.QueryPlayer) */ {
 public:
  QueryPlayer();
  virtual ~QueryPlayer();

  QueryPlayer(const QueryPlayer& from);
  QueryPlayer(QueryPlayer&& from) noexcept
    : QueryPlayer() {
    *this = ::std::move(from);
  }

  inline QueryPlayer& operator=(const QueryPlayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryPlayer& operator=(QueryPlayer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QueryPlayer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryPlayer* internal_default_instance() {
    return reinterpret_cast<const QueryPlayer*>(
               &_QueryPlayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(QueryPlayer& a, QueryPlayer& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryPlayer* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QueryPlayer* New() const final {
    return CreateMaybeMessage<QueryPlayer>(nullptr);
  }

  QueryPlayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueryPlayer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QueryPlayer& from);
  void MergeFrom(const QueryPlayer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryPlayer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.QueryPlayer";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerSnFieldNumber = 1,
  };
  // uint64 player_sn = 1;
  void clear_player_sn();
  ::PROTOBUF_NAMESPACE_ID::uint64 player_sn() const;
  void set_player_sn(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:Proto.QueryPlayer)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 player_sn_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class QueryPlayerRs :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.QueryPlayerRs) */ {
 public:
  QueryPlayerRs();
  virtual ~QueryPlayerRs();

  QueryPlayerRs(const QueryPlayerRs& from);
  QueryPlayerRs(QueryPlayerRs&& from) noexcept
    : QueryPlayerRs() {
    *this = ::std::move(from);
  }

  inline QueryPlayerRs& operator=(const QueryPlayerRs& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryPlayerRs& operator=(QueryPlayerRs&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QueryPlayerRs& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryPlayerRs* internal_default_instance() {
    return reinterpret_cast<const QueryPlayerRs*>(
               &_QueryPlayerRs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(QueryPlayerRs& a, QueryPlayerRs& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryPlayerRs* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QueryPlayerRs* New() const final {
    return CreateMaybeMessage<QueryPlayerRs>(nullptr);
  }

  QueryPlayerRs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueryPlayerRs>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QueryPlayerRs& from);
  void MergeFrom(const QueryPlayerRs& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryPlayerRs* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.QueryPlayerRs";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 1,
    kPlayerFieldNumber = 2,
  };
  // string account = 1;
  void clear_account();
  const std::string& account() const;
  void set_account(const std::string& value);
  void set_account(std::string&& value);
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  std::string* mutable_account();
  std::string* release_account();
  void set_allocated_account(std::string* account);

  // .Proto.Player player = 2;
  bool has_player() const;
  void clear_player();
  const ::Proto::Player& player() const;
  ::Proto::Player* release_player();
  ::Proto::Player* mutable_player();
  void set_allocated_player(::Proto::Player* player);

  // @@protoc_insertion_point(class_scope:Proto.QueryPlayerRs)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  ::Proto::Player* player_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class CreatePlayer :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.CreatePlayer) */ {
 public:
  CreatePlayer();
  virtual ~CreatePlayer();

  CreatePlayer(const CreatePlayer& from);
  CreatePlayer(CreatePlayer&& from) noexcept
    : CreatePlayer() {
    *this = ::std::move(from);
  }

  inline CreatePlayer& operator=(const CreatePlayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreatePlayer& operator=(CreatePlayer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreatePlayer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreatePlayer* internal_default_instance() {
    return reinterpret_cast<const CreatePlayer*>(
               &_CreatePlayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(CreatePlayer& a, CreatePlayer& b) {
    a.Swap(&b);
  }
  inline void Swap(CreatePlayer* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreatePlayer* New() const final {
    return CreateMaybeMessage<CreatePlayer>(nullptr);
  }

  CreatePlayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreatePlayer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreatePlayer& from);
  void MergeFrom(const CreatePlayer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreatePlayer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.CreatePlayer";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kGenderFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // .Proto.Gender gender = 2;
  void clear_gender();
  ::Proto::Gender gender() const;
  void set_gender(::Proto::Gender value);

  // @@protoc_insertion_point(class_scope:Proto.CreatePlayer)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  int gender_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class CreatePlayerRs :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.CreatePlayerRs) */ {
 public:
  CreatePlayerRs();
  virtual ~CreatePlayerRs();

  CreatePlayerRs(const CreatePlayerRs& from);
  CreatePlayerRs(CreatePlayerRs&& from) noexcept
    : CreatePlayerRs() {
    *this = ::std::move(from);
  }

  inline CreatePlayerRs& operator=(const CreatePlayerRs& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreatePlayerRs& operator=(CreatePlayerRs&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreatePlayerRs& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreatePlayerRs* internal_default_instance() {
    return reinterpret_cast<const CreatePlayerRs*>(
               &_CreatePlayerRs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(CreatePlayerRs& a, CreatePlayerRs& b) {
    a.Swap(&b);
  }
  inline void Swap(CreatePlayerRs* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreatePlayerRs* New() const final {
    return CreateMaybeMessage<CreatePlayerRs>(nullptr);
  }

  CreatePlayerRs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreatePlayerRs>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreatePlayerRs& from);
  void MergeFrom(const CreatePlayerRs& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreatePlayerRs* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.CreatePlayerRs";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReturnCodeFieldNumber = 2,
  };
  // .Proto.CreatePlayerReturnCode return_code = 2;
  void clear_return_code();
  ::Proto::CreatePlayerReturnCode return_code() const;
  void set_return_code(::Proto::CreatePlayerReturnCode value);

  // @@protoc_insertion_point(class_scope:Proto.CreatePlayerRs)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int return_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class CreatePlayerToDB :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.CreatePlayerToDB) */ {
 public:
  CreatePlayerToDB();
  virtual ~CreatePlayerToDB();

  CreatePlayerToDB(const CreatePlayerToDB& from);
  CreatePlayerToDB(CreatePlayerToDB&& from) noexcept
    : CreatePlayerToDB() {
    *this = ::std::move(from);
  }

  inline CreatePlayerToDB& operator=(const CreatePlayerToDB& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreatePlayerToDB& operator=(CreatePlayerToDB&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreatePlayerToDB& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreatePlayerToDB* internal_default_instance() {
    return reinterpret_cast<const CreatePlayerToDB*>(
               &_CreatePlayerToDB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(CreatePlayerToDB& a, CreatePlayerToDB& b) {
    a.Swap(&b);
  }
  inline void Swap(CreatePlayerToDB* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreatePlayerToDB* New() const final {
    return CreateMaybeMessage<CreatePlayerToDB>(nullptr);
  }

  CreatePlayerToDB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreatePlayerToDB>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreatePlayerToDB& from);
  void MergeFrom(const CreatePlayerToDB& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreatePlayerToDB* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.CreatePlayerToDB";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 2,
    kPlayerFieldNumber = 3,
  };
  // string account = 2;
  void clear_account();
  const std::string& account() const;
  void set_account(const std::string& value);
  void set_account(std::string&& value);
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  std::string* mutable_account();
  std::string* release_account();
  void set_allocated_account(std::string* account);

  // .Proto.Player player = 3;
  bool has_player() const;
  void clear_player();
  const ::Proto::Player& player() const;
  ::Proto::Player* release_player();
  ::Proto::Player* mutable_player();
  void set_allocated_player(::Proto::Player* player);

  // @@protoc_insertion_point(class_scope:Proto.CreatePlayerToDB)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  ::Proto::Player* player_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class CreatePlayerToDBRs :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.CreatePlayerToDBRs) */ {
 public:
  CreatePlayerToDBRs();
  virtual ~CreatePlayerToDBRs();

  CreatePlayerToDBRs(const CreatePlayerToDBRs& from);
  CreatePlayerToDBRs(CreatePlayerToDBRs&& from) noexcept
    : CreatePlayerToDBRs() {
    *this = ::std::move(from);
  }

  inline CreatePlayerToDBRs& operator=(const CreatePlayerToDBRs& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreatePlayerToDBRs& operator=(CreatePlayerToDBRs&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreatePlayerToDBRs& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreatePlayerToDBRs* internal_default_instance() {
    return reinterpret_cast<const CreatePlayerToDBRs*>(
               &_CreatePlayerToDBRs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(CreatePlayerToDBRs& a, CreatePlayerToDBRs& b) {
    a.Swap(&b);
  }
  inline void Swap(CreatePlayerToDBRs* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreatePlayerToDBRs* New() const final {
    return CreateMaybeMessage<CreatePlayerToDBRs>(nullptr);
  }

  CreatePlayerToDBRs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreatePlayerToDBRs>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreatePlayerToDBRs& from);
  void MergeFrom(const CreatePlayerToDBRs& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreatePlayerToDBRs* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.CreatePlayerToDBRs";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 1,
    kReturnCodeFieldNumber = 2,
  };
  // string account = 1;
  void clear_account();
  const std::string& account() const;
  void set_account(const std::string& value);
  void set_account(std::string&& value);
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  std::string* mutable_account();
  std::string* release_account();
  void set_allocated_account(std::string* account);

  // .Proto.CreatePlayerReturnCode return_code = 2;
  void clear_return_code();
  ::Proto::CreatePlayerReturnCode return_code() const;
  void set_return_code(::Proto::CreatePlayerReturnCode value);

  // @@protoc_insertion_point(class_scope:Proto.CreatePlayerToDBRs)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  int return_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class SelectPlayer :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.SelectPlayer) */ {
 public:
  SelectPlayer();
  virtual ~SelectPlayer();

  SelectPlayer(const SelectPlayer& from);
  SelectPlayer(SelectPlayer&& from) noexcept
    : SelectPlayer() {
    *this = ::std::move(from);
  }

  inline SelectPlayer& operator=(const SelectPlayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline SelectPlayer& operator=(SelectPlayer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SelectPlayer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SelectPlayer* internal_default_instance() {
    return reinterpret_cast<const SelectPlayer*>(
               &_SelectPlayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(SelectPlayer& a, SelectPlayer& b) {
    a.Swap(&b);
  }
  inline void Swap(SelectPlayer* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SelectPlayer* New() const final {
    return CreateMaybeMessage<SelectPlayer>(nullptr);
  }

  SelectPlayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SelectPlayer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SelectPlayer& from);
  void MergeFrom(const SelectPlayer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SelectPlayer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.SelectPlayer";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerSnFieldNumber = 1,
  };
  // uint64 player_sn = 1;
  void clear_player_sn();
  ::PROTOBUF_NAMESPACE_ID::uint64 player_sn() const;
  void set_player_sn(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:Proto.SelectPlayer)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 player_sn_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class SelectPlayerRs :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.SelectPlayerRs) */ {
 public:
  SelectPlayerRs();
  virtual ~SelectPlayerRs();

  SelectPlayerRs(const SelectPlayerRs& from);
  SelectPlayerRs(SelectPlayerRs&& from) noexcept
    : SelectPlayerRs() {
    *this = ::std::move(from);
  }

  inline SelectPlayerRs& operator=(const SelectPlayerRs& from) {
    CopyFrom(from);
    return *this;
  }
  inline SelectPlayerRs& operator=(SelectPlayerRs&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SelectPlayerRs& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SelectPlayerRs* internal_default_instance() {
    return reinterpret_cast<const SelectPlayerRs*>(
               &_SelectPlayerRs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(SelectPlayerRs& a, SelectPlayerRs& b) {
    a.Swap(&b);
  }
  inline void Swap(SelectPlayerRs* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SelectPlayerRs* New() const final {
    return CreateMaybeMessage<SelectPlayerRs>(nullptr);
  }

  SelectPlayerRs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SelectPlayerRs>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SelectPlayerRs& from);
  void MergeFrom(const SelectPlayerRs& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SelectPlayerRs* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.SelectPlayerRs";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SelectPlayerRs_SelectPlayerReturnCode SelectPlayerReturnCode;
  static constexpr SelectPlayerReturnCode SPRC_OK =
    SelectPlayerRs_SelectPlayerReturnCode_SPRC_OK;
  static constexpr SelectPlayerReturnCode SPRC_NotFound =
    SelectPlayerRs_SelectPlayerReturnCode_SPRC_NotFound;
  static inline bool SelectPlayerReturnCode_IsValid(int value) {
    return SelectPlayerRs_SelectPlayerReturnCode_IsValid(value);
  }
  static constexpr SelectPlayerReturnCode SelectPlayerReturnCode_MIN =
    SelectPlayerRs_SelectPlayerReturnCode_SelectPlayerReturnCode_MIN;
  static constexpr SelectPlayerReturnCode SelectPlayerReturnCode_MAX =
    SelectPlayerRs_SelectPlayerReturnCode_SelectPlayerReturnCode_MAX;
  static constexpr int SelectPlayerReturnCode_ARRAYSIZE =
    SelectPlayerRs_SelectPlayerReturnCode_SelectPlayerReturnCode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SelectPlayerReturnCode_descriptor() {
    return SelectPlayerRs_SelectPlayerReturnCode_descriptor();
  }
  template<typename T>
  static inline const std::string& SelectPlayerReturnCode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SelectPlayerReturnCode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SelectPlayerReturnCode_Name.");
    return SelectPlayerRs_SelectPlayerReturnCode_Name(enum_t_value);
  }
  static inline bool SelectPlayerReturnCode_Parse(const std::string& name,
      SelectPlayerReturnCode* value) {
    return SelectPlayerRs_SelectPlayerReturnCode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kReturnCodeFieldNumber = 1,
  };
  // .Proto.SelectPlayerRs.SelectPlayerReturnCode return_code = 1;
  void clear_return_code();
  ::Proto::SelectPlayerRs_SelectPlayerReturnCode return_code() const;
  void set_return_code(::Proto::SelectPlayerRs_SelectPlayerReturnCode value);

  // @@protoc_insertion_point(class_scope:Proto.SelectPlayerRs)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int return_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class SavePlayer :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.SavePlayer) */ {
 public:
  SavePlayer();
  virtual ~SavePlayer();

  SavePlayer(const SavePlayer& from);
  SavePlayer(SavePlayer&& from) noexcept
    : SavePlayer() {
    *this = ::std::move(from);
  }

  inline SavePlayer& operator=(const SavePlayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline SavePlayer& operator=(SavePlayer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SavePlayer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SavePlayer* internal_default_instance() {
    return reinterpret_cast<const SavePlayer*>(
               &_SavePlayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(SavePlayer& a, SavePlayer& b) {
    a.Swap(&b);
  }
  inline void Swap(SavePlayer* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SavePlayer* New() const final {
    return CreateMaybeMessage<SavePlayer>(nullptr);
  }

  SavePlayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SavePlayer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SavePlayer& from);
  void MergeFrom(const SavePlayer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SavePlayer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.SavePlayer";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerFieldNumber = 2,
    kPlayerSnFieldNumber = 1,
  };
  // .Proto.Player player = 2;
  bool has_player() const;
  void clear_player();
  const ::Proto::Player& player() const;
  ::Proto::Player* release_player();
  ::Proto::Player* mutable_player();
  void set_allocated_player(::Proto::Player* player);

  // uint64 player_sn = 1;
  void clear_player_sn();
  ::PROTOBUF_NAMESPACE_ID::uint64 player_sn() const;
  void set_player_sn(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:Proto.SavePlayer)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::Proto::Player* player_;
  ::PROTOBUF_NAMESPACE_ID::uint64 player_sn_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class WorldSyncToGather :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.WorldSyncToGather) */ {
 public:
  WorldSyncToGather();
  virtual ~WorldSyncToGather();

  WorldSyncToGather(const WorldSyncToGather& from);
  WorldSyncToGather(WorldSyncToGather&& from) noexcept
    : WorldSyncToGather() {
    *this = ::std::move(from);
  }

  inline WorldSyncToGather& operator=(const WorldSyncToGather& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorldSyncToGather& operator=(WorldSyncToGather&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WorldSyncToGather& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WorldSyncToGather* internal_default_instance() {
    return reinterpret_cast<const WorldSyncToGather*>(
               &_WorldSyncToGather_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(WorldSyncToGather& a, WorldSyncToGather& b) {
    a.Swap(&b);
  }
  inline void Swap(WorldSyncToGather* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WorldSyncToGather* New() const final {
    return CreateMaybeMessage<WorldSyncToGather>(nullptr);
  }

  WorldSyncToGather* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WorldSyncToGather>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WorldSyncToGather& from);
  void MergeFrom(const WorldSyncToGather& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorldSyncToGather* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.WorldSyncToGather";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWorldSnFieldNumber = 1,
    kWorldIdFieldNumber = 2,
    kOnlineFieldNumber = 3,
  };
  // uint64 world_sn = 1;
  void clear_world_sn();
  ::PROTOBUF_NAMESPACE_ID::uint64 world_sn() const;
  void set_world_sn(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // int32 world_id = 2;
  void clear_world_id();
  ::PROTOBUF_NAMESPACE_ID::int32 world_id() const;
  void set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 online = 3;
  void clear_online();
  ::PROTOBUF_NAMESPACE_ID::int32 online() const;
  void set_online(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Proto.WorldSyncToGather)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 world_sn_;
  ::PROTOBUF_NAMESPACE_ID::int32 world_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 online_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class WorldProxySyncToGather :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.WorldProxySyncToGather) */ {
 public:
  WorldProxySyncToGather();
  virtual ~WorldProxySyncToGather();

  WorldProxySyncToGather(const WorldProxySyncToGather& from);
  WorldProxySyncToGather(WorldProxySyncToGather&& from) noexcept
    : WorldProxySyncToGather() {
    *this = ::std::move(from);
  }

  inline WorldProxySyncToGather& operator=(const WorldProxySyncToGather& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorldProxySyncToGather& operator=(WorldProxySyncToGather&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WorldProxySyncToGather& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WorldProxySyncToGather* internal_default_instance() {
    return reinterpret_cast<const WorldProxySyncToGather*>(
               &_WorldProxySyncToGather_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(WorldProxySyncToGather& a, WorldProxySyncToGather& b) {
    a.Swap(&b);
  }
  inline void Swap(WorldProxySyncToGather* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WorldProxySyncToGather* New() const final {
    return CreateMaybeMessage<WorldProxySyncToGather>(nullptr);
  }

  WorldProxySyncToGather* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WorldProxySyncToGather>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WorldProxySyncToGather& from);
  void MergeFrom(const WorldProxySyncToGather& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorldProxySyncToGather* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.WorldProxySyncToGather";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWorldSnFieldNumber = 1,
    kIsRemoveFieldNumber = 2,
    kWorldIdFieldNumber = 3,
    kOnlineFieldNumber = 4,
  };
  // uint64 world_sn = 1;
  void clear_world_sn();
  ::PROTOBUF_NAMESPACE_ID::uint64 world_sn() const;
  void set_world_sn(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // bool is_remove = 2;
  void clear_is_remove();
  bool is_remove() const;
  void set_is_remove(bool value);

  // int32 world_id = 3;
  void clear_world_id();
  ::PROTOBUF_NAMESPACE_ID::int32 world_id() const;
  void set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 online = 4;
  void clear_online();
  ::PROTOBUF_NAMESPACE_ID::int32 online() const;
  void set_online(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Proto.WorldProxySyncToGather)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 world_sn_;
  bool is_remove_;
  ::PROTOBUF_NAMESPACE_ID::int32 world_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 online_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class GameToken :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.GameToken) */ {
 public:
  GameToken();
  virtual ~GameToken();

  GameToken(const GameToken& from);
  GameToken(GameToken&& from) noexcept
    : GameToken() {
    *this = ::std::move(from);
  }

  inline GameToken& operator=(const GameToken& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameToken& operator=(GameToken&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GameToken& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameToken* internal_default_instance() {
    return reinterpret_cast<const GameToken*>(
               &_GameToken_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(GameToken& a, GameToken& b) {
    a.Swap(&b);
  }
  inline void Swap(GameToken* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameToken* New() const final {
    return CreateMaybeMessage<GameToken>(nullptr);
  }

  GameToken* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameToken>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameToken& from);
  void MergeFrom(const GameToken& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameToken* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.GameToken";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef GameToken_ReturnCode ReturnCode;
  static constexpr ReturnCode GameToken_OK =
    GameToken_ReturnCode_GameToken_OK;
  static constexpr ReturnCode GameToken_NO_GAME =
    GameToken_ReturnCode_GameToken_NO_GAME;
  static inline bool ReturnCode_IsValid(int value) {
    return GameToken_ReturnCode_IsValid(value);
  }
  static constexpr ReturnCode ReturnCode_MIN =
    GameToken_ReturnCode_ReturnCode_MIN;
  static constexpr ReturnCode ReturnCode_MAX =
    GameToken_ReturnCode_ReturnCode_MAX;
  static constexpr int ReturnCode_ARRAYSIZE =
    GameToken_ReturnCode_ReturnCode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ReturnCode_descriptor() {
    return GameToken_ReturnCode_descriptor();
  }
  template<typename T>
  static inline const std::string& ReturnCode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ReturnCode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ReturnCode_Name.");
    return GameToken_ReturnCode_Name(enum_t_value);
  }
  static inline bool ReturnCode_Parse(const std::string& name,
      ReturnCode* value) {
    return GameToken_ReturnCode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 2,
    kIpFieldNumber = 3,
    kReturnCodeFieldNumber = 1,
    kPortFieldNumber = 4,
  };
  // string token = 2;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);

  // string ip = 3;
  void clear_ip();
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);

  // .Proto.GameToken.ReturnCode return_code = 1;
  void clear_return_code();
  ::Proto::GameToken_ReturnCode return_code() const;
  void set_return_code(::Proto::GameToken_ReturnCode value);

  // int32 port = 4;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::int32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Proto.GameToken)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  int return_code_;
  ::PROTOBUF_NAMESPACE_ID::int32 port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class LoginByToken :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.LoginByToken) */ {
 public:
  LoginByToken();
  virtual ~LoginByToken();

  LoginByToken(const LoginByToken& from);
  LoginByToken(LoginByToken&& from) noexcept
    : LoginByToken() {
    *this = ::std::move(from);
  }

  inline LoginByToken& operator=(const LoginByToken& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginByToken& operator=(LoginByToken&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoginByToken& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginByToken* internal_default_instance() {
    return reinterpret_cast<const LoginByToken*>(
               &_LoginByToken_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(LoginByToken& a, LoginByToken& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginByToken* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginByToken* New() const final {
    return CreateMaybeMessage<LoginByToken>(nullptr);
  }

  LoginByToken* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginByToken>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoginByToken& from);
  void MergeFrom(const LoginByToken& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginByToken* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.LoginByToken";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 1,
    kTokenFieldNumber = 2,
  };
  // string account = 1;
  void clear_account();
  const std::string& account() const;
  void set_account(const std::string& value);
  void set_account(std::string&& value);
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  std::string* mutable_account();
  std::string* release_account();
  void set_allocated_account(std::string* account);

  // string token = 2;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);

  // @@protoc_insertion_point(class_scope:Proto.LoginByToken)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class LoginByTokenRs :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.LoginByTokenRs) */ {
 public:
  LoginByTokenRs();
  virtual ~LoginByTokenRs();

  LoginByTokenRs(const LoginByTokenRs& from);
  LoginByTokenRs(LoginByTokenRs&& from) noexcept
    : LoginByTokenRs() {
    *this = ::std::move(from);
  }

  inline LoginByTokenRs& operator=(const LoginByTokenRs& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginByTokenRs& operator=(LoginByTokenRs&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoginByTokenRs& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginByTokenRs* internal_default_instance() {
    return reinterpret_cast<const LoginByTokenRs*>(
               &_LoginByTokenRs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(LoginByTokenRs& a, LoginByTokenRs& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginByTokenRs* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginByTokenRs* New() const final {
    return CreateMaybeMessage<LoginByTokenRs>(nullptr);
  }

  LoginByTokenRs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginByTokenRs>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoginByTokenRs& from);
  void MergeFrom(const LoginByTokenRs& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginByTokenRs* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.LoginByTokenRs";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef LoginByTokenRs_ReturnCode ReturnCode;
  static constexpr ReturnCode LGRC_OK =
    LoginByTokenRs_ReturnCode_LGRC_OK;
  static constexpr ReturnCode LGRC_UNKONWN =
    LoginByTokenRs_ReturnCode_LGRC_UNKONWN;
  static constexpr ReturnCode LGRC_NOT_FOUND_ACCOUNT =
    LoginByTokenRs_ReturnCode_LGRC_NOT_FOUND_ACCOUNT;
  static constexpr ReturnCode LGRC_TOKEN_WRONG =
    LoginByTokenRs_ReturnCode_LGRC_TOKEN_WRONG;
  static inline bool ReturnCode_IsValid(int value) {
    return LoginByTokenRs_ReturnCode_IsValid(value);
  }
  static constexpr ReturnCode ReturnCode_MIN =
    LoginByTokenRs_ReturnCode_ReturnCode_MIN;
  static constexpr ReturnCode ReturnCode_MAX =
    LoginByTokenRs_ReturnCode_ReturnCode_MAX;
  static constexpr int ReturnCode_ARRAYSIZE =
    LoginByTokenRs_ReturnCode_ReturnCode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ReturnCode_descriptor() {
    return LoginByTokenRs_ReturnCode_descriptor();
  }
  template<typename T>
  static inline const std::string& ReturnCode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ReturnCode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ReturnCode_Name.");
    return LoginByTokenRs_ReturnCode_Name(enum_t_value);
  }
  static inline bool ReturnCode_Parse(const std::string& name,
      ReturnCode* value) {
    return LoginByTokenRs_ReturnCode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kReturnCodeFieldNumber = 1,
  };
  // .Proto.LoginByTokenRs.ReturnCode return_code = 1;
  void clear_return_code();
  ::Proto::LoginByTokenRs_ReturnCode return_code() const;
  void set_return_code(::Proto::LoginByTokenRs_ReturnCode value);

  // @@protoc_insertion_point(class_scope:Proto.LoginByTokenRs)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int return_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class LoginTokenToRedis :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.LoginTokenToRedis) */ {
 public:
  LoginTokenToRedis();
  virtual ~LoginTokenToRedis();

  LoginTokenToRedis(const LoginTokenToRedis& from);
  LoginTokenToRedis(LoginTokenToRedis&& from) noexcept
    : LoginTokenToRedis() {
    *this = ::std::move(from);
  }

  inline LoginTokenToRedis& operator=(const LoginTokenToRedis& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginTokenToRedis& operator=(LoginTokenToRedis&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoginTokenToRedis& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginTokenToRedis* internal_default_instance() {
    return reinterpret_cast<const LoginTokenToRedis*>(
               &_LoginTokenToRedis_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(LoginTokenToRedis& a, LoginTokenToRedis& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginTokenToRedis* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginTokenToRedis* New() const final {
    return CreateMaybeMessage<LoginTokenToRedis>(nullptr);
  }

  LoginTokenToRedis* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginTokenToRedis>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoginTokenToRedis& from);
  void MergeFrom(const LoginTokenToRedis& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginTokenToRedis* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.LoginTokenToRedis";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 1,
    kPlayerSnFieldNumber = 2,
  };
  // string account = 1;
  void clear_account();
  const std::string& account() const;
  void set_account(const std::string& value);
  void set_account(std::string&& value);
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  std::string* mutable_account();
  std::string* release_account();
  void set_allocated_account(std::string* account);

  // uint64 player_sn = 2;
  void clear_player_sn();
  ::PROTOBUF_NAMESPACE_ID::uint64 player_sn() const;
  void set_player_sn(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:Proto.LoginTokenToRedis)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  ::PROTOBUF_NAMESPACE_ID::uint64 player_sn_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class LoginTokenToRedisRs :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.LoginTokenToRedisRs) */ {
 public:
  LoginTokenToRedisRs();
  virtual ~LoginTokenToRedisRs();

  LoginTokenToRedisRs(const LoginTokenToRedisRs& from);
  LoginTokenToRedisRs(LoginTokenToRedisRs&& from) noexcept
    : LoginTokenToRedisRs() {
    *this = ::std::move(from);
  }

  inline LoginTokenToRedisRs& operator=(const LoginTokenToRedisRs& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginTokenToRedisRs& operator=(LoginTokenToRedisRs&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoginTokenToRedisRs& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginTokenToRedisRs* internal_default_instance() {
    return reinterpret_cast<const LoginTokenToRedisRs*>(
               &_LoginTokenToRedisRs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(LoginTokenToRedisRs& a, LoginTokenToRedisRs& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginTokenToRedisRs* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginTokenToRedisRs* New() const final {
    return CreateMaybeMessage<LoginTokenToRedisRs>(nullptr);
  }

  LoginTokenToRedisRs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginTokenToRedisRs>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoginTokenToRedisRs& from);
  void MergeFrom(const LoginTokenToRedisRs& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginTokenToRedisRs* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.LoginTokenToRedisRs";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 1,
    kTokenFieldNumber = 2,
  };
  // string account = 1;
  void clear_account();
  const std::string& account() const;
  void set_account(const std::string& value);
  void set_account(std::string&& value);
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  std::string* mutable_account();
  std::string* release_account();
  void set_allocated_account(std::string* account);

  // string token = 2;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);

  // @@protoc_insertion_point(class_scope:Proto.LoginTokenToRedisRs)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class AccountQueryOnlineToRedis :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.AccountQueryOnlineToRedis) */ {
 public:
  AccountQueryOnlineToRedis();
  virtual ~AccountQueryOnlineToRedis();

  AccountQueryOnlineToRedis(const AccountQueryOnlineToRedis& from);
  AccountQueryOnlineToRedis(AccountQueryOnlineToRedis&& from) noexcept
    : AccountQueryOnlineToRedis() {
    *this = ::std::move(from);
  }

  inline AccountQueryOnlineToRedis& operator=(const AccountQueryOnlineToRedis& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccountQueryOnlineToRedis& operator=(AccountQueryOnlineToRedis&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AccountQueryOnlineToRedis& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AccountQueryOnlineToRedis* internal_default_instance() {
    return reinterpret_cast<const AccountQueryOnlineToRedis*>(
               &_AccountQueryOnlineToRedis_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(AccountQueryOnlineToRedis& a, AccountQueryOnlineToRedis& b) {
    a.Swap(&b);
  }
  inline void Swap(AccountQueryOnlineToRedis* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AccountQueryOnlineToRedis* New() const final {
    return CreateMaybeMessage<AccountQueryOnlineToRedis>(nullptr);
  }

  AccountQueryOnlineToRedis* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AccountQueryOnlineToRedis>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AccountQueryOnlineToRedis& from);
  void MergeFrom(const AccountQueryOnlineToRedis& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccountQueryOnlineToRedis* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.AccountQueryOnlineToRedis";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 1,
  };
  // string account = 1;
  void clear_account();
  const std::string& account() const;
  void set_account(const std::string& value);
  void set_account(std::string&& value);
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  std::string* mutable_account();
  std::string* release_account();
  void set_allocated_account(std::string* account);

  // @@protoc_insertion_point(class_scope:Proto.AccountQueryOnlineToRedis)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class AccountQueryOnlineToRedisRs :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.AccountQueryOnlineToRedisRs) */ {
 public:
  AccountQueryOnlineToRedisRs();
  virtual ~AccountQueryOnlineToRedisRs();

  AccountQueryOnlineToRedisRs(const AccountQueryOnlineToRedisRs& from);
  AccountQueryOnlineToRedisRs(AccountQueryOnlineToRedisRs&& from) noexcept
    : AccountQueryOnlineToRedisRs() {
    *this = ::std::move(from);
  }

  inline AccountQueryOnlineToRedisRs& operator=(const AccountQueryOnlineToRedisRs& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccountQueryOnlineToRedisRs& operator=(AccountQueryOnlineToRedisRs&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AccountQueryOnlineToRedisRs& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AccountQueryOnlineToRedisRs* internal_default_instance() {
    return reinterpret_cast<const AccountQueryOnlineToRedisRs*>(
               &_AccountQueryOnlineToRedisRs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(AccountQueryOnlineToRedisRs& a, AccountQueryOnlineToRedisRs& b) {
    a.Swap(&b);
  }
  inline void Swap(AccountQueryOnlineToRedisRs* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AccountQueryOnlineToRedisRs* New() const final {
    return CreateMaybeMessage<AccountQueryOnlineToRedisRs>(nullptr);
  }

  AccountQueryOnlineToRedisRs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AccountQueryOnlineToRedisRs>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AccountQueryOnlineToRedisRs& from);
  void MergeFrom(const AccountQueryOnlineToRedisRs& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccountQueryOnlineToRedisRs* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.AccountQueryOnlineToRedisRs";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef AccountQueryOnlineToRedisRs_ReturnCode ReturnCode;
  static constexpr ReturnCode SOTR_Offline =
    AccountQueryOnlineToRedisRs_ReturnCode_SOTR_Offline;
  static constexpr ReturnCode SOTR_Online =
    AccountQueryOnlineToRedisRs_ReturnCode_SOTR_Online;
  static inline bool ReturnCode_IsValid(int value) {
    return AccountQueryOnlineToRedisRs_ReturnCode_IsValid(value);
  }
  static constexpr ReturnCode ReturnCode_MIN =
    AccountQueryOnlineToRedisRs_ReturnCode_ReturnCode_MIN;
  static constexpr ReturnCode ReturnCode_MAX =
    AccountQueryOnlineToRedisRs_ReturnCode_ReturnCode_MAX;
  static constexpr int ReturnCode_ARRAYSIZE =
    AccountQueryOnlineToRedisRs_ReturnCode_ReturnCode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ReturnCode_descriptor() {
    return AccountQueryOnlineToRedisRs_ReturnCode_descriptor();
  }
  template<typename T>
  static inline const std::string& ReturnCode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ReturnCode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ReturnCode_Name.");
    return AccountQueryOnlineToRedisRs_ReturnCode_Name(enum_t_value);
  }
  static inline bool ReturnCode_Parse(const std::string& name,
      ReturnCode* value) {
    return AccountQueryOnlineToRedisRs_ReturnCode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 1,
    kReturnCodeFieldNumber = 2,
  };
  // string account = 1;
  void clear_account();
  const std::string& account() const;
  void set_account(const std::string& value);
  void set_account(std::string&& value);
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  std::string* mutable_account();
  std::string* release_account();
  void set_allocated_account(std::string* account);

  // .Proto.AccountQueryOnlineToRedisRs.ReturnCode return_code = 2;
  void clear_return_code();
  ::Proto::AccountQueryOnlineToRedisRs_ReturnCode return_code() const;
  void set_return_code(::Proto::AccountQueryOnlineToRedisRs_ReturnCode value);

  // @@protoc_insertion_point(class_scope:Proto.AccountQueryOnlineToRedisRs)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  int return_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class AccountSyncOnlineToRedis :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.AccountSyncOnlineToRedis) */ {
 public:
  AccountSyncOnlineToRedis();
  virtual ~AccountSyncOnlineToRedis();

  AccountSyncOnlineToRedis(const AccountSyncOnlineToRedis& from);
  AccountSyncOnlineToRedis(AccountSyncOnlineToRedis&& from) noexcept
    : AccountSyncOnlineToRedis() {
    *this = ::std::move(from);
  }

  inline AccountSyncOnlineToRedis& operator=(const AccountSyncOnlineToRedis& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccountSyncOnlineToRedis& operator=(AccountSyncOnlineToRedis&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AccountSyncOnlineToRedis& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AccountSyncOnlineToRedis* internal_default_instance() {
    return reinterpret_cast<const AccountSyncOnlineToRedis*>(
               &_AccountSyncOnlineToRedis_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(AccountSyncOnlineToRedis& a, AccountSyncOnlineToRedis& b) {
    a.Swap(&b);
  }
  inline void Swap(AccountSyncOnlineToRedis* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AccountSyncOnlineToRedis* New() const final {
    return CreateMaybeMessage<AccountSyncOnlineToRedis>(nullptr);
  }

  AccountSyncOnlineToRedis* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AccountSyncOnlineToRedis>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AccountSyncOnlineToRedis& from);
  void MergeFrom(const AccountSyncOnlineToRedis& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccountSyncOnlineToRedis* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.AccountSyncOnlineToRedis";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 1,
  };
  // string account = 1;
  void clear_account();
  const std::string& account() const;
  void set_account(const std::string& value);
  void set_account(std::string&& value);
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  std::string* mutable_account();
  std::string* release_account();
  void set_allocated_account(std::string* account);

  // @@protoc_insertion_point(class_scope:Proto.AccountSyncOnlineToRedis)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class AccountDeleteOnlineToRedis :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.AccountDeleteOnlineToRedis) */ {
 public:
  AccountDeleteOnlineToRedis();
  virtual ~AccountDeleteOnlineToRedis();

  AccountDeleteOnlineToRedis(const AccountDeleteOnlineToRedis& from);
  AccountDeleteOnlineToRedis(AccountDeleteOnlineToRedis&& from) noexcept
    : AccountDeleteOnlineToRedis() {
    *this = ::std::move(from);
  }

  inline AccountDeleteOnlineToRedis& operator=(const AccountDeleteOnlineToRedis& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccountDeleteOnlineToRedis& operator=(AccountDeleteOnlineToRedis&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AccountDeleteOnlineToRedis& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AccountDeleteOnlineToRedis* internal_default_instance() {
    return reinterpret_cast<const AccountDeleteOnlineToRedis*>(
               &_AccountDeleteOnlineToRedis_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(AccountDeleteOnlineToRedis& a, AccountDeleteOnlineToRedis& b) {
    a.Swap(&b);
  }
  inline void Swap(AccountDeleteOnlineToRedis* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AccountDeleteOnlineToRedis* New() const final {
    return CreateMaybeMessage<AccountDeleteOnlineToRedis>(nullptr);
  }

  AccountDeleteOnlineToRedis* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AccountDeleteOnlineToRedis>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AccountDeleteOnlineToRedis& from);
  void MergeFrom(const AccountDeleteOnlineToRedis& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccountDeleteOnlineToRedis* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.AccountDeleteOnlineToRedis";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 1,
  };
  // string account = 1;
  void clear_account();
  const std::string& account() const;
  void set_account(const std::string& value);
  void set_account(std::string&& value);
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  std::string* mutable_account();
  std::string* release_account();
  void set_allocated_account(std::string* account);

  // @@protoc_insertion_point(class_scope:Proto.AccountDeleteOnlineToRedis)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class PlayerSyncOnlineToRedis :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.PlayerSyncOnlineToRedis) */ {
 public:
  PlayerSyncOnlineToRedis();
  virtual ~PlayerSyncOnlineToRedis();

  PlayerSyncOnlineToRedis(const PlayerSyncOnlineToRedis& from);
  PlayerSyncOnlineToRedis(PlayerSyncOnlineToRedis&& from) noexcept
    : PlayerSyncOnlineToRedis() {
    *this = ::std::move(from);
  }

  inline PlayerSyncOnlineToRedis& operator=(const PlayerSyncOnlineToRedis& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerSyncOnlineToRedis& operator=(PlayerSyncOnlineToRedis&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlayerSyncOnlineToRedis& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerSyncOnlineToRedis* internal_default_instance() {
    return reinterpret_cast<const PlayerSyncOnlineToRedis*>(
               &_PlayerSyncOnlineToRedis_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(PlayerSyncOnlineToRedis& a, PlayerSyncOnlineToRedis& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerSyncOnlineToRedis* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlayerSyncOnlineToRedis* New() const final {
    return CreateMaybeMessage<PlayerSyncOnlineToRedis>(nullptr);
  }

  PlayerSyncOnlineToRedis* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayerSyncOnlineToRedis>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlayerSyncOnlineToRedis& from);
  void MergeFrom(const PlayerSyncOnlineToRedis& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerSyncOnlineToRedis* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.PlayerSyncOnlineToRedis";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 1,
    kVersionFieldNumber = 2,
  };
  // string account = 1;
  void clear_account();
  const std::string& account() const;
  void set_account(const std::string& value);
  void set_account(std::string&& value);
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  std::string* mutable_account();
  std::string* release_account();
  void set_allocated_account(std::string* account);

  // int32 version = 2;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::int32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Proto.PlayerSyncOnlineToRedis)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  ::PROTOBUF_NAMESPACE_ID::int32 version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class PlayerDeleteOnlineToRedis :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.PlayerDeleteOnlineToRedis) */ {
 public:
  PlayerDeleteOnlineToRedis();
  virtual ~PlayerDeleteOnlineToRedis();

  PlayerDeleteOnlineToRedis(const PlayerDeleteOnlineToRedis& from);
  PlayerDeleteOnlineToRedis(PlayerDeleteOnlineToRedis&& from) noexcept
    : PlayerDeleteOnlineToRedis() {
    *this = ::std::move(from);
  }

  inline PlayerDeleteOnlineToRedis& operator=(const PlayerDeleteOnlineToRedis& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerDeleteOnlineToRedis& operator=(PlayerDeleteOnlineToRedis&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlayerDeleteOnlineToRedis& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerDeleteOnlineToRedis* internal_default_instance() {
    return reinterpret_cast<const PlayerDeleteOnlineToRedis*>(
               &_PlayerDeleteOnlineToRedis_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(PlayerDeleteOnlineToRedis& a, PlayerDeleteOnlineToRedis& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerDeleteOnlineToRedis* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlayerDeleteOnlineToRedis* New() const final {
    return CreateMaybeMessage<PlayerDeleteOnlineToRedis>(nullptr);
  }

  PlayerDeleteOnlineToRedis* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayerDeleteOnlineToRedis>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlayerDeleteOnlineToRedis& from);
  void MergeFrom(const PlayerDeleteOnlineToRedis& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerDeleteOnlineToRedis* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.PlayerDeleteOnlineToRedis";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 1,
    kVersionFieldNumber = 2,
  };
  // string account = 1;
  void clear_account();
  const std::string& account() const;
  void set_account(const std::string& value);
  void set_account(std::string&& value);
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  std::string* mutable_account();
  std::string* release_account();
  void set_allocated_account(std::string* account);

  // int32 version = 2;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::int32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Proto.PlayerDeleteOnlineToRedis)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  ::PROTOBUF_NAMESPACE_ID::int32 version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class GameTokenToRedis :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.GameTokenToRedis) */ {
 public:
  GameTokenToRedis();
  virtual ~GameTokenToRedis();

  GameTokenToRedis(const GameTokenToRedis& from);
  GameTokenToRedis(GameTokenToRedis&& from) noexcept
    : GameTokenToRedis() {
    *this = ::std::move(from);
  }

  inline GameTokenToRedis& operator=(const GameTokenToRedis& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameTokenToRedis& operator=(GameTokenToRedis&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GameTokenToRedis& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameTokenToRedis* internal_default_instance() {
    return reinterpret_cast<const GameTokenToRedis*>(
               &_GameTokenToRedis_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(GameTokenToRedis& a, GameTokenToRedis& b) {
    a.Swap(&b);
  }
  inline void Swap(GameTokenToRedis* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameTokenToRedis* New() const final {
    return CreateMaybeMessage<GameTokenToRedis>(nullptr);
  }

  GameTokenToRedis* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameTokenToRedis>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameTokenToRedis& from);
  void MergeFrom(const GameTokenToRedis& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameTokenToRedis* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.GameTokenToRedis";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 1,
  };
  // string account = 1;
  void clear_account();
  const std::string& account() const;
  void set_account(const std::string& value);
  void set_account(std::string&& value);
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  std::string* mutable_account();
  std::string* release_account();
  void set_allocated_account(std::string* account);

  // @@protoc_insertion_point(class_scope:Proto.GameTokenToRedis)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class TokenInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.TokenInfo) */ {
 public:
  TokenInfo();
  virtual ~TokenInfo();

  TokenInfo(const TokenInfo& from);
  TokenInfo(TokenInfo&& from) noexcept
    : TokenInfo() {
    *this = ::std::move(from);
  }

  inline TokenInfo& operator=(const TokenInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline TokenInfo& operator=(TokenInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TokenInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TokenInfo* internal_default_instance() {
    return reinterpret_cast<const TokenInfo*>(
               &_TokenInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(TokenInfo& a, TokenInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(TokenInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TokenInfo* New() const final {
    return CreateMaybeMessage<TokenInfo>(nullptr);
  }

  TokenInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TokenInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TokenInfo& from);
  void MergeFrom(const TokenInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TokenInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.TokenInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
    kPlayerSnFieldNumber = 2,
  };
  // string token = 1;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);

  // uint64 player_sn = 2;
  void clear_player_sn();
  ::PROTOBUF_NAMESPACE_ID::uint64 player_sn() const;
  void set_player_sn(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:Proto.TokenInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::uint64 player_sn_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class GameTokenToRedisRs :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.GameTokenToRedisRs) */ {
 public:
  GameTokenToRedisRs();
  virtual ~GameTokenToRedisRs();

  GameTokenToRedisRs(const GameTokenToRedisRs& from);
  GameTokenToRedisRs(GameTokenToRedisRs&& from) noexcept
    : GameTokenToRedisRs() {
    *this = ::std::move(from);
  }

  inline GameTokenToRedisRs& operator=(const GameTokenToRedisRs& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameTokenToRedisRs& operator=(GameTokenToRedisRs&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GameTokenToRedisRs& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameTokenToRedisRs* internal_default_instance() {
    return reinterpret_cast<const GameTokenToRedisRs*>(
               &_GameTokenToRedisRs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(GameTokenToRedisRs& a, GameTokenToRedisRs& b) {
    a.Swap(&b);
  }
  inline void Swap(GameTokenToRedisRs* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameTokenToRedisRs* New() const final {
    return CreateMaybeMessage<GameTokenToRedisRs>(nullptr);
  }

  GameTokenToRedisRs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameTokenToRedisRs>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameTokenToRedisRs& from);
  void MergeFrom(const GameTokenToRedisRs& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameTokenToRedisRs* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.GameTokenToRedisRs";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 1,
    kTokenInfoFieldNumber = 2,
  };
  // string account = 1;
  void clear_account();
  const std::string& account() const;
  void set_account(const std::string& value);
  void set_account(std::string&& value);
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  std::string* mutable_account();
  std::string* release_account();
  void set_allocated_account(std::string* account);

  // .Proto.TokenInfo token_info = 2;
  bool has_token_info() const;
  void clear_token_info();
  const ::Proto::TokenInfo& token_info() const;
  ::Proto::TokenInfo* release_token_info();
  ::Proto::TokenInfo* mutable_token_info();
  void set_allocated_token_info(::Proto::TokenInfo* token_info);

  // @@protoc_insertion_point(class_scope:Proto.GameTokenToRedisRs)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  ::Proto::TokenInfo* token_info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class SyncPlayer :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.SyncPlayer) */ {
 public:
  SyncPlayer();
  virtual ~SyncPlayer();

  SyncPlayer(const SyncPlayer& from);
  SyncPlayer(SyncPlayer&& from) noexcept
    : SyncPlayer() {
    *this = ::std::move(from);
  }

  inline SyncPlayer& operator=(const SyncPlayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncPlayer& operator=(SyncPlayer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SyncPlayer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SyncPlayer* internal_default_instance() {
    return reinterpret_cast<const SyncPlayer*>(
               &_SyncPlayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(SyncPlayer& a, SyncPlayer& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncPlayer* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SyncPlayer* New() const final {
    return CreateMaybeMessage<SyncPlayer>(nullptr);
  }

  SyncPlayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SyncPlayer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SyncPlayer& from);
  void MergeFrom(const SyncPlayer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncPlayer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.SyncPlayer";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 2,
    kPlayerFieldNumber = 3,
    kAppIdFieldNumber = 1,
  };
  // string account = 2;
  void clear_account();
  const std::string& account() const;
  void set_account(const std::string& value);
  void set_account(std::string&& value);
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  std::string* mutable_account();
  std::string* release_account();
  void set_allocated_account(std::string* account);

  // .Proto.Player player = 3;
  bool has_player() const;
  void clear_player();
  const ::Proto::Player& player() const;
  ::Proto::Player* release_player();
  ::Proto::Player* mutable_player();
  void set_allocated_player(::Proto::Player* player);

  // int32 app_id = 1;
  void clear_app_id();
  ::PROTOBUF_NAMESPACE_ID::int32 app_id() const;
  void set_app_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Proto.SyncPlayer)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  ::Proto::Player* player_;
  ::PROTOBUF_NAMESPACE_ID::int32 app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class EnterWorld :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.EnterWorld) */ {
 public:
  EnterWorld();
  virtual ~EnterWorld();

  EnterWorld(const EnterWorld& from);
  EnterWorld(EnterWorld&& from) noexcept
    : EnterWorld() {
    *this = ::std::move(from);
  }

  inline EnterWorld& operator=(const EnterWorld& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnterWorld& operator=(EnterWorld&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EnterWorld& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EnterWorld* internal_default_instance() {
    return reinterpret_cast<const EnterWorld*>(
               &_EnterWorld_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(EnterWorld& a, EnterWorld& b) {
    a.Swap(&b);
  }
  inline void Swap(EnterWorld* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EnterWorld* New() const final {
    return CreateMaybeMessage<EnterWorld>(nullptr);
  }

  EnterWorld* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EnterWorld>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EnterWorld& from);
  void MergeFrom(const EnterWorld& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnterWorld* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.EnterWorld";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 2,
    kWorldIdFieldNumber = 1,
  };
  // .Proto.Vector3D position = 2;
  bool has_position() const;
  void clear_position();
  const ::Proto::Vector3D& position() const;
  ::Proto::Vector3D* release_position();
  ::Proto::Vector3D* mutable_position();
  void set_allocated_position(::Proto::Vector3D* position);

  // int32 world_id = 1;
  void clear_world_id();
  ::PROTOBUF_NAMESPACE_ID::int32 world_id() const;
  void set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Proto.EnterWorld)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::Proto::Vector3D* position_;
  ::PROTOBUF_NAMESPACE_ID::int32 world_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class RequestWorld :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.RequestWorld) */ {
 public:
  RequestWorld();
  virtual ~RequestWorld();

  RequestWorld(const RequestWorld& from);
  RequestWorld(RequestWorld&& from) noexcept
    : RequestWorld() {
    *this = ::std::move(from);
  }

  inline RequestWorld& operator=(const RequestWorld& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestWorld& operator=(RequestWorld&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RequestWorld& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RequestWorld* internal_default_instance() {
    return reinterpret_cast<const RequestWorld*>(
               &_RequestWorld_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(RequestWorld& a, RequestWorld& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestWorld* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RequestWorld* New() const final {
    return CreateMaybeMessage<RequestWorld>(nullptr);
  }

  RequestWorld* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestWorld>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RequestWorld& from);
  void MergeFrom(const RequestWorld& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestWorld* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.RequestWorld";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWorldIdFieldNumber = 1,
  };
  // int32 world_id = 1;
  void clear_world_id();
  ::PROTOBUF_NAMESPACE_ID::int32 world_id() const;
  void set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Proto.RequestWorld)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 world_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class CreateWorld :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.CreateWorld) */ {
 public:
  CreateWorld();
  virtual ~CreateWorld();

  CreateWorld(const CreateWorld& from);
  CreateWorld(CreateWorld&& from) noexcept
    : CreateWorld() {
    *this = ::std::move(from);
  }

  inline CreateWorld& operator=(const CreateWorld& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateWorld& operator=(CreateWorld&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateWorld& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateWorld* internal_default_instance() {
    return reinterpret_cast<const CreateWorld*>(
               &_CreateWorld_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(CreateWorld& a, CreateWorld& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateWorld* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateWorld* New() const final {
    return CreateMaybeMessage<CreateWorld>(nullptr);
  }

  CreateWorld* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateWorld>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateWorld& from);
  void MergeFrom(const CreateWorld& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateWorld* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.CreateWorld";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLastWorldSnFieldNumber = 2,
    kWorldIdFieldNumber = 1,
    kGameAppIdFieldNumber = 3,
  };
  // uint64 last_world_sn = 2;
  void clear_last_world_sn();
  ::PROTOBUF_NAMESPACE_ID::uint64 last_world_sn() const;
  void set_last_world_sn(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // int32 world_id = 1;
  void clear_world_id();
  ::PROTOBUF_NAMESPACE_ID::int32 world_id() const;
  void set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 game_app_id = 3;
  void clear_game_app_id();
  ::PROTOBUF_NAMESPACE_ID::int32 game_app_id() const;
  void set_game_app_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Proto.CreateWorld)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 last_world_sn_;
  ::PROTOBUF_NAMESPACE_ID::int32 world_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 game_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class BroadcastCreateWorld :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.BroadcastCreateWorld) */ {
 public:
  BroadcastCreateWorld();
  virtual ~BroadcastCreateWorld();

  BroadcastCreateWorld(const BroadcastCreateWorld& from);
  BroadcastCreateWorld(BroadcastCreateWorld&& from) noexcept
    : BroadcastCreateWorld() {
    *this = ::std::move(from);
  }

  inline BroadcastCreateWorld& operator=(const BroadcastCreateWorld& from) {
    CopyFrom(from);
    return *this;
  }
  inline BroadcastCreateWorld& operator=(BroadcastCreateWorld&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BroadcastCreateWorld& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BroadcastCreateWorld* internal_default_instance() {
    return reinterpret_cast<const BroadcastCreateWorld*>(
               &_BroadcastCreateWorld_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(BroadcastCreateWorld& a, BroadcastCreateWorld& b) {
    a.Swap(&b);
  }
  inline void Swap(BroadcastCreateWorld* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BroadcastCreateWorld* New() const final {
    return CreateMaybeMessage<BroadcastCreateWorld>(nullptr);
  }

  BroadcastCreateWorld* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BroadcastCreateWorld>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BroadcastCreateWorld& from);
  void MergeFrom(const BroadcastCreateWorld& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BroadcastCreateWorld* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.BroadcastCreateWorld";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWorldSnFieldNumber = 2,
    kLastWorldSnFieldNumber = 3,
    kWorldIdFieldNumber = 1,
  };
  // uint64 world_sn = 2;
  void clear_world_sn();
  ::PROTOBUF_NAMESPACE_ID::uint64 world_sn() const;
  void set_world_sn(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 last_world_sn = 3;
  void clear_last_world_sn();
  ::PROTOBUF_NAMESPACE_ID::uint64 last_world_sn() const;
  void set_last_world_sn(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // int32 world_id = 1;
  void clear_world_id();
  ::PROTOBUF_NAMESPACE_ID::int32 world_id() const;
  void set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Proto.BroadcastCreateWorld)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 world_sn_;
  ::PROTOBUF_NAMESPACE_ID::uint64 last_world_sn_;
  ::PROTOBUF_NAMESPACE_ID::int32 world_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class BroadcastCreateWorldProxy :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.BroadcastCreateWorldProxy) */ {
 public:
  BroadcastCreateWorldProxy();
  virtual ~BroadcastCreateWorldProxy();

  BroadcastCreateWorldProxy(const BroadcastCreateWorldProxy& from);
  BroadcastCreateWorldProxy(BroadcastCreateWorldProxy&& from) noexcept
    : BroadcastCreateWorldProxy() {
    *this = ::std::move(from);
  }

  inline BroadcastCreateWorldProxy& operator=(const BroadcastCreateWorldProxy& from) {
    CopyFrom(from);
    return *this;
  }
  inline BroadcastCreateWorldProxy& operator=(BroadcastCreateWorldProxy&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BroadcastCreateWorldProxy& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BroadcastCreateWorldProxy* internal_default_instance() {
    return reinterpret_cast<const BroadcastCreateWorldProxy*>(
               &_BroadcastCreateWorldProxy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(BroadcastCreateWorldProxy& a, BroadcastCreateWorldProxy& b) {
    a.Swap(&b);
  }
  inline void Swap(BroadcastCreateWorldProxy* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BroadcastCreateWorldProxy* New() const final {
    return CreateMaybeMessage<BroadcastCreateWorldProxy>(nullptr);
  }

  BroadcastCreateWorldProxy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BroadcastCreateWorldProxy>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BroadcastCreateWorldProxy& from);
  void MergeFrom(const BroadcastCreateWorldProxy& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BroadcastCreateWorldProxy* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.BroadcastCreateWorldProxy";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWorldSnFieldNumber = 2,
    kWorldIdFieldNumber = 1,
  };
  // uint64 world_sn = 2;
  void clear_world_sn();
  ::PROTOBUF_NAMESPACE_ID::uint64 world_sn() const;
  void set_world_sn(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // int32 world_id = 1;
  void clear_world_id();
  ::PROTOBUF_NAMESPACE_ID::int32 world_id() const;
  void set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Proto.BroadcastCreateWorldProxy)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 world_sn_;
  ::PROTOBUF_NAMESPACE_ID::int32 world_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class QueryWorld :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.QueryWorld) */ {
 public:
  QueryWorld();
  virtual ~QueryWorld();

  QueryWorld(const QueryWorld& from);
  QueryWorld(QueryWorld&& from) noexcept
    : QueryWorld() {
    *this = ::std::move(from);
  }

  inline QueryWorld& operator=(const QueryWorld& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryWorld& operator=(QueryWorld&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QueryWorld& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryWorld* internal_default_instance() {
    return reinterpret_cast<const QueryWorld*>(
               &_QueryWorld_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(QueryWorld& a, QueryWorld& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryWorld* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QueryWorld* New() const final {
    return CreateMaybeMessage<QueryWorld>(nullptr);
  }

  QueryWorld* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueryWorld>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QueryWorld& from);
  void MergeFrom(const QueryWorld& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryWorld* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.QueryWorld";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWorldSnFieldNumber = 1,
    kLastWorldSnFieldNumber = 2,
  };
  // uint64 world_sn = 1;
  void clear_world_sn();
  ::PROTOBUF_NAMESPACE_ID::uint64 world_sn() const;
  void set_world_sn(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 last_world_sn = 2;
  void clear_last_world_sn();
  ::PROTOBUF_NAMESPACE_ID::uint64 last_world_sn() const;
  void set_last_world_sn(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:Proto.QueryWorld)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 world_sn_;
  ::PROTOBUF_NAMESPACE_ID::uint64 last_world_sn_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class QueryWorldRs :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.QueryWorldRs) */ {
 public:
  QueryWorldRs();
  virtual ~QueryWorldRs();

  QueryWorldRs(const QueryWorldRs& from);
  QueryWorldRs(QueryWorldRs&& from) noexcept
    : QueryWorldRs() {
    *this = ::std::move(from);
  }

  inline QueryWorldRs& operator=(const QueryWorldRs& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryWorldRs& operator=(QueryWorldRs&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QueryWorldRs& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryWorldRs* internal_default_instance() {
    return reinterpret_cast<const QueryWorldRs*>(
               &_QueryWorldRs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(QueryWorldRs& a, QueryWorldRs& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryWorldRs* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QueryWorldRs* New() const final {
    return CreateMaybeMessage<QueryWorldRs>(nullptr);
  }

  QueryWorldRs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueryWorldRs>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QueryWorldRs& from);
  void MergeFrom(const QueryWorldRs& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryWorldRs* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.QueryWorldRs";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef QueryWorldRs_ReturnCode ReturnCode;
  static constexpr ReturnCode QueryWorld_OK =
    QueryWorldRs_ReturnCode_QueryWorld_OK;
  static constexpr ReturnCode QueryWorld_Failed =
    QueryWorldRs_ReturnCode_QueryWorld_Failed;
  static inline bool ReturnCode_IsValid(int value) {
    return QueryWorldRs_ReturnCode_IsValid(value);
  }
  static constexpr ReturnCode ReturnCode_MIN =
    QueryWorldRs_ReturnCode_ReturnCode_MIN;
  static constexpr ReturnCode ReturnCode_MAX =
    QueryWorldRs_ReturnCode_ReturnCode_MAX;
  static constexpr int ReturnCode_ARRAYSIZE =
    QueryWorldRs_ReturnCode_ReturnCode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ReturnCode_descriptor() {
    return QueryWorldRs_ReturnCode_descriptor();
  }
  template<typename T>
  static inline const std::string& ReturnCode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ReturnCode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ReturnCode_Name.");
    return QueryWorldRs_ReturnCode_Name(enum_t_value);
  }
  static inline bool ReturnCode_Parse(const std::string& name,
      ReturnCode* value) {
    return QueryWorldRs_ReturnCode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kWorldSnFieldNumber = 1,
    kReturnCodeFieldNumber = 2,
  };
  // uint64 world_sn = 1;
  void clear_world_sn();
  ::PROTOBUF_NAMESPACE_ID::uint64 world_sn() const;
  void set_world_sn(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // .Proto.QueryWorldRs.ReturnCode return_code = 2;
  void clear_return_code();
  ::Proto::QueryWorldRs_ReturnCode return_code() const;
  void set_return_code(::Proto::QueryWorldRs_ReturnCode value);

  // @@protoc_insertion_point(class_scope:Proto.QueryWorldRs)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 world_sn_;
  int return_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class Teleport :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.Teleport) */ {
 public:
  Teleport();
  virtual ~Teleport();

  Teleport(const Teleport& from);
  Teleport(Teleport&& from) noexcept
    : Teleport() {
    *this = ::std::move(from);
  }

  inline Teleport& operator=(const Teleport& from) {
    CopyFrom(from);
    return *this;
  }
  inline Teleport& operator=(Teleport&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Teleport& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Teleport* internal_default_instance() {
    return reinterpret_cast<const Teleport*>(
               &_Teleport_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(Teleport& a, Teleport& b) {
    a.Swap(&b);
  }
  inline void Swap(Teleport* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Teleport* New() const final {
    return CreateMaybeMessage<Teleport>(nullptr);
  }

  Teleport* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Teleport>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Teleport& from);
  void MergeFrom(const Teleport& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Teleport* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.Teleport";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 3,
    kPlayerFieldNumber = 4,
    kLastWorldSnFieldNumber = 1,
    kPlayerSnFieldNumber = 2,
  };
  // string account = 3;
  void clear_account();
  const std::string& account() const;
  void set_account(const std::string& value);
  void set_account(std::string&& value);
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  std::string* mutable_account();
  std::string* release_account();
  void set_allocated_account(std::string* account);

  // .Proto.Player player = 4;
  bool has_player() const;
  void clear_player();
  const ::Proto::Player& player() const;
  ::Proto::Player* release_player();
  ::Proto::Player* mutable_player();
  void set_allocated_player(::Proto::Player* player);

  // uint64 last_world_sn = 1;
  void clear_last_world_sn();
  ::PROTOBUF_NAMESPACE_ID::uint64 last_world_sn() const;
  void set_last_world_sn(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 player_sn = 2;
  void clear_player_sn();
  ::PROTOBUF_NAMESPACE_ID::uint64 player_sn() const;
  void set_player_sn(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:Proto.Teleport)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  ::Proto::Player* player_;
  ::PROTOBUF_NAMESPACE_ID::uint64 last_world_sn_;
  ::PROTOBUF_NAMESPACE_ID::uint64 player_sn_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class TeleportAfter :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.TeleportAfter) */ {
 public:
  TeleportAfter();
  virtual ~TeleportAfter();

  TeleportAfter(const TeleportAfter& from);
  TeleportAfter(TeleportAfter&& from) noexcept
    : TeleportAfter() {
    *this = ::std::move(from);
  }

  inline TeleportAfter& operator=(const TeleportAfter& from) {
    CopyFrom(from);
    return *this;
  }
  inline TeleportAfter& operator=(TeleportAfter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TeleportAfter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TeleportAfter* internal_default_instance() {
    return reinterpret_cast<const TeleportAfter*>(
               &_TeleportAfter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(TeleportAfter& a, TeleportAfter& b) {
    a.Swap(&b);
  }
  inline void Swap(TeleportAfter* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TeleportAfter* New() const final {
    return CreateMaybeMessage<TeleportAfter>(nullptr);
  }

  TeleportAfter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TeleportAfter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TeleportAfter& from);
  void MergeFrom(const TeleportAfter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TeleportAfter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.TeleportAfter";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerSnFieldNumber = 1,
  };
  // uint64 player_sn = 1;
  void clear_player_sn();
  ::PROTOBUF_NAMESPACE_ID::uint64 player_sn() const;
  void set_player_sn(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:Proto.TeleportAfter)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 player_sn_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class RemovePlayer :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.RemovePlayer) */ {
 public:
  RemovePlayer();
  virtual ~RemovePlayer();

  RemovePlayer(const RemovePlayer& from);
  RemovePlayer(RemovePlayer&& from) noexcept
    : RemovePlayer() {
    *this = ::std::move(from);
  }

  inline RemovePlayer& operator=(const RemovePlayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemovePlayer& operator=(RemovePlayer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemovePlayer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemovePlayer* internal_default_instance() {
    return reinterpret_cast<const RemovePlayer*>(
               &_RemovePlayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(RemovePlayer& a, RemovePlayer& b) {
    a.Swap(&b);
  }
  inline void Swap(RemovePlayer* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemovePlayer* New() const final {
    return CreateMaybeMessage<RemovePlayer>(nullptr);
  }

  RemovePlayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemovePlayer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemovePlayer& from);
  void MergeFrom(const RemovePlayer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemovePlayer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.RemovePlayer";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerSnFieldNumber = 1,
  };
  // uint64 player_sn = 1;
  void clear_player_sn();
  ::PROTOBUF_NAMESPACE_ID::uint64 player_sn() const;
  void set_player_sn(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:Proto.RemovePlayer)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 player_sn_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class RequestSyncPlayer :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.RequestSyncPlayer) */ {
 public:
  RequestSyncPlayer();
  virtual ~RequestSyncPlayer();

  RequestSyncPlayer(const RequestSyncPlayer& from);
  RequestSyncPlayer(RequestSyncPlayer&& from) noexcept
    : RequestSyncPlayer() {
    *this = ::std::move(from);
  }

  inline RequestSyncPlayer& operator=(const RequestSyncPlayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestSyncPlayer& operator=(RequestSyncPlayer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RequestSyncPlayer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RequestSyncPlayer* internal_default_instance() {
    return reinterpret_cast<const RequestSyncPlayer*>(
               &_RequestSyncPlayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(RequestSyncPlayer& a, RequestSyncPlayer& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestSyncPlayer* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RequestSyncPlayer* New() const final {
    return CreateMaybeMessage<RequestSyncPlayer>(nullptr);
  }

  RequestSyncPlayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestSyncPlayer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RequestSyncPlayer& from);
  void MergeFrom(const RequestSyncPlayer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestSyncPlayer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.RequestSyncPlayer";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerSnFieldNumber = 1,
  };
  // uint64 player_sn = 1;
  void clear_player_sn();
  ::PROTOBUF_NAMESPACE_ID::uint64 player_sn() const;
  void set_player_sn(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:Proto.RequestSyncPlayer)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 player_sn_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class Role :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.Role) */ {
 public:
  Role();
  virtual ~Role();

  Role(const Role& from);
  Role(Role&& from) noexcept
    : Role() {
    *this = ::std::move(from);
  }

  inline Role& operator=(const Role& from) {
    CopyFrom(from);
    return *this;
  }
  inline Role& operator=(Role&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Role& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Role* internal_default_instance() {
    return reinterpret_cast<const Role*>(
               &_Role_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(Role& a, Role& b) {
    a.Swap(&b);
  }
  inline void Swap(Role* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Role* New() const final {
    return CreateMaybeMessage<Role>(nullptr);
  }

  Role* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Role>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Role& from);
  void MergeFrom(const Role& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Role* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.Role";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPositionFieldNumber = 4,
    kSnFieldNumber = 2,
    kGenderFieldNumber = 3,
    kLevelFieldNumber = 5,
    kXpFieldNumber = 6,
    kHpFieldNumber = 7,
    kMpFieldNumber = 8,
    kAtkFieldNumber = 9,
    kDefFieldNumber = 10,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // .Proto.Vector3D position = 4;
  bool has_position() const;
  void clear_position();
  const ::Proto::Vector3D& position() const;
  ::Proto::Vector3D* release_position();
  ::Proto::Vector3D* mutable_position();
  void set_allocated_position(::Proto::Vector3D* position);

  // uint64 sn = 2;
  void clear_sn();
  ::PROTOBUF_NAMESPACE_ID::uint64 sn() const;
  void set_sn(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // .Proto.Gender gender = 3;
  void clear_gender();
  ::Proto::Gender gender() const;
  void set_gender(::Proto::Gender value);

  // int32 level = 5;
  void clear_level();
  ::PROTOBUF_NAMESPACE_ID::int32 level() const;
  void set_level(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 xp = 6;
  void clear_xp();
  ::PROTOBUF_NAMESPACE_ID::int32 xp() const;
  void set_xp(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 hp = 7;
  void clear_hp();
  ::PROTOBUF_NAMESPACE_ID::int32 hp() const;
  void set_hp(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 mp = 8;
  void clear_mp();
  ::PROTOBUF_NAMESPACE_ID::int32 mp() const;
  void set_mp(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 atk = 9;
  void clear_atk();
  ::PROTOBUF_NAMESPACE_ID::int32 atk() const;
  void set_atk(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 def = 10;
  void clear_def();
  ::PROTOBUF_NAMESPACE_ID::int32 def() const;
  void set_def(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Proto.Role)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::Proto::Vector3D* position_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sn_;
  int gender_;
  ::PROTOBUF_NAMESPACE_ID::int32 level_;
  ::PROTOBUF_NAMESPACE_ID::int32 xp_;
  ::PROTOBUF_NAMESPACE_ID::int32 hp_;
  ::PROTOBUF_NAMESPACE_ID::int32 mp_;
  ::PROTOBUF_NAMESPACE_ID::int32 atk_;
  ::PROTOBUF_NAMESPACE_ID::int32 def_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class AllRoleAppear :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.AllRoleAppear) */ {
 public:
  AllRoleAppear();
  virtual ~AllRoleAppear();

  AllRoleAppear(const AllRoleAppear& from);
  AllRoleAppear(AllRoleAppear&& from) noexcept
    : AllRoleAppear() {
    *this = ::std::move(from);
  }

  inline AllRoleAppear& operator=(const AllRoleAppear& from) {
    CopyFrom(from);
    return *this;
  }
  inline AllRoleAppear& operator=(AllRoleAppear&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AllRoleAppear& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AllRoleAppear* internal_default_instance() {
    return reinterpret_cast<const AllRoleAppear*>(
               &_AllRoleAppear_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(AllRoleAppear& a, AllRoleAppear& b) {
    a.Swap(&b);
  }
  inline void Swap(AllRoleAppear* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AllRoleAppear* New() const final {
    return CreateMaybeMessage<AllRoleAppear>(nullptr);
  }

  AllRoleAppear* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AllRoleAppear>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AllRoleAppear& from);
  void MergeFrom(const AllRoleAppear& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AllRoleAppear* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.AllRoleAppear";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRolesFieldNumber = 1,
  };
  // repeated .Proto.Role roles = 1;
  int roles_size() const;
  void clear_roles();
  ::Proto::Role* mutable_roles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Role >*
      mutable_roles();
  const ::Proto::Role& roles(int index) const;
  ::Proto::Role* add_roles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Role >&
      roles() const;

  // @@protoc_insertion_point(class_scope:Proto.AllRoleAppear)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Role > roles_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class RoleDisappear :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.RoleDisappear) */ {
 public:
  RoleDisappear();
  virtual ~RoleDisappear();

  RoleDisappear(const RoleDisappear& from);
  RoleDisappear(RoleDisappear&& from) noexcept
    : RoleDisappear() {
    *this = ::std::move(from);
  }

  inline RoleDisappear& operator=(const RoleDisappear& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoleDisappear& operator=(RoleDisappear&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RoleDisappear& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoleDisappear* internal_default_instance() {
    return reinterpret_cast<const RoleDisappear*>(
               &_RoleDisappear_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(RoleDisappear& a, RoleDisappear& b) {
    a.Swap(&b);
  }
  inline void Swap(RoleDisappear* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoleDisappear* New() const final {
    return CreateMaybeMessage<RoleDisappear>(nullptr);
  }

  RoleDisappear* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoleDisappear>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RoleDisappear& from);
  void MergeFrom(const RoleDisappear& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoleDisappear* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.RoleDisappear";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSnFieldNumber = 1,
  };
  // uint64 sn = 1;
  void clear_sn();
  ::PROTOBUF_NAMESPACE_ID::uint64 sn() const;
  void set_sn(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:Proto.RoleDisappear)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sn_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class Move :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.Move) */ {
 public:
  Move();
  virtual ~Move();

  Move(const Move& from);
  Move(Move&& from) noexcept
    : Move() {
    *this = ::std::move(from);
  }

  inline Move& operator=(const Move& from) {
    CopyFrom(from);
    return *this;
  }
  inline Move& operator=(Move&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Move& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Move* internal_default_instance() {
    return reinterpret_cast<const Move*>(
               &_Move_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  friend void swap(Move& a, Move& b) {
    a.Swap(&b);
  }
  inline void Swap(Move* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Move* New() const final {
    return CreateMaybeMessage<Move>(nullptr);
  }

  Move* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Move>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Move& from);
  void MergeFrom(const Move& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Move* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.Move";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 2,
    kPlayerSnFieldNumber = 1,
  };
  // repeated .Proto.Vector3D position = 2;
  int position_size() const;
  void clear_position();
  ::Proto::Vector3D* mutable_position(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Vector3D >*
      mutable_position();
  const ::Proto::Vector3D& position(int index) const;
  ::Proto::Vector3D* add_position();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Vector3D >&
      position() const;

  // uint64 player_sn = 1;
  void clear_player_sn();
  ::PROTOBUF_NAMESPACE_ID::uint64 player_sn() const;
  void set_player_sn(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:Proto.Move)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Vector3D > position_;
  ::PROTOBUF_NAMESPACE_ID::uint64 player_sn_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class SyncEntityStatus :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.SyncEntityStatus) */ {
 public:
  SyncEntityStatus();
  virtual ~SyncEntityStatus();

  SyncEntityStatus(const SyncEntityStatus& from);
  SyncEntityStatus(SyncEntityStatus&& from) noexcept
    : SyncEntityStatus() {
    *this = ::std::move(from);
  }

  inline SyncEntityStatus& operator=(const SyncEntityStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncEntityStatus& operator=(SyncEntityStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SyncEntityStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SyncEntityStatus* internal_default_instance() {
    return reinterpret_cast<const SyncEntityStatus*>(
               &_SyncEntityStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  friend void swap(SyncEntityStatus& a, SyncEntityStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncEntityStatus* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SyncEntityStatus* New() const final {
    return CreateMaybeMessage<SyncEntityStatus>(nullptr);
  }

  SyncEntityStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SyncEntityStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SyncEntityStatus& from);
  void MergeFrom(const SyncEntityStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncEntityStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.SyncEntityStatus";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSnFieldNumber = 1,
    kHpFieldNumber = 2,
  };
  // uint64 sn = 1;
  void clear_sn();
  ::PROTOBUF_NAMESPACE_ID::uint64 sn() const;
  void set_sn(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // int32 hp = 2;
  void clear_hp();
  ::PROTOBUF_NAMESPACE_ID::int32 hp() const;
  void set_hp(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Proto.SyncEntityStatus)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sn_;
  ::PROTOBUF_NAMESPACE_ID::int32 hp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class SyncNpcPos :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.SyncNpcPos) */ {
 public:
  SyncNpcPos();
  virtual ~SyncNpcPos();

  SyncNpcPos(const SyncNpcPos& from);
  SyncNpcPos(SyncNpcPos&& from) noexcept
    : SyncNpcPos() {
    *this = ::std::move(from);
  }

  inline SyncNpcPos& operator=(const SyncNpcPos& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncNpcPos& operator=(SyncNpcPos&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SyncNpcPos& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SyncNpcPos* internal_default_instance() {
    return reinterpret_cast<const SyncNpcPos*>(
               &_SyncNpcPos_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  friend void swap(SyncNpcPos& a, SyncNpcPos& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncNpcPos* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SyncNpcPos* New() const final {
    return CreateMaybeMessage<SyncNpcPos>(nullptr);
  }

  SyncNpcPos* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SyncNpcPos>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SyncNpcPos& from);
  void MergeFrom(const SyncNpcPos& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncNpcPos* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.SyncNpcPos";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosFieldNumber = 2,
    kNpcSnFieldNumber = 1,
  };
  // .Proto.Vector3D pos = 2;
  bool has_pos() const;
  void clear_pos();
  const ::Proto::Vector3D& pos() const;
  ::Proto::Vector3D* release_pos();
  ::Proto::Vector3D* mutable_pos();
  void set_allocated_pos(::Proto::Vector3D* pos);

  // uint64 npc_sn = 1;
  void clear_npc_sn();
  ::PROTOBUF_NAMESPACE_ID::uint64 npc_sn() const;
  void set_npc_sn(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:Proto.SyncNpcPos)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::Proto::Vector3D* pos_;
  ::PROTOBUF_NAMESPACE_ID::uint64 npc_sn_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class SyncFsmState :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.SyncFsmState) */ {
 public:
  SyncFsmState();
  virtual ~SyncFsmState();

  SyncFsmState(const SyncFsmState& from);
  SyncFsmState(SyncFsmState&& from) noexcept
    : SyncFsmState() {
    *this = ::std::move(from);
  }

  inline SyncFsmState& operator=(const SyncFsmState& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncFsmState& operator=(SyncFsmState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SyncFsmState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SyncFsmState* internal_default_instance() {
    return reinterpret_cast<const SyncFsmState*>(
               &_SyncFsmState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  friend void swap(SyncFsmState& a, SyncFsmState& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncFsmState* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SyncFsmState* New() const final {
    return CreateMaybeMessage<SyncFsmState>(nullptr);
  }

  SyncFsmState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SyncFsmState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SyncFsmState& from);
  void MergeFrom(const SyncFsmState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncFsmState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.SyncFsmState";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 1,
    kCodeFieldNumber = 2,
    kNpcSnFieldNumber = 3,
    kPlayerSnFieldNumber = 4,
  };
  // int32 state = 1;
  void clear_state();
  ::PROTOBUF_NAMESPACE_ID::int32 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 code = 2;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);

  // uint64 npc_sn = 3;
  void clear_npc_sn();
  ::PROTOBUF_NAMESPACE_ID::uint64 npc_sn() const;
  void set_npc_sn(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 player_sn = 4;
  void clear_player_sn();
  ::PROTOBUF_NAMESPACE_ID::uint64 player_sn() const;
  void set_player_sn(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:Proto.SyncFsmState)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 state_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  ::PROTOBUF_NAMESPACE_ID::uint64 npc_sn_;
  ::PROTOBUF_NAMESPACE_ID::uint64 player_sn_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class SyncPlayerPos :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.SyncPlayerPos) */ {
 public:
  SyncPlayerPos();
  virtual ~SyncPlayerPos();

  SyncPlayerPos(const SyncPlayerPos& from);
  SyncPlayerPos(SyncPlayerPos&& from) noexcept
    : SyncPlayerPos() {
    *this = ::std::move(from);
  }

  inline SyncPlayerPos& operator=(const SyncPlayerPos& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncPlayerPos& operator=(SyncPlayerPos&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SyncPlayerPos& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SyncPlayerPos* internal_default_instance() {
    return reinterpret_cast<const SyncPlayerPos*>(
               &_SyncPlayerPos_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  friend void swap(SyncPlayerPos& a, SyncPlayerPos& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncPlayerPos* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SyncPlayerPos* New() const final {
    return CreateMaybeMessage<SyncPlayerPos>(nullptr);
  }

  SyncPlayerPos* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SyncPlayerPos>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SyncPlayerPos& from);
  void MergeFrom(const SyncPlayerPos& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncPlayerPos* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.SyncPlayerPos";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosFieldNumber = 1,
  };
  // .Proto.Vector3D pos = 1;
  bool has_pos() const;
  void clear_pos();
  const ::Proto::Vector3D& pos() const;
  ::Proto::Vector3D* release_pos();
  ::Proto::Vector3D* mutable_pos();
  void set_allocated_pos(::Proto::Vector3D* pos);

  // @@protoc_insertion_point(class_scope:Proto.SyncPlayerPos)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::Proto::Vector3D* pos_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class SyncPlayerCmd :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.SyncPlayerCmd) */ {
 public:
  SyncPlayerCmd();
  virtual ~SyncPlayerCmd();

  SyncPlayerCmd(const SyncPlayerCmd& from);
  SyncPlayerCmd(SyncPlayerCmd&& from) noexcept
    : SyncPlayerCmd() {
    *this = ::std::move(from);
  }

  inline SyncPlayerCmd& operator=(const SyncPlayerCmd& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncPlayerCmd& operator=(SyncPlayerCmd&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SyncPlayerCmd& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SyncPlayerCmd* internal_default_instance() {
    return reinterpret_cast<const SyncPlayerCmd*>(
               &_SyncPlayerCmd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    68;

  friend void swap(SyncPlayerCmd& a, SyncPlayerCmd& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncPlayerCmd* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SyncPlayerCmd* New() const final {
    return CreateMaybeMessage<SyncPlayerCmd>(nullptr);
  }

  SyncPlayerCmd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SyncPlayerCmd>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SyncPlayerCmd& from);
  void MergeFrom(const SyncPlayerCmd& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncPlayerCmd* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.SyncPlayerCmd";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointFieldNumber = 2,
    kPlayerSnFieldNumber = 3,
    kTargetSnFieldNumber = 4,
    kTypeFieldNumber = 1,
  };
  // .Proto.Vector3D point = 2;
  bool has_point() const;
  void clear_point();
  const ::Proto::Vector3D& point() const;
  ::Proto::Vector3D* release_point();
  ::Proto::Vector3D* mutable_point();
  void set_allocated_point(::Proto::Vector3D* point);

  // uint64 player_sn = 3;
  void clear_player_sn();
  ::PROTOBUF_NAMESPACE_ID::uint64 player_sn() const;
  void set_player_sn(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 target_sn = 4;
  void clear_target_sn();
  ::PROTOBUF_NAMESPACE_ID::uint64 target_sn() const;
  void set_target_sn(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // int32 type = 1;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Proto.SyncPlayerCmd)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::Proto::Vector3D* point_;
  ::PROTOBUF_NAMESPACE_ID::uint64 player_sn_;
  ::PROTOBUF_NAMESPACE_ID::uint64 target_sn_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class ReqSyncNpc :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.ReqSyncNpc) */ {
 public:
  ReqSyncNpc();
  virtual ~ReqSyncNpc();

  ReqSyncNpc(const ReqSyncNpc& from);
  ReqSyncNpc(ReqSyncNpc&& from) noexcept
    : ReqSyncNpc() {
    *this = ::std::move(from);
  }

  inline ReqSyncNpc& operator=(const ReqSyncNpc& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqSyncNpc& operator=(ReqSyncNpc&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReqSyncNpc& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqSyncNpc* internal_default_instance() {
    return reinterpret_cast<const ReqSyncNpc*>(
               &_ReqSyncNpc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    69;

  friend void swap(ReqSyncNpc& a, ReqSyncNpc& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqSyncNpc* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqSyncNpc* New() const final {
    return CreateMaybeMessage<ReqSyncNpc>(nullptr);
  }

  ReqSyncNpc* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqSyncNpc>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqSyncNpc& from);
  void MergeFrom(const ReqSyncNpc& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqSyncNpc* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.ReqSyncNpc";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNpcSnFieldNumber = 2,
    kNpcIdFieldNumber = 1,
  };
  // uint64 npc_sn = 2;
  void clear_npc_sn();
  ::PROTOBUF_NAMESPACE_ID::uint64 npc_sn() const;
  void set_npc_sn(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // int32 npc_id = 1;
  void clear_npc_id();
  ::PROTOBUF_NAMESPACE_ID::int32 npc_id() const;
  void set_npc_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Proto.ReqSyncNpc)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 npc_sn_;
  ::PROTOBUF_NAMESPACE_ID::int32 npc_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class ReqLinkPlayer :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.ReqLinkPlayer) */ {
 public:
  ReqLinkPlayer();
  virtual ~ReqLinkPlayer();

  ReqLinkPlayer(const ReqLinkPlayer& from);
  ReqLinkPlayer(ReqLinkPlayer&& from) noexcept
    : ReqLinkPlayer() {
    *this = ::std::move(from);
  }

  inline ReqLinkPlayer& operator=(const ReqLinkPlayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqLinkPlayer& operator=(ReqLinkPlayer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReqLinkPlayer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqLinkPlayer* internal_default_instance() {
    return reinterpret_cast<const ReqLinkPlayer*>(
               &_ReqLinkPlayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    70;

  friend void swap(ReqLinkPlayer& a, ReqLinkPlayer& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqLinkPlayer* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqLinkPlayer* New() const final {
    return CreateMaybeMessage<ReqLinkPlayer>(nullptr);
  }

  ReqLinkPlayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqLinkPlayer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqLinkPlayer& from);
  void MergeFrom(const ReqLinkPlayer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqLinkPlayer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.ReqLinkPlayer";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNpcSnFieldNumber = 2,
    kNpcIdFieldNumber = 1,
    kLinkerFieldNumber = 3,
  };
  // uint64 npc_sn = 2;
  void clear_npc_sn();
  ::PROTOBUF_NAMESPACE_ID::uint64 npc_sn() const;
  void set_npc_sn(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // int32 npc_id = 1;
  void clear_npc_id();
  ::PROTOBUF_NAMESPACE_ID::int32 npc_id() const;
  void set_npc_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // bool linker = 3;
  void clear_linker();
  bool linker() const;
  void set_linker(bool value);

  // @@protoc_insertion_point(class_scope:Proto.ReqLinkPlayer)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 npc_sn_;
  ::PROTOBUF_NAMESPACE_ID::int32 npc_id_;
  bool linker_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class NpcAtkEvent :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.NpcAtkEvent) */ {
 public:
  NpcAtkEvent();
  virtual ~NpcAtkEvent();

  NpcAtkEvent(const NpcAtkEvent& from);
  NpcAtkEvent(NpcAtkEvent&& from) noexcept
    : NpcAtkEvent() {
    *this = ::std::move(from);
  }

  inline NpcAtkEvent& operator=(const NpcAtkEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline NpcAtkEvent& operator=(NpcAtkEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NpcAtkEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NpcAtkEvent* internal_default_instance() {
    return reinterpret_cast<const NpcAtkEvent*>(
               &_NpcAtkEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    71;

  friend void swap(NpcAtkEvent& a, NpcAtkEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(NpcAtkEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NpcAtkEvent* New() const final {
    return CreateMaybeMessage<NpcAtkEvent>(nullptr);
  }

  NpcAtkEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NpcAtkEvent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NpcAtkEvent& from);
  void MergeFrom(const NpcAtkEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NpcAtkEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.NpcAtkEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNpcSnFieldNumber = 1,
    kTargetSnFieldNumber = 2,
  };
  // uint64 npc_sn = 1;
  void clear_npc_sn();
  ::PROTOBUF_NAMESPACE_ID::uint64 npc_sn() const;
  void set_npc_sn(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 target_sn = 2;
  void clear_target_sn();
  ::PROTOBUF_NAMESPACE_ID::uint64 target_sn() const;
  void set_target_sn(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:Proto.NpcAtkEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 npc_sn_;
  ::PROTOBUF_NAMESPACE_ID::uint64 target_sn_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class PlayerAtkEvent :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.PlayerAtkEvent) */ {
 public:
  PlayerAtkEvent();
  virtual ~PlayerAtkEvent();

  PlayerAtkEvent(const PlayerAtkEvent& from);
  PlayerAtkEvent(PlayerAtkEvent&& from) noexcept
    : PlayerAtkEvent() {
    *this = ::std::move(from);
  }

  inline PlayerAtkEvent& operator=(const PlayerAtkEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerAtkEvent& operator=(PlayerAtkEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlayerAtkEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerAtkEvent* internal_default_instance() {
    return reinterpret_cast<const PlayerAtkEvent*>(
               &_PlayerAtkEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    72;

  friend void swap(PlayerAtkEvent& a, PlayerAtkEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerAtkEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlayerAtkEvent* New() const final {
    return CreateMaybeMessage<PlayerAtkEvent>(nullptr);
  }

  PlayerAtkEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayerAtkEvent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlayerAtkEvent& from);
  void MergeFrom(const PlayerAtkEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerAtkEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.PlayerAtkEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerSnFieldNumber = 1,
    kTargetSnFieldNumber = 2,
  };
  // uint64 player_sn = 1;
  void clear_player_sn();
  ::PROTOBUF_NAMESPACE_ID::uint64 player_sn() const;
  void set_player_sn(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 target_sn = 2;
  void clear_target_sn();
  ::PROTOBUF_NAMESPACE_ID::uint64 target_sn() const;
  void set_target_sn(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:Proto.PlayerAtkEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 player_sn_;
  ::PROTOBUF_NAMESPACE_ID::uint64 target_sn_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class DropItemList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.DropItemList) */ {
 public:
  DropItemList();
  virtual ~DropItemList();

  DropItemList(const DropItemList& from);
  DropItemList(DropItemList&& from) noexcept
    : DropItemList() {
    *this = ::std::move(from);
  }

  inline DropItemList& operator=(const DropItemList& from) {
    CopyFrom(from);
    return *this;
  }
  inline DropItemList& operator=(DropItemList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DropItemList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DropItemList* internal_default_instance() {
    return reinterpret_cast<const DropItemList*>(
               &_DropItemList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    73;

  friend void swap(DropItemList& a, DropItemList& b) {
    a.Swap(&b);
  }
  inline void Swap(DropItemList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DropItemList* New() const final {
    return CreateMaybeMessage<DropItemList>(nullptr);
  }

  DropItemList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DropItemList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DropItemList& from);
  void MergeFrom(const DropItemList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DropItemList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.DropItemList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 4,
    kNpcSnFieldNumber = 1,
    kExpFieldNumber = 2,
    kGoldFieldNumber = 3,
  };
  // repeated .Proto.ItemData items = 4;
  int items_size() const;
  void clear_items();
  ::Proto::ItemData* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::ItemData >*
      mutable_items();
  const ::Proto::ItemData& items(int index) const;
  ::Proto::ItemData* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::ItemData >&
      items() const;

  // uint64 npc_sn = 1;
  void clear_npc_sn();
  ::PROTOBUF_NAMESPACE_ID::uint64 npc_sn() const;
  void set_npc_sn(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // int32 exp = 2;
  void clear_exp();
  ::PROTOBUF_NAMESPACE_ID::int32 exp() const;
  void set_exp(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 gold = 3;
  void clear_gold();
  ::PROTOBUF_NAMESPACE_ID::int32 gold() const;
  void set_gold(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Proto.DropItemList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::ItemData > items_;
  ::PROTOBUF_NAMESPACE_ID::uint64 npc_sn_;
  ::PROTOBUF_NAMESPACE_ID::int32 exp_;
  ::PROTOBUF_NAMESPACE_ID::int32 gold_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CmdThread

// .Proto.CmdThread.CmdType cmd_type = 1;
inline void CmdThread::clear_cmd_type() {
  cmd_type_ = 0;
}
inline ::Proto::CmdThread_CmdType CmdThread::cmd_type() const {
  // @@protoc_insertion_point(field_get:Proto.CmdThread.cmd_type)
  return static_cast< ::Proto::CmdThread_CmdType >(cmd_type_);
}
inline void CmdThread::set_cmd_type(::Proto::CmdThread_CmdType value) {
  
  cmd_type_ = value;
  // @@protoc_insertion_point(field_set:Proto.CmdThread.cmd_type)
}

// -------------------------------------------------------------------

// CmdApp

// .Proto.CmdApp.CmdType cmd_type = 1;
inline void CmdApp::clear_cmd_type() {
  cmd_type_ = 0;
}
inline ::Proto::CmdApp_CmdType CmdApp::cmd_type() const {
  // @@protoc_insertion_point(field_get:Proto.CmdApp.cmd_type)
  return static_cast< ::Proto::CmdApp_CmdType >(cmd_type_);
}
inline void CmdApp::set_cmd_type(::Proto::CmdApp_CmdType value) {
  
  cmd_type_ = value;
  // @@protoc_insertion_point(field_set:Proto.CmdApp.cmd_type)
}

// -------------------------------------------------------------------

// Efficiency

// int32 thread_type = 1;
inline void Efficiency::clear_thread_type() {
  thread_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Efficiency::thread_type() const {
  // @@protoc_insertion_point(field_get:Proto.Efficiency.thread_type)
  return thread_type_;
}
inline void Efficiency::set_thread_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  thread_type_ = value;
  // @@protoc_insertion_point(field_set:Proto.Efficiency.thread_type)
}

// string thread_id = 2;
inline void Efficiency::clear_thread_id() {
  thread_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Efficiency::thread_id() const {
  // @@protoc_insertion_point(field_get:Proto.Efficiency.thread_id)
  return thread_id_.GetNoArena();
}
inline void Efficiency::set_thread_id(const std::string& value) {
  
  thread_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Proto.Efficiency.thread_id)
}
inline void Efficiency::set_thread_id(std::string&& value) {
  
  thread_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Proto.Efficiency.thread_id)
}
inline void Efficiency::set_thread_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  thread_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proto.Efficiency.thread_id)
}
inline void Efficiency::set_thread_id(const char* value, size_t size) {
  
  thread_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proto.Efficiency.thread_id)
}
inline std::string* Efficiency::mutable_thread_id() {
  
  // @@protoc_insertion_point(field_mutable:Proto.Efficiency.thread_id)
  return thread_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Efficiency::release_thread_id() {
  // @@protoc_insertion_point(field_release:Proto.Efficiency.thread_id)
  
  return thread_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Efficiency::set_allocated_thread_id(std::string* thread_id) {
  if (thread_id != nullptr) {
    
  } else {
    
  }
  thread_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), thread_id);
  // @@protoc_insertion_point(field_set_allocated:Proto.Efficiency.thread_id)
}

// double time = 3;
inline void Efficiency::clear_time() {
  time_ = 0;
}
inline double Efficiency::time() const {
  // @@protoc_insertion_point(field_get:Proto.Efficiency.time)
  return time_;
}
inline void Efficiency::set_time(double value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:Proto.Efficiency.time)
}

// -------------------------------------------------------------------

// AppRegister

// int32 type = 1;
inline void AppRegister::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppRegister::type() const {
  // @@protoc_insertion_point(field_get:Proto.AppRegister.type)
  return type_;
}
inline void AppRegister::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:Proto.AppRegister.type)
}

// int32 id = 2;
inline void AppRegister::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppRegister::id() const {
  // @@protoc_insertion_point(field_get:Proto.AppRegister.id)
  return id_;
}
inline void AppRegister::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:Proto.AppRegister.id)
}

// -------------------------------------------------------------------

// AppInfoSync

// int32 app_id = 1;
inline void AppInfoSync::clear_app_id() {
  app_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppInfoSync::app_id() const {
  // @@protoc_insertion_point(field_get:Proto.AppInfoSync.app_id)
  return app_id_;
}
inline void AppInfoSync::set_app_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  app_id_ = value;
  // @@protoc_insertion_point(field_set:Proto.AppInfoSync.app_id)
}

// int32 app_type = 2;
inline void AppInfoSync::clear_app_type() {
  app_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppInfoSync::app_type() const {
  // @@protoc_insertion_point(field_get:Proto.AppInfoSync.app_type)
  return app_type_;
}
inline void AppInfoSync::set_app_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  app_type_ = value;
  // @@protoc_insertion_point(field_set:Proto.AppInfoSync.app_type)
}

// int32 online = 3;
inline void AppInfoSync::clear_online() {
  online_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppInfoSync::online() const {
  // @@protoc_insertion_point(field_get:Proto.AppInfoSync.online)
  return online_;
}
inline void AppInfoSync::set_online(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  online_ = value;
  // @@protoc_insertion_point(field_set:Proto.AppInfoSync.online)
}

// -------------------------------------------------------------------

// AppInfoListSync

// repeated .Proto.AppInfoSync apps = 1;
inline int AppInfoListSync::apps_size() const {
  return apps_.size();
}
inline void AppInfoListSync::clear_apps() {
  apps_.Clear();
}
inline ::Proto::AppInfoSync* AppInfoListSync::mutable_apps(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.AppInfoListSync.apps)
  return apps_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::AppInfoSync >*
AppInfoListSync::mutable_apps() {
  // @@protoc_insertion_point(field_mutable_list:Proto.AppInfoListSync.apps)
  return &apps_;
}
inline const ::Proto::AppInfoSync& AppInfoListSync::apps(int index) const {
  // @@protoc_insertion_point(field_get:Proto.AppInfoListSync.apps)
  return apps_.Get(index);
}
inline ::Proto::AppInfoSync* AppInfoListSync::add_apps() {
  // @@protoc_insertion_point(field_add:Proto.AppInfoListSync.apps)
  return apps_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::AppInfoSync >&
AppInfoListSync::apps() const {
  // @@protoc_insertion_point(field_list:Proto.AppInfoListSync.apps)
  return apps_;
}

// -------------------------------------------------------------------

// NetworkDisconnect

// int32 network_type = 1;
inline void NetworkDisconnect::clear_network_type() {
  network_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NetworkDisconnect::network_type() const {
  // @@protoc_insertion_point(field_get:Proto.NetworkDisconnect.network_type)
  return network_type_;
}
inline void NetworkDisconnect::set_network_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  network_type_ = value;
  // @@protoc_insertion_point(field_set:Proto.NetworkDisconnect.network_type)
}

// int32 socket = 2;
inline void NetworkDisconnect::clear_socket() {
  socket_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NetworkDisconnect::socket() const {
  // @@protoc_insertion_point(field_get:Proto.NetworkDisconnect.socket)
  return socket_;
}
inline void NetworkDisconnect::set_socket(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  socket_ = value;
  // @@protoc_insertion_point(field_set:Proto.NetworkDisconnect.socket)
}

// -------------------------------------------------------------------

// TagValue

// uint64 value_int64 = 1;
inline void TagValue::clear_value_int64() {
  value_int64_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TagValue::value_int64() const {
  // @@protoc_insertion_point(field_get:Proto.TagValue.value_int64)
  return value_int64_;
}
inline void TagValue::set_value_int64(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  value_int64_ = value;
  // @@protoc_insertion_point(field_set:Proto.TagValue.value_int64)
}

// string value_str = 2;
inline void TagValue::clear_value_str() {
  value_str_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TagValue::value_str() const {
  // @@protoc_insertion_point(field_get:Proto.TagValue.value_str)
  return value_str_.GetNoArena();
}
inline void TagValue::set_value_str(const std::string& value) {
  
  value_str_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Proto.TagValue.value_str)
}
inline void TagValue::set_value_str(std::string&& value) {
  
  value_str_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Proto.TagValue.value_str)
}
inline void TagValue::set_value_str(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_str_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proto.TagValue.value_str)
}
inline void TagValue::set_value_str(const char* value, size_t size) {
  
  value_str_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proto.TagValue.value_str)
}
inline std::string* TagValue::mutable_value_str() {
  
  // @@protoc_insertion_point(field_mutable:Proto.TagValue.value_str)
  return value_str_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TagValue::release_value_str() {
  // @@protoc_insertion_point(field_release:Proto.TagValue.value_str)
  
  return value_str_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TagValue::set_allocated_value_str(std::string* value_str) {
  if (value_str != nullptr) {
    
  } else {
    
  }
  value_str_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value_str);
  // @@protoc_insertion_point(field_set_allocated:Proto.TagValue.value_str)
}

// -------------------------------------------------------------------

// Tag

// .Proto.TagType tag_type = 1;
inline void Tag::clear_tag_type() {
  tag_type_ = 0;
}
inline ::Proto::TagType Tag::tag_type() const {
  // @@protoc_insertion_point(field_get:Proto.Tag.tag_type)
  return static_cast< ::Proto::TagType >(tag_type_);
}
inline void Tag::set_tag_type(::Proto::TagType value) {
  
  tag_type_ = value;
  // @@protoc_insertion_point(field_set:Proto.Tag.tag_type)
}

// .Proto.TagValue tag_value = 2;
inline bool Tag::has_tag_value() const {
  return this != internal_default_instance() && tag_value_ != nullptr;
}
inline void Tag::clear_tag_value() {
  if (GetArenaNoVirtual() == nullptr && tag_value_ != nullptr) {
    delete tag_value_;
  }
  tag_value_ = nullptr;
}
inline const ::Proto::TagValue& Tag::tag_value() const {
  const ::Proto::TagValue* p = tag_value_;
  // @@protoc_insertion_point(field_get:Proto.Tag.tag_value)
  return p != nullptr ? *p : *reinterpret_cast<const ::Proto::TagValue*>(
      &::Proto::_TagValue_default_instance_);
}
inline ::Proto::TagValue* Tag::release_tag_value() {
  // @@protoc_insertion_point(field_release:Proto.Tag.tag_value)
  
  ::Proto::TagValue* temp = tag_value_;
  tag_value_ = nullptr;
  return temp;
}
inline ::Proto::TagValue* Tag::mutable_tag_value() {
  
  if (tag_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::TagValue>(GetArenaNoVirtual());
    tag_value_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Proto.Tag.tag_value)
  return tag_value_;
}
inline void Tag::set_allocated_tag_value(::Proto::TagValue* tag_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete tag_value_;
  }
  if (tag_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      tag_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tag_value, submessage_arena);
    }
    
  } else {
    
  }
  tag_value_ = tag_value;
  // @@protoc_insertion_point(field_set_allocated:Proto.Tag.tag_value)
}

// -------------------------------------------------------------------

// NetworkConnect

// int32 network_type = 1;
inline void NetworkConnect::clear_network_type() {
  network_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NetworkConnect::network_type() const {
  // @@protoc_insertion_point(field_get:Proto.NetworkConnect.network_type)
  return network_type_;
}
inline void NetworkConnect::set_network_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  network_type_ = value;
  // @@protoc_insertion_point(field_set:Proto.NetworkConnect.network_type)
}

// .Proto.Tag tag = 2;
inline bool NetworkConnect::has_tag() const {
  return this != internal_default_instance() && tag_ != nullptr;
}
inline void NetworkConnect::clear_tag() {
  if (GetArenaNoVirtual() == nullptr && tag_ != nullptr) {
    delete tag_;
  }
  tag_ = nullptr;
}
inline const ::Proto::Tag& NetworkConnect::tag() const {
  const ::Proto::Tag* p = tag_;
  // @@protoc_insertion_point(field_get:Proto.NetworkConnect.tag)
  return p != nullptr ? *p : *reinterpret_cast<const ::Proto::Tag*>(
      &::Proto::_Tag_default_instance_);
}
inline ::Proto::Tag* NetworkConnect::release_tag() {
  // @@protoc_insertion_point(field_release:Proto.NetworkConnect.tag)
  
  ::Proto::Tag* temp = tag_;
  tag_ = nullptr;
  return temp;
}
inline ::Proto::Tag* NetworkConnect::mutable_tag() {
  
  if (tag_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::Tag>(GetArenaNoVirtual());
    tag_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Proto.NetworkConnect.tag)
  return tag_;
}
inline void NetworkConnect::set_allocated_tag(::Proto::Tag* tag) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete tag_;
  }
  if (tag) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      tag = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tag, submessage_arena);
    }
    
  } else {
    
  }
  tag_ = tag;
  // @@protoc_insertion_point(field_set_allocated:Proto.NetworkConnect.tag)
}

// string ip = 3;
inline void NetworkConnect::clear_ip() {
  ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NetworkConnect::ip() const {
  // @@protoc_insertion_point(field_get:Proto.NetworkConnect.ip)
  return ip_.GetNoArena();
}
inline void NetworkConnect::set_ip(const std::string& value) {
  
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Proto.NetworkConnect.ip)
}
inline void NetworkConnect::set_ip(std::string&& value) {
  
  ip_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Proto.NetworkConnect.ip)
}
inline void NetworkConnect::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proto.NetworkConnect.ip)
}
inline void NetworkConnect::set_ip(const char* value, size_t size) {
  
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proto.NetworkConnect.ip)
}
inline std::string* NetworkConnect::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:Proto.NetworkConnect.ip)
  return ip_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NetworkConnect::release_ip() {
  // @@protoc_insertion_point(field_release:Proto.NetworkConnect.ip)
  
  return ip_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NetworkConnect::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:Proto.NetworkConnect.ip)
}

// int32 port = 4;
inline void NetworkConnect::clear_port() {
  port_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NetworkConnect::port() const {
  // @@protoc_insertion_point(field_get:Proto.NetworkConnect.port)
  return port_;
}
inline void NetworkConnect::set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:Proto.NetworkConnect.port)
}

// -------------------------------------------------------------------

// Http

// string body = 1;
inline void Http::clear_body() {
  body_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Http::body() const {
  // @@protoc_insertion_point(field_get:Proto.Http.body)
  return body_.GetNoArena();
}
inline void Http::set_body(const std::string& value) {
  
  body_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Proto.Http.body)
}
inline void Http::set_body(std::string&& value) {
  
  body_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Proto.Http.body)
}
inline void Http::set_body(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  body_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proto.Http.body)
}
inline void Http::set_body(const char* value, size_t size) {
  
  body_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proto.Http.body)
}
inline std::string* Http::mutable_body() {
  
  // @@protoc_insertion_point(field_mutable:Proto.Http.body)
  return body_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Http::release_body() {
  // @@protoc_insertion_point(field_release:Proto.Http.body)
  
  return body_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Http::set_allocated_body(std::string* body) {
  if (body != nullptr) {
    
  } else {
    
  }
  body_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), body);
  // @@protoc_insertion_point(field_set_allocated:Proto.Http.body)
}

// int32 status_code = 2;
inline void Http::clear_status_code() {
  status_code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Http::status_code() const {
  // @@protoc_insertion_point(field_get:Proto.Http.status_code)
  return status_code_;
}
inline void Http::set_status_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_code_ = value;
  // @@protoc_insertion_point(field_set:Proto.Http.status_code)
}

// -------------------------------------------------------------------

// CreateComponentParam

// .Proto.CreateComponentParam.ParamType type = 1;
inline void CreateComponentParam::clear_type() {
  type_ = 0;
}
inline ::Proto::CreateComponentParam_ParamType CreateComponentParam::type() const {
  // @@protoc_insertion_point(field_get:Proto.CreateComponentParam.type)
  return static_cast< ::Proto::CreateComponentParam_ParamType >(type_);
}
inline void CreateComponentParam::set_type(::Proto::CreateComponentParam_ParamType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:Proto.CreateComponentParam.type)
}

// int32 int_param = 2;
inline void CreateComponentParam::clear_int_param() {
  int_param_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateComponentParam::int_param() const {
  // @@protoc_insertion_point(field_get:Proto.CreateComponentParam.int_param)
  return int_param_;
}
inline void CreateComponentParam::set_int_param(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  int_param_ = value;
  // @@protoc_insertion_point(field_set:Proto.CreateComponentParam.int_param)
}

// string string_param = 3;
inline void CreateComponentParam::clear_string_param() {
  string_param_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateComponentParam::string_param() const {
  // @@protoc_insertion_point(field_get:Proto.CreateComponentParam.string_param)
  return string_param_.GetNoArena();
}
inline void CreateComponentParam::set_string_param(const std::string& value) {
  
  string_param_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Proto.CreateComponentParam.string_param)
}
inline void CreateComponentParam::set_string_param(std::string&& value) {
  
  string_param_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Proto.CreateComponentParam.string_param)
}
inline void CreateComponentParam::set_string_param(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  string_param_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proto.CreateComponentParam.string_param)
}
inline void CreateComponentParam::set_string_param(const char* value, size_t size) {
  
  string_param_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proto.CreateComponentParam.string_param)
}
inline std::string* CreateComponentParam::mutable_string_param() {
  
  // @@protoc_insertion_point(field_mutable:Proto.CreateComponentParam.string_param)
  return string_param_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateComponentParam::release_string_param() {
  // @@protoc_insertion_point(field_release:Proto.CreateComponentParam.string_param)
  
  return string_param_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateComponentParam::set_allocated_string_param(std::string* string_param) {
  if (string_param != nullptr) {
    
  } else {
    
  }
  string_param_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), string_param);
  // @@protoc_insertion_point(field_set_allocated:Proto.CreateComponentParam.string_param)
}

// uint64 uint64_param = 4;
inline void CreateComponentParam::clear_uint64_param() {
  uint64_param_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CreateComponentParam::uint64_param() const {
  // @@protoc_insertion_point(field_get:Proto.CreateComponentParam.uint64_param)
  return uint64_param_;
}
inline void CreateComponentParam::set_uint64_param(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  uint64_param_ = value;
  // @@protoc_insertion_point(field_set:Proto.CreateComponentParam.uint64_param)
}

// -------------------------------------------------------------------

// CreateComponent

// int32 thread_type = 1;
inline void CreateComponent::clear_thread_type() {
  thread_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateComponent::thread_type() const {
  // @@protoc_insertion_point(field_get:Proto.CreateComponent.thread_type)
  return thread_type_;
}
inline void CreateComponent::set_thread_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  thread_type_ = value;
  // @@protoc_insertion_point(field_set:Proto.CreateComponent.thread_type)
}

// string class_name = 2;
inline void CreateComponent::clear_class_name() {
  class_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateComponent::class_name() const {
  // @@protoc_insertion_point(field_get:Proto.CreateComponent.class_name)
  return class_name_.GetNoArena();
}
inline void CreateComponent::set_class_name(const std::string& value) {
  
  class_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Proto.CreateComponent.class_name)
}
inline void CreateComponent::set_class_name(std::string&& value) {
  
  class_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Proto.CreateComponent.class_name)
}
inline void CreateComponent::set_class_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  class_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proto.CreateComponent.class_name)
}
inline void CreateComponent::set_class_name(const char* value, size_t size) {
  
  class_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proto.CreateComponent.class_name)
}
inline std::string* CreateComponent::mutable_class_name() {
  
  // @@protoc_insertion_point(field_mutable:Proto.CreateComponent.class_name)
  return class_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateComponent::release_class_name() {
  // @@protoc_insertion_point(field_release:Proto.CreateComponent.class_name)
  
  return class_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateComponent::set_allocated_class_name(std::string* class_name) {
  if (class_name != nullptr) {
    
  } else {
    
  }
  class_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), class_name);
  // @@protoc_insertion_point(field_set_allocated:Proto.CreateComponent.class_name)
}

// bool is_to_all_thread = 3;
inline void CreateComponent::clear_is_to_all_thread() {
  is_to_all_thread_ = false;
}
inline bool CreateComponent::is_to_all_thread() const {
  // @@protoc_insertion_point(field_get:Proto.CreateComponent.is_to_all_thread)
  return is_to_all_thread_;
}
inline void CreateComponent::set_is_to_all_thread(bool value) {
  
  is_to_all_thread_ = value;
  // @@protoc_insertion_point(field_set:Proto.CreateComponent.is_to_all_thread)
}

// repeated .Proto.CreateComponentParam params = 4;
inline int CreateComponent::params_size() const {
  return params_.size();
}
inline void CreateComponent::clear_params() {
  params_.Clear();
}
inline ::Proto::CreateComponentParam* CreateComponent::mutable_params(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.CreateComponent.params)
  return params_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::CreateComponentParam >*
CreateComponent::mutable_params() {
  // @@protoc_insertion_point(field_mutable_list:Proto.CreateComponent.params)
  return &params_;
}
inline const ::Proto::CreateComponentParam& CreateComponent::params(int index) const {
  // @@protoc_insertion_point(field_get:Proto.CreateComponent.params)
  return params_.Get(index);
}
inline ::Proto::CreateComponentParam* CreateComponent::add_params() {
  // @@protoc_insertion_point(field_add:Proto.CreateComponent.params)
  return params_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::CreateComponentParam >&
CreateComponent::params() const {
  // @@protoc_insertion_point(field_list:Proto.CreateComponent.params)
  return params_;
}

// uint64 sn = 5;
inline void CreateComponent::clear_sn() {
  sn_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CreateComponent::sn() const {
  // @@protoc_insertion_point(field_get:Proto.CreateComponent.sn)
  return sn_;
}
inline void CreateComponent::set_sn(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  sn_ = value;
  // @@protoc_insertion_point(field_set:Proto.CreateComponent.sn)
}

// -------------------------------------------------------------------

// RemoveComponent

// uint64 sn = 1;
inline void RemoveComponent::clear_sn() {
  sn_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RemoveComponent::sn() const {
  // @@protoc_insertion_point(field_get:Proto.RemoveComponent.sn)
  return sn_;
}
inline void RemoveComponent::set_sn(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  sn_ = value;
  // @@protoc_insertion_point(field_set:Proto.RemoveComponent.sn)
}

// -------------------------------------------------------------------

// CreateSystem

// int32 thread_type = 1;
inline void CreateSystem::clear_thread_type() {
  thread_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateSystem::thread_type() const {
  // @@protoc_insertion_point(field_get:Proto.CreateSystem.thread_type)
  return thread_type_;
}
inline void CreateSystem::set_thread_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  thread_type_ = value;
  // @@protoc_insertion_point(field_set:Proto.CreateSystem.thread_type)
}

// string system_name = 2;
inline void CreateSystem::clear_system_name() {
  system_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateSystem::system_name() const {
  // @@protoc_insertion_point(field_get:Proto.CreateSystem.system_name)
  return system_name_.GetNoArena();
}
inline void CreateSystem::set_system_name(const std::string& value) {
  
  system_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Proto.CreateSystem.system_name)
}
inline void CreateSystem::set_system_name(std::string&& value) {
  
  system_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Proto.CreateSystem.system_name)
}
inline void CreateSystem::set_system_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  system_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proto.CreateSystem.system_name)
}
inline void CreateSystem::set_system_name(const char* value, size_t size) {
  
  system_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proto.CreateSystem.system_name)
}
inline std::string* CreateSystem::mutable_system_name() {
  
  // @@protoc_insertion_point(field_mutable:Proto.CreateSystem.system_name)
  return system_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateSystem::release_system_name() {
  // @@protoc_insertion_point(field_release:Proto.CreateSystem.system_name)
  
  return system_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateSystem::set_allocated_system_name(std::string* system_name) {
  if (system_name != nullptr) {
    
  } else {
    
  }
  system_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), system_name);
  // @@protoc_insertion_point(field_set_allocated:Proto.CreateSystem.system_name)
}

// -------------------------------------------------------------------

// AccountCheck

// string account = 1;
inline void AccountCheck::clear_account() {
  account_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AccountCheck::account() const {
  // @@protoc_insertion_point(field_get:Proto.AccountCheck.account)
  return account_.GetNoArena();
}
inline void AccountCheck::set_account(const std::string& value) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Proto.AccountCheck.account)
}
inline void AccountCheck::set_account(std::string&& value) {
  
  account_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Proto.AccountCheck.account)
}
inline void AccountCheck::set_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proto.AccountCheck.account)
}
inline void AccountCheck::set_account(const char* value, size_t size) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proto.AccountCheck.account)
}
inline std::string* AccountCheck::mutable_account() {
  
  // @@protoc_insertion_point(field_mutable:Proto.AccountCheck.account)
  return account_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AccountCheck::release_account() {
  // @@protoc_insertion_point(field_release:Proto.AccountCheck.account)
  
  return account_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AccountCheck::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:Proto.AccountCheck.account)
}

// string password = 2;
inline void AccountCheck::clear_password() {
  password_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AccountCheck::password() const {
  // @@protoc_insertion_point(field_get:Proto.AccountCheck.password)
  return password_.GetNoArena();
}
inline void AccountCheck::set_password(const std::string& value) {
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Proto.AccountCheck.password)
}
inline void AccountCheck::set_password(std::string&& value) {
  
  password_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Proto.AccountCheck.password)
}
inline void AccountCheck::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proto.AccountCheck.password)
}
inline void AccountCheck::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proto.AccountCheck.password)
}
inline std::string* AccountCheck::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:Proto.AccountCheck.password)
  return password_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AccountCheck::release_password() {
  // @@protoc_insertion_point(field_release:Proto.AccountCheck.password)
  
  return password_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AccountCheck::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:Proto.AccountCheck.password)
}

// -------------------------------------------------------------------

// AccountCheckRs

// .Proto.AccountCheckReturnCode return_code = 1;
inline void AccountCheckRs::clear_return_code() {
  return_code_ = 0;
}
inline ::Proto::AccountCheckReturnCode AccountCheckRs::return_code() const {
  // @@protoc_insertion_point(field_get:Proto.AccountCheckRs.return_code)
  return static_cast< ::Proto::AccountCheckReturnCode >(return_code_);
}
inline void AccountCheckRs::set_return_code(::Proto::AccountCheckReturnCode value) {
  
  return_code_ = value;
  // @@protoc_insertion_point(field_set:Proto.AccountCheckRs.return_code)
}

// -------------------------------------------------------------------

// RobotState

// string account = 1;
inline void RobotState::clear_account() {
  account_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RobotState::account() const {
  // @@protoc_insertion_point(field_get:Proto.RobotState.account)
  return account_.GetNoArena();
}
inline void RobotState::set_account(const std::string& value) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Proto.RobotState.account)
}
inline void RobotState::set_account(std::string&& value) {
  
  account_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Proto.RobotState.account)
}
inline void RobotState::set_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proto.RobotState.account)
}
inline void RobotState::set_account(const char* value, size_t size) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proto.RobotState.account)
}
inline std::string* RobotState::mutable_account() {
  
  // @@protoc_insertion_point(field_mutable:Proto.RobotState.account)
  return account_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RobotState::release_account() {
  // @@protoc_insertion_point(field_release:Proto.RobotState.account)
  
  return account_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RobotState::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:Proto.RobotState.account)
}

// int32 state = 2;
inline void RobotState::clear_state() {
  state_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RobotState::state() const {
  // @@protoc_insertion_point(field_get:Proto.RobotState.state)
  return state_;
}
inline void RobotState::set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:Proto.RobotState.state)
}

// -------------------------------------------------------------------

// RobotSyncState

// repeated .Proto.RobotState states = 1;
inline int RobotSyncState::states_size() const {
  return states_.size();
}
inline void RobotSyncState::clear_states() {
  states_.Clear();
}
inline ::Proto::RobotState* RobotSyncState::mutable_states(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.RobotSyncState.states)
  return states_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::RobotState >*
RobotSyncState::mutable_states() {
  // @@protoc_insertion_point(field_mutable_list:Proto.RobotSyncState.states)
  return &states_;
}
inline const ::Proto::RobotState& RobotSyncState::states(int index) const {
  // @@protoc_insertion_point(field_get:Proto.RobotSyncState.states)
  return states_.Get(index);
}
inline ::Proto::RobotState* RobotSyncState::add_states() {
  // @@protoc_insertion_point(field_add:Proto.RobotSyncState.states)
  return states_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::RobotState >&
RobotSyncState::states() const {
  // @@protoc_insertion_point(field_list:Proto.RobotSyncState.states)
  return states_;
}

// -------------------------------------------------------------------

// RobotCreate

// string account = 1;
inline void RobotCreate::clear_account() {
  account_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RobotCreate::account() const {
  // @@protoc_insertion_point(field_get:Proto.RobotCreate.account)
  return account_.GetNoArena();
}
inline void RobotCreate::set_account(const std::string& value) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Proto.RobotCreate.account)
}
inline void RobotCreate::set_account(std::string&& value) {
  
  account_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Proto.RobotCreate.account)
}
inline void RobotCreate::set_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proto.RobotCreate.account)
}
inline void RobotCreate::set_account(const char* value, size_t size) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proto.RobotCreate.account)
}
inline std::string* RobotCreate::mutable_account() {
  
  // @@protoc_insertion_point(field_mutable:Proto.RobotCreate.account)
  return account_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RobotCreate::release_account() {
  // @@protoc_insertion_point(field_release:Proto.RobotCreate.account)
  
  return account_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RobotCreate::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:Proto.RobotCreate.account)
}

// -------------------------------------------------------------------

// PlayerLittle

// uint64 sn = 1;
inline void PlayerLittle::clear_sn() {
  sn_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PlayerLittle::sn() const {
  // @@protoc_insertion_point(field_get:Proto.PlayerLittle.sn)
  return sn_;
}
inline void PlayerLittle::set_sn(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  sn_ = value;
  // @@protoc_insertion_point(field_set:Proto.PlayerLittle.sn)
}

// string name = 2;
inline void PlayerLittle::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PlayerLittle::name() const {
  // @@protoc_insertion_point(field_get:Proto.PlayerLittle.name)
  return name_.GetNoArena();
}
inline void PlayerLittle::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Proto.PlayerLittle.name)
}
inline void PlayerLittle::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Proto.PlayerLittle.name)
}
inline void PlayerLittle::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proto.PlayerLittle.name)
}
inline void PlayerLittle::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proto.PlayerLittle.name)
}
inline std::string* PlayerLittle::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:Proto.PlayerLittle.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PlayerLittle::release_name() {
  // @@protoc_insertion_point(field_release:Proto.PlayerLittle.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerLittle::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Proto.PlayerLittle.name)
}

// .Proto.Gender gender = 3;
inline void PlayerLittle::clear_gender() {
  gender_ = 0;
}
inline ::Proto::Gender PlayerLittle::gender() const {
  // @@protoc_insertion_point(field_get:Proto.PlayerLittle.gender)
  return static_cast< ::Proto::Gender >(gender_);
}
inline void PlayerLittle::set_gender(::Proto::Gender value) {
  
  gender_ = value;
  // @@protoc_insertion_point(field_set:Proto.PlayerLittle.gender)
}

// int32 level = 4;
inline void PlayerLittle::clear_level() {
  level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerLittle::level() const {
  // @@protoc_insertion_point(field_get:Proto.PlayerLittle.level)
  return level_;
}
inline void PlayerLittle::set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:Proto.PlayerLittle.level)
}

// .Proto.LastWorld last_world = 5;
inline bool PlayerLittle::has_last_world() const {
  return this != internal_default_instance() && last_world_ != nullptr;
}
inline const ::Proto::LastWorld& PlayerLittle::last_world() const {
  const ::Proto::LastWorld* p = last_world_;
  // @@protoc_insertion_point(field_get:Proto.PlayerLittle.last_world)
  return p != nullptr ? *p : *reinterpret_cast<const ::Proto::LastWorld*>(
      &::Proto::_LastWorld_default_instance_);
}
inline ::Proto::LastWorld* PlayerLittle::release_last_world() {
  // @@protoc_insertion_point(field_release:Proto.PlayerLittle.last_world)
  
  ::Proto::LastWorld* temp = last_world_;
  last_world_ = nullptr;
  return temp;
}
inline ::Proto::LastWorld* PlayerLittle::mutable_last_world() {
  
  if (last_world_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::LastWorld>(GetArenaNoVirtual());
    last_world_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Proto.PlayerLittle.last_world)
  return last_world_;
}
inline void PlayerLittle::set_allocated_last_world(::Proto::LastWorld* last_world) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_world_);
  }
  if (last_world) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      last_world = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, last_world, submessage_arena);
    }
    
  } else {
    
  }
  last_world_ = last_world;
  // @@protoc_insertion_point(field_set_allocated:Proto.PlayerLittle.last_world)
}

// .Proto.LastWorld last_dungeon = 6;
inline bool PlayerLittle::has_last_dungeon() const {
  return this != internal_default_instance() && last_dungeon_ != nullptr;
}
inline const ::Proto::LastWorld& PlayerLittle::last_dungeon() const {
  const ::Proto::LastWorld* p = last_dungeon_;
  // @@protoc_insertion_point(field_get:Proto.PlayerLittle.last_dungeon)
  return p != nullptr ? *p : *reinterpret_cast<const ::Proto::LastWorld*>(
      &::Proto::_LastWorld_default_instance_);
}
inline ::Proto::LastWorld* PlayerLittle::release_last_dungeon() {
  // @@protoc_insertion_point(field_release:Proto.PlayerLittle.last_dungeon)
  
  ::Proto::LastWorld* temp = last_dungeon_;
  last_dungeon_ = nullptr;
  return temp;
}
inline ::Proto::LastWorld* PlayerLittle::mutable_last_dungeon() {
  
  if (last_dungeon_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::LastWorld>(GetArenaNoVirtual());
    last_dungeon_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Proto.PlayerLittle.last_dungeon)
  return last_dungeon_;
}
inline void PlayerLittle::set_allocated_last_dungeon(::Proto::LastWorld* last_dungeon) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_dungeon_);
  }
  if (last_dungeon) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      last_dungeon = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, last_dungeon, submessage_arena);
    }
    
  } else {
    
  }
  last_dungeon_ = last_dungeon;
  // @@protoc_insertion_point(field_set_allocated:Proto.PlayerLittle.last_dungeon)
}

// -------------------------------------------------------------------

// PlayerList

// string account = 1;
inline void PlayerList::clear_account() {
  account_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PlayerList::account() const {
  // @@protoc_insertion_point(field_get:Proto.PlayerList.account)
  return account_.GetNoArena();
}
inline void PlayerList::set_account(const std::string& value) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Proto.PlayerList.account)
}
inline void PlayerList::set_account(std::string&& value) {
  
  account_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Proto.PlayerList.account)
}
inline void PlayerList::set_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proto.PlayerList.account)
}
inline void PlayerList::set_account(const char* value, size_t size) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proto.PlayerList.account)
}
inline std::string* PlayerList::mutable_account() {
  
  // @@protoc_insertion_point(field_mutable:Proto.PlayerList.account)
  return account_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PlayerList::release_account() {
  // @@protoc_insertion_point(field_release:Proto.PlayerList.account)
  
  return account_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerList::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:Proto.PlayerList.account)
}

// repeated .Proto.PlayerLittle player = 2;
inline int PlayerList::player_size() const {
  return player_.size();
}
inline void PlayerList::clear_player() {
  player_.Clear();
}
inline ::Proto::PlayerLittle* PlayerList::mutable_player(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.PlayerList.player)
  return player_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::PlayerLittle >*
PlayerList::mutable_player() {
  // @@protoc_insertion_point(field_mutable_list:Proto.PlayerList.player)
  return &player_;
}
inline const ::Proto::PlayerLittle& PlayerList::player(int index) const {
  // @@protoc_insertion_point(field_get:Proto.PlayerList.player)
  return player_.Get(index);
}
inline ::Proto::PlayerLittle* PlayerList::add_player() {
  // @@protoc_insertion_point(field_add:Proto.PlayerList.player)
  return player_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::PlayerLittle >&
PlayerList::player() const {
  // @@protoc_insertion_point(field_list:Proto.PlayerList.player)
  return player_;
}

// -------------------------------------------------------------------

// QueryPlayerList

// string account = 1;
inline void QueryPlayerList::clear_account() {
  account_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& QueryPlayerList::account() const {
  // @@protoc_insertion_point(field_get:Proto.QueryPlayerList.account)
  return account_.GetNoArena();
}
inline void QueryPlayerList::set_account(const std::string& value) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Proto.QueryPlayerList.account)
}
inline void QueryPlayerList::set_account(std::string&& value) {
  
  account_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Proto.QueryPlayerList.account)
}
inline void QueryPlayerList::set_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proto.QueryPlayerList.account)
}
inline void QueryPlayerList::set_account(const char* value, size_t size) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proto.QueryPlayerList.account)
}
inline std::string* QueryPlayerList::mutable_account() {
  
  // @@protoc_insertion_point(field_mutable:Proto.QueryPlayerList.account)
  return account_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* QueryPlayerList::release_account() {
  // @@protoc_insertion_point(field_release:Proto.QueryPlayerList.account)
  
  return account_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void QueryPlayerList::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:Proto.QueryPlayerList.account)
}

// -------------------------------------------------------------------

// QueryPlayer

// uint64 player_sn = 1;
inline void QueryPlayer::clear_player_sn() {
  player_sn_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 QueryPlayer::player_sn() const {
  // @@protoc_insertion_point(field_get:Proto.QueryPlayer.player_sn)
  return player_sn_;
}
inline void QueryPlayer::set_player_sn(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  player_sn_ = value;
  // @@protoc_insertion_point(field_set:Proto.QueryPlayer.player_sn)
}

// -------------------------------------------------------------------

// QueryPlayerRs

// string account = 1;
inline void QueryPlayerRs::clear_account() {
  account_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& QueryPlayerRs::account() const {
  // @@protoc_insertion_point(field_get:Proto.QueryPlayerRs.account)
  return account_.GetNoArena();
}
inline void QueryPlayerRs::set_account(const std::string& value) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Proto.QueryPlayerRs.account)
}
inline void QueryPlayerRs::set_account(std::string&& value) {
  
  account_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Proto.QueryPlayerRs.account)
}
inline void QueryPlayerRs::set_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proto.QueryPlayerRs.account)
}
inline void QueryPlayerRs::set_account(const char* value, size_t size) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proto.QueryPlayerRs.account)
}
inline std::string* QueryPlayerRs::mutable_account() {
  
  // @@protoc_insertion_point(field_mutable:Proto.QueryPlayerRs.account)
  return account_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* QueryPlayerRs::release_account() {
  // @@protoc_insertion_point(field_release:Proto.QueryPlayerRs.account)
  
  return account_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void QueryPlayerRs::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:Proto.QueryPlayerRs.account)
}

// .Proto.Player player = 2;
inline bool QueryPlayerRs::has_player() const {
  return this != internal_default_instance() && player_ != nullptr;
}
inline const ::Proto::Player& QueryPlayerRs::player() const {
  const ::Proto::Player* p = player_;
  // @@protoc_insertion_point(field_get:Proto.QueryPlayerRs.player)
  return p != nullptr ? *p : *reinterpret_cast<const ::Proto::Player*>(
      &::Proto::_Player_default_instance_);
}
inline ::Proto::Player* QueryPlayerRs::release_player() {
  // @@protoc_insertion_point(field_release:Proto.QueryPlayerRs.player)
  
  ::Proto::Player* temp = player_;
  player_ = nullptr;
  return temp;
}
inline ::Proto::Player* QueryPlayerRs::mutable_player() {
  
  if (player_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::Player>(GetArenaNoVirtual());
    player_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Proto.QueryPlayerRs.player)
  return player_;
}
inline void QueryPlayerRs::set_allocated_player(::Proto::Player* player) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_);
  }
  if (player) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      player = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player, submessage_arena);
    }
    
  } else {
    
  }
  player_ = player;
  // @@protoc_insertion_point(field_set_allocated:Proto.QueryPlayerRs.player)
}

// -------------------------------------------------------------------

// CreatePlayer

// string name = 1;
inline void CreatePlayer::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreatePlayer::name() const {
  // @@protoc_insertion_point(field_get:Proto.CreatePlayer.name)
  return name_.GetNoArena();
}
inline void CreatePlayer::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Proto.CreatePlayer.name)
}
inline void CreatePlayer::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Proto.CreatePlayer.name)
}
inline void CreatePlayer::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proto.CreatePlayer.name)
}
inline void CreatePlayer::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proto.CreatePlayer.name)
}
inline std::string* CreatePlayer::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:Proto.CreatePlayer.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreatePlayer::release_name() {
  // @@protoc_insertion_point(field_release:Proto.CreatePlayer.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreatePlayer::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Proto.CreatePlayer.name)
}

// .Proto.Gender gender = 2;
inline void CreatePlayer::clear_gender() {
  gender_ = 0;
}
inline ::Proto::Gender CreatePlayer::gender() const {
  // @@protoc_insertion_point(field_get:Proto.CreatePlayer.gender)
  return static_cast< ::Proto::Gender >(gender_);
}
inline void CreatePlayer::set_gender(::Proto::Gender value) {
  
  gender_ = value;
  // @@protoc_insertion_point(field_set:Proto.CreatePlayer.gender)
}

// -------------------------------------------------------------------

// CreatePlayerRs

// .Proto.CreatePlayerReturnCode return_code = 2;
inline void CreatePlayerRs::clear_return_code() {
  return_code_ = 0;
}
inline ::Proto::CreatePlayerReturnCode CreatePlayerRs::return_code() const {
  // @@protoc_insertion_point(field_get:Proto.CreatePlayerRs.return_code)
  return static_cast< ::Proto::CreatePlayerReturnCode >(return_code_);
}
inline void CreatePlayerRs::set_return_code(::Proto::CreatePlayerReturnCode value) {
  
  return_code_ = value;
  // @@protoc_insertion_point(field_set:Proto.CreatePlayerRs.return_code)
}

// -------------------------------------------------------------------

// CreatePlayerToDB

// string account = 2;
inline void CreatePlayerToDB::clear_account() {
  account_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreatePlayerToDB::account() const {
  // @@protoc_insertion_point(field_get:Proto.CreatePlayerToDB.account)
  return account_.GetNoArena();
}
inline void CreatePlayerToDB::set_account(const std::string& value) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Proto.CreatePlayerToDB.account)
}
inline void CreatePlayerToDB::set_account(std::string&& value) {
  
  account_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Proto.CreatePlayerToDB.account)
}
inline void CreatePlayerToDB::set_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proto.CreatePlayerToDB.account)
}
inline void CreatePlayerToDB::set_account(const char* value, size_t size) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proto.CreatePlayerToDB.account)
}
inline std::string* CreatePlayerToDB::mutable_account() {
  
  // @@protoc_insertion_point(field_mutable:Proto.CreatePlayerToDB.account)
  return account_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreatePlayerToDB::release_account() {
  // @@protoc_insertion_point(field_release:Proto.CreatePlayerToDB.account)
  
  return account_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreatePlayerToDB::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:Proto.CreatePlayerToDB.account)
}

// .Proto.Player player = 3;
inline bool CreatePlayerToDB::has_player() const {
  return this != internal_default_instance() && player_ != nullptr;
}
inline const ::Proto::Player& CreatePlayerToDB::player() const {
  const ::Proto::Player* p = player_;
  // @@protoc_insertion_point(field_get:Proto.CreatePlayerToDB.player)
  return p != nullptr ? *p : *reinterpret_cast<const ::Proto::Player*>(
      &::Proto::_Player_default_instance_);
}
inline ::Proto::Player* CreatePlayerToDB::release_player() {
  // @@protoc_insertion_point(field_release:Proto.CreatePlayerToDB.player)
  
  ::Proto::Player* temp = player_;
  player_ = nullptr;
  return temp;
}
inline ::Proto::Player* CreatePlayerToDB::mutable_player() {
  
  if (player_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::Player>(GetArenaNoVirtual());
    player_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Proto.CreatePlayerToDB.player)
  return player_;
}
inline void CreatePlayerToDB::set_allocated_player(::Proto::Player* player) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_);
  }
  if (player) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      player = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player, submessage_arena);
    }
    
  } else {
    
  }
  player_ = player;
  // @@protoc_insertion_point(field_set_allocated:Proto.CreatePlayerToDB.player)
}

// -------------------------------------------------------------------

// CreatePlayerToDBRs

// string account = 1;
inline void CreatePlayerToDBRs::clear_account() {
  account_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreatePlayerToDBRs::account() const {
  // @@protoc_insertion_point(field_get:Proto.CreatePlayerToDBRs.account)
  return account_.GetNoArena();
}
inline void CreatePlayerToDBRs::set_account(const std::string& value) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Proto.CreatePlayerToDBRs.account)
}
inline void CreatePlayerToDBRs::set_account(std::string&& value) {
  
  account_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Proto.CreatePlayerToDBRs.account)
}
inline void CreatePlayerToDBRs::set_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proto.CreatePlayerToDBRs.account)
}
inline void CreatePlayerToDBRs::set_account(const char* value, size_t size) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proto.CreatePlayerToDBRs.account)
}
inline std::string* CreatePlayerToDBRs::mutable_account() {
  
  // @@protoc_insertion_point(field_mutable:Proto.CreatePlayerToDBRs.account)
  return account_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreatePlayerToDBRs::release_account() {
  // @@protoc_insertion_point(field_release:Proto.CreatePlayerToDBRs.account)
  
  return account_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreatePlayerToDBRs::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:Proto.CreatePlayerToDBRs.account)
}

// .Proto.CreatePlayerReturnCode return_code = 2;
inline void CreatePlayerToDBRs::clear_return_code() {
  return_code_ = 0;
}
inline ::Proto::CreatePlayerReturnCode CreatePlayerToDBRs::return_code() const {
  // @@protoc_insertion_point(field_get:Proto.CreatePlayerToDBRs.return_code)
  return static_cast< ::Proto::CreatePlayerReturnCode >(return_code_);
}
inline void CreatePlayerToDBRs::set_return_code(::Proto::CreatePlayerReturnCode value) {
  
  return_code_ = value;
  // @@protoc_insertion_point(field_set:Proto.CreatePlayerToDBRs.return_code)
}

// -------------------------------------------------------------------

// SelectPlayer

// uint64 player_sn = 1;
inline void SelectPlayer::clear_player_sn() {
  player_sn_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SelectPlayer::player_sn() const {
  // @@protoc_insertion_point(field_get:Proto.SelectPlayer.player_sn)
  return player_sn_;
}
inline void SelectPlayer::set_player_sn(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  player_sn_ = value;
  // @@protoc_insertion_point(field_set:Proto.SelectPlayer.player_sn)
}

// -------------------------------------------------------------------

// SelectPlayerRs

// .Proto.SelectPlayerRs.SelectPlayerReturnCode return_code = 1;
inline void SelectPlayerRs::clear_return_code() {
  return_code_ = 0;
}
inline ::Proto::SelectPlayerRs_SelectPlayerReturnCode SelectPlayerRs::return_code() const {
  // @@protoc_insertion_point(field_get:Proto.SelectPlayerRs.return_code)
  return static_cast< ::Proto::SelectPlayerRs_SelectPlayerReturnCode >(return_code_);
}
inline void SelectPlayerRs::set_return_code(::Proto::SelectPlayerRs_SelectPlayerReturnCode value) {
  
  return_code_ = value;
  // @@protoc_insertion_point(field_set:Proto.SelectPlayerRs.return_code)
}

// -------------------------------------------------------------------

// SavePlayer

// uint64 player_sn = 1;
inline void SavePlayer::clear_player_sn() {
  player_sn_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SavePlayer::player_sn() const {
  // @@protoc_insertion_point(field_get:Proto.SavePlayer.player_sn)
  return player_sn_;
}
inline void SavePlayer::set_player_sn(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  player_sn_ = value;
  // @@protoc_insertion_point(field_set:Proto.SavePlayer.player_sn)
}

// .Proto.Player player = 2;
inline bool SavePlayer::has_player() const {
  return this != internal_default_instance() && player_ != nullptr;
}
inline const ::Proto::Player& SavePlayer::player() const {
  const ::Proto::Player* p = player_;
  // @@protoc_insertion_point(field_get:Proto.SavePlayer.player)
  return p != nullptr ? *p : *reinterpret_cast<const ::Proto::Player*>(
      &::Proto::_Player_default_instance_);
}
inline ::Proto::Player* SavePlayer::release_player() {
  // @@protoc_insertion_point(field_release:Proto.SavePlayer.player)
  
  ::Proto::Player* temp = player_;
  player_ = nullptr;
  return temp;
}
inline ::Proto::Player* SavePlayer::mutable_player() {
  
  if (player_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::Player>(GetArenaNoVirtual());
    player_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Proto.SavePlayer.player)
  return player_;
}
inline void SavePlayer::set_allocated_player(::Proto::Player* player) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_);
  }
  if (player) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      player = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player, submessage_arena);
    }
    
  } else {
    
  }
  player_ = player;
  // @@protoc_insertion_point(field_set_allocated:Proto.SavePlayer.player)
}

// -------------------------------------------------------------------

// WorldSyncToGather

// uint64 world_sn = 1;
inline void WorldSyncToGather::clear_world_sn() {
  world_sn_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 WorldSyncToGather::world_sn() const {
  // @@protoc_insertion_point(field_get:Proto.WorldSyncToGather.world_sn)
  return world_sn_;
}
inline void WorldSyncToGather::set_world_sn(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  world_sn_ = value;
  // @@protoc_insertion_point(field_set:Proto.WorldSyncToGather.world_sn)
}

// int32 world_id = 2;
inline void WorldSyncToGather::clear_world_id() {
  world_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WorldSyncToGather::world_id() const {
  // @@protoc_insertion_point(field_get:Proto.WorldSyncToGather.world_id)
  return world_id_;
}
inline void WorldSyncToGather::set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  world_id_ = value;
  // @@protoc_insertion_point(field_set:Proto.WorldSyncToGather.world_id)
}

// int32 online = 3;
inline void WorldSyncToGather::clear_online() {
  online_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WorldSyncToGather::online() const {
  // @@protoc_insertion_point(field_get:Proto.WorldSyncToGather.online)
  return online_;
}
inline void WorldSyncToGather::set_online(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  online_ = value;
  // @@protoc_insertion_point(field_set:Proto.WorldSyncToGather.online)
}

// -------------------------------------------------------------------

// WorldProxySyncToGather

// uint64 world_sn = 1;
inline void WorldProxySyncToGather::clear_world_sn() {
  world_sn_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 WorldProxySyncToGather::world_sn() const {
  // @@protoc_insertion_point(field_get:Proto.WorldProxySyncToGather.world_sn)
  return world_sn_;
}
inline void WorldProxySyncToGather::set_world_sn(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  world_sn_ = value;
  // @@protoc_insertion_point(field_set:Proto.WorldProxySyncToGather.world_sn)
}

// bool is_remove = 2;
inline void WorldProxySyncToGather::clear_is_remove() {
  is_remove_ = false;
}
inline bool WorldProxySyncToGather::is_remove() const {
  // @@protoc_insertion_point(field_get:Proto.WorldProxySyncToGather.is_remove)
  return is_remove_;
}
inline void WorldProxySyncToGather::set_is_remove(bool value) {
  
  is_remove_ = value;
  // @@protoc_insertion_point(field_set:Proto.WorldProxySyncToGather.is_remove)
}

// int32 world_id = 3;
inline void WorldProxySyncToGather::clear_world_id() {
  world_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WorldProxySyncToGather::world_id() const {
  // @@protoc_insertion_point(field_get:Proto.WorldProxySyncToGather.world_id)
  return world_id_;
}
inline void WorldProxySyncToGather::set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  world_id_ = value;
  // @@protoc_insertion_point(field_set:Proto.WorldProxySyncToGather.world_id)
}

// int32 online = 4;
inline void WorldProxySyncToGather::clear_online() {
  online_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WorldProxySyncToGather::online() const {
  // @@protoc_insertion_point(field_get:Proto.WorldProxySyncToGather.online)
  return online_;
}
inline void WorldProxySyncToGather::set_online(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  online_ = value;
  // @@protoc_insertion_point(field_set:Proto.WorldProxySyncToGather.online)
}

// -------------------------------------------------------------------

// GameToken

// .Proto.GameToken.ReturnCode return_code = 1;
inline void GameToken::clear_return_code() {
  return_code_ = 0;
}
inline ::Proto::GameToken_ReturnCode GameToken::return_code() const {
  // @@protoc_insertion_point(field_get:Proto.GameToken.return_code)
  return static_cast< ::Proto::GameToken_ReturnCode >(return_code_);
}
inline void GameToken::set_return_code(::Proto::GameToken_ReturnCode value) {
  
  return_code_ = value;
  // @@protoc_insertion_point(field_set:Proto.GameToken.return_code)
}

// string token = 2;
inline void GameToken::clear_token() {
  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GameToken::token() const {
  // @@protoc_insertion_point(field_get:Proto.GameToken.token)
  return token_.GetNoArena();
}
inline void GameToken::set_token(const std::string& value) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Proto.GameToken.token)
}
inline void GameToken::set_token(std::string&& value) {
  
  token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Proto.GameToken.token)
}
inline void GameToken::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proto.GameToken.token)
}
inline void GameToken::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proto.GameToken.token)
}
inline std::string* GameToken::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:Proto.GameToken.token)
  return token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GameToken::release_token() {
  // @@protoc_insertion_point(field_release:Proto.GameToken.token)
  
  return token_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GameToken::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:Proto.GameToken.token)
}

// string ip = 3;
inline void GameToken::clear_ip() {
  ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GameToken::ip() const {
  // @@protoc_insertion_point(field_get:Proto.GameToken.ip)
  return ip_.GetNoArena();
}
inline void GameToken::set_ip(const std::string& value) {
  
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Proto.GameToken.ip)
}
inline void GameToken::set_ip(std::string&& value) {
  
  ip_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Proto.GameToken.ip)
}
inline void GameToken::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proto.GameToken.ip)
}
inline void GameToken::set_ip(const char* value, size_t size) {
  
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proto.GameToken.ip)
}
inline std::string* GameToken::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:Proto.GameToken.ip)
  return ip_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GameToken::release_ip() {
  // @@protoc_insertion_point(field_release:Proto.GameToken.ip)
  
  return ip_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GameToken::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:Proto.GameToken.ip)
}

// int32 port = 4;
inline void GameToken::clear_port() {
  port_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameToken::port() const {
  // @@protoc_insertion_point(field_get:Proto.GameToken.port)
  return port_;
}
inline void GameToken::set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:Proto.GameToken.port)
}

// -------------------------------------------------------------------

// LoginByToken

// string account = 1;
inline void LoginByToken::clear_account() {
  account_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LoginByToken::account() const {
  // @@protoc_insertion_point(field_get:Proto.LoginByToken.account)
  return account_.GetNoArena();
}
inline void LoginByToken::set_account(const std::string& value) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Proto.LoginByToken.account)
}
inline void LoginByToken::set_account(std::string&& value) {
  
  account_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Proto.LoginByToken.account)
}
inline void LoginByToken::set_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proto.LoginByToken.account)
}
inline void LoginByToken::set_account(const char* value, size_t size) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proto.LoginByToken.account)
}
inline std::string* LoginByToken::mutable_account() {
  
  // @@protoc_insertion_point(field_mutable:Proto.LoginByToken.account)
  return account_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LoginByToken::release_account() {
  // @@protoc_insertion_point(field_release:Proto.LoginByToken.account)
  
  return account_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LoginByToken::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:Proto.LoginByToken.account)
}

// string token = 2;
inline void LoginByToken::clear_token() {
  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LoginByToken::token() const {
  // @@protoc_insertion_point(field_get:Proto.LoginByToken.token)
  return token_.GetNoArena();
}
inline void LoginByToken::set_token(const std::string& value) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Proto.LoginByToken.token)
}
inline void LoginByToken::set_token(std::string&& value) {
  
  token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Proto.LoginByToken.token)
}
inline void LoginByToken::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proto.LoginByToken.token)
}
inline void LoginByToken::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proto.LoginByToken.token)
}
inline std::string* LoginByToken::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:Proto.LoginByToken.token)
  return token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LoginByToken::release_token() {
  // @@protoc_insertion_point(field_release:Proto.LoginByToken.token)
  
  return token_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LoginByToken::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:Proto.LoginByToken.token)
}

// -------------------------------------------------------------------

// LoginByTokenRs

// .Proto.LoginByTokenRs.ReturnCode return_code = 1;
inline void LoginByTokenRs::clear_return_code() {
  return_code_ = 0;
}
inline ::Proto::LoginByTokenRs_ReturnCode LoginByTokenRs::return_code() const {
  // @@protoc_insertion_point(field_get:Proto.LoginByTokenRs.return_code)
  return static_cast< ::Proto::LoginByTokenRs_ReturnCode >(return_code_);
}
inline void LoginByTokenRs::set_return_code(::Proto::LoginByTokenRs_ReturnCode value) {
  
  return_code_ = value;
  // @@protoc_insertion_point(field_set:Proto.LoginByTokenRs.return_code)
}

// -------------------------------------------------------------------

// LoginTokenToRedis

// string account = 1;
inline void LoginTokenToRedis::clear_account() {
  account_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LoginTokenToRedis::account() const {
  // @@protoc_insertion_point(field_get:Proto.LoginTokenToRedis.account)
  return account_.GetNoArena();
}
inline void LoginTokenToRedis::set_account(const std::string& value) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Proto.LoginTokenToRedis.account)
}
inline void LoginTokenToRedis::set_account(std::string&& value) {
  
  account_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Proto.LoginTokenToRedis.account)
}
inline void LoginTokenToRedis::set_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proto.LoginTokenToRedis.account)
}
inline void LoginTokenToRedis::set_account(const char* value, size_t size) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proto.LoginTokenToRedis.account)
}
inline std::string* LoginTokenToRedis::mutable_account() {
  
  // @@protoc_insertion_point(field_mutable:Proto.LoginTokenToRedis.account)
  return account_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LoginTokenToRedis::release_account() {
  // @@protoc_insertion_point(field_release:Proto.LoginTokenToRedis.account)
  
  return account_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LoginTokenToRedis::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:Proto.LoginTokenToRedis.account)
}

// uint64 player_sn = 2;
inline void LoginTokenToRedis::clear_player_sn() {
  player_sn_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LoginTokenToRedis::player_sn() const {
  // @@protoc_insertion_point(field_get:Proto.LoginTokenToRedis.player_sn)
  return player_sn_;
}
inline void LoginTokenToRedis::set_player_sn(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  player_sn_ = value;
  // @@protoc_insertion_point(field_set:Proto.LoginTokenToRedis.player_sn)
}

// -------------------------------------------------------------------

// LoginTokenToRedisRs

// string account = 1;
inline void LoginTokenToRedisRs::clear_account() {
  account_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LoginTokenToRedisRs::account() const {
  // @@protoc_insertion_point(field_get:Proto.LoginTokenToRedisRs.account)
  return account_.GetNoArena();
}
inline void LoginTokenToRedisRs::set_account(const std::string& value) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Proto.LoginTokenToRedisRs.account)
}
inline void LoginTokenToRedisRs::set_account(std::string&& value) {
  
  account_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Proto.LoginTokenToRedisRs.account)
}
inline void LoginTokenToRedisRs::set_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proto.LoginTokenToRedisRs.account)
}
inline void LoginTokenToRedisRs::set_account(const char* value, size_t size) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proto.LoginTokenToRedisRs.account)
}
inline std::string* LoginTokenToRedisRs::mutable_account() {
  
  // @@protoc_insertion_point(field_mutable:Proto.LoginTokenToRedisRs.account)
  return account_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LoginTokenToRedisRs::release_account() {
  // @@protoc_insertion_point(field_release:Proto.LoginTokenToRedisRs.account)
  
  return account_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LoginTokenToRedisRs::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:Proto.LoginTokenToRedisRs.account)
}

// string token = 2;
inline void LoginTokenToRedisRs::clear_token() {
  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LoginTokenToRedisRs::token() const {
  // @@protoc_insertion_point(field_get:Proto.LoginTokenToRedisRs.token)
  return token_.GetNoArena();
}
inline void LoginTokenToRedisRs::set_token(const std::string& value) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Proto.LoginTokenToRedisRs.token)
}
inline void LoginTokenToRedisRs::set_token(std::string&& value) {
  
  token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Proto.LoginTokenToRedisRs.token)
}
inline void LoginTokenToRedisRs::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proto.LoginTokenToRedisRs.token)
}
inline void LoginTokenToRedisRs::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proto.LoginTokenToRedisRs.token)
}
inline std::string* LoginTokenToRedisRs::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:Proto.LoginTokenToRedisRs.token)
  return token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LoginTokenToRedisRs::release_token() {
  // @@protoc_insertion_point(field_release:Proto.LoginTokenToRedisRs.token)
  
  return token_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LoginTokenToRedisRs::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:Proto.LoginTokenToRedisRs.token)
}

// -------------------------------------------------------------------

// AccountQueryOnlineToRedis

// string account = 1;
inline void AccountQueryOnlineToRedis::clear_account() {
  account_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AccountQueryOnlineToRedis::account() const {
  // @@protoc_insertion_point(field_get:Proto.AccountQueryOnlineToRedis.account)
  return account_.GetNoArena();
}
inline void AccountQueryOnlineToRedis::set_account(const std::string& value) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Proto.AccountQueryOnlineToRedis.account)
}
inline void AccountQueryOnlineToRedis::set_account(std::string&& value) {
  
  account_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Proto.AccountQueryOnlineToRedis.account)
}
inline void AccountQueryOnlineToRedis::set_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proto.AccountQueryOnlineToRedis.account)
}
inline void AccountQueryOnlineToRedis::set_account(const char* value, size_t size) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proto.AccountQueryOnlineToRedis.account)
}
inline std::string* AccountQueryOnlineToRedis::mutable_account() {
  
  // @@protoc_insertion_point(field_mutable:Proto.AccountQueryOnlineToRedis.account)
  return account_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AccountQueryOnlineToRedis::release_account() {
  // @@protoc_insertion_point(field_release:Proto.AccountQueryOnlineToRedis.account)
  
  return account_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AccountQueryOnlineToRedis::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:Proto.AccountQueryOnlineToRedis.account)
}

// -------------------------------------------------------------------

// AccountQueryOnlineToRedisRs

// string account = 1;
inline void AccountQueryOnlineToRedisRs::clear_account() {
  account_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AccountQueryOnlineToRedisRs::account() const {
  // @@protoc_insertion_point(field_get:Proto.AccountQueryOnlineToRedisRs.account)
  return account_.GetNoArena();
}
inline void AccountQueryOnlineToRedisRs::set_account(const std::string& value) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Proto.AccountQueryOnlineToRedisRs.account)
}
inline void AccountQueryOnlineToRedisRs::set_account(std::string&& value) {
  
  account_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Proto.AccountQueryOnlineToRedisRs.account)
}
inline void AccountQueryOnlineToRedisRs::set_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proto.AccountQueryOnlineToRedisRs.account)
}
inline void AccountQueryOnlineToRedisRs::set_account(const char* value, size_t size) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proto.AccountQueryOnlineToRedisRs.account)
}
inline std::string* AccountQueryOnlineToRedisRs::mutable_account() {
  
  // @@protoc_insertion_point(field_mutable:Proto.AccountQueryOnlineToRedisRs.account)
  return account_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AccountQueryOnlineToRedisRs::release_account() {
  // @@protoc_insertion_point(field_release:Proto.AccountQueryOnlineToRedisRs.account)
  
  return account_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AccountQueryOnlineToRedisRs::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:Proto.AccountQueryOnlineToRedisRs.account)
}

// .Proto.AccountQueryOnlineToRedisRs.ReturnCode return_code = 2;
inline void AccountQueryOnlineToRedisRs::clear_return_code() {
  return_code_ = 0;
}
inline ::Proto::AccountQueryOnlineToRedisRs_ReturnCode AccountQueryOnlineToRedisRs::return_code() const {
  // @@protoc_insertion_point(field_get:Proto.AccountQueryOnlineToRedisRs.return_code)
  return static_cast< ::Proto::AccountQueryOnlineToRedisRs_ReturnCode >(return_code_);
}
inline void AccountQueryOnlineToRedisRs::set_return_code(::Proto::AccountQueryOnlineToRedisRs_ReturnCode value) {
  
  return_code_ = value;
  // @@protoc_insertion_point(field_set:Proto.AccountQueryOnlineToRedisRs.return_code)
}

// -------------------------------------------------------------------

// AccountSyncOnlineToRedis

// string account = 1;
inline void AccountSyncOnlineToRedis::clear_account() {
  account_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AccountSyncOnlineToRedis::account() const {
  // @@protoc_insertion_point(field_get:Proto.AccountSyncOnlineToRedis.account)
  return account_.GetNoArena();
}
inline void AccountSyncOnlineToRedis::set_account(const std::string& value) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Proto.AccountSyncOnlineToRedis.account)
}
inline void AccountSyncOnlineToRedis::set_account(std::string&& value) {
  
  account_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Proto.AccountSyncOnlineToRedis.account)
}
inline void AccountSyncOnlineToRedis::set_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proto.AccountSyncOnlineToRedis.account)
}
inline void AccountSyncOnlineToRedis::set_account(const char* value, size_t size) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proto.AccountSyncOnlineToRedis.account)
}
inline std::string* AccountSyncOnlineToRedis::mutable_account() {
  
  // @@protoc_insertion_point(field_mutable:Proto.AccountSyncOnlineToRedis.account)
  return account_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AccountSyncOnlineToRedis::release_account() {
  // @@protoc_insertion_point(field_release:Proto.AccountSyncOnlineToRedis.account)
  
  return account_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AccountSyncOnlineToRedis::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:Proto.AccountSyncOnlineToRedis.account)
}

// -------------------------------------------------------------------

// AccountDeleteOnlineToRedis

// string account = 1;
inline void AccountDeleteOnlineToRedis::clear_account() {
  account_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AccountDeleteOnlineToRedis::account() const {
  // @@protoc_insertion_point(field_get:Proto.AccountDeleteOnlineToRedis.account)
  return account_.GetNoArena();
}
inline void AccountDeleteOnlineToRedis::set_account(const std::string& value) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Proto.AccountDeleteOnlineToRedis.account)
}
inline void AccountDeleteOnlineToRedis::set_account(std::string&& value) {
  
  account_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Proto.AccountDeleteOnlineToRedis.account)
}
inline void AccountDeleteOnlineToRedis::set_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proto.AccountDeleteOnlineToRedis.account)
}
inline void AccountDeleteOnlineToRedis::set_account(const char* value, size_t size) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proto.AccountDeleteOnlineToRedis.account)
}
inline std::string* AccountDeleteOnlineToRedis::mutable_account() {
  
  // @@protoc_insertion_point(field_mutable:Proto.AccountDeleteOnlineToRedis.account)
  return account_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AccountDeleteOnlineToRedis::release_account() {
  // @@protoc_insertion_point(field_release:Proto.AccountDeleteOnlineToRedis.account)
  
  return account_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AccountDeleteOnlineToRedis::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:Proto.AccountDeleteOnlineToRedis.account)
}

// -------------------------------------------------------------------

// PlayerSyncOnlineToRedis

// string account = 1;
inline void PlayerSyncOnlineToRedis::clear_account() {
  account_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PlayerSyncOnlineToRedis::account() const {
  // @@protoc_insertion_point(field_get:Proto.PlayerSyncOnlineToRedis.account)
  return account_.GetNoArena();
}
inline void PlayerSyncOnlineToRedis::set_account(const std::string& value) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Proto.PlayerSyncOnlineToRedis.account)
}
inline void PlayerSyncOnlineToRedis::set_account(std::string&& value) {
  
  account_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Proto.PlayerSyncOnlineToRedis.account)
}
inline void PlayerSyncOnlineToRedis::set_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proto.PlayerSyncOnlineToRedis.account)
}
inline void PlayerSyncOnlineToRedis::set_account(const char* value, size_t size) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proto.PlayerSyncOnlineToRedis.account)
}
inline std::string* PlayerSyncOnlineToRedis::mutable_account() {
  
  // @@protoc_insertion_point(field_mutable:Proto.PlayerSyncOnlineToRedis.account)
  return account_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PlayerSyncOnlineToRedis::release_account() {
  // @@protoc_insertion_point(field_release:Proto.PlayerSyncOnlineToRedis.account)
  
  return account_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerSyncOnlineToRedis::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:Proto.PlayerSyncOnlineToRedis.account)
}

// int32 version = 2;
inline void PlayerSyncOnlineToRedis::clear_version() {
  version_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerSyncOnlineToRedis::version() const {
  // @@protoc_insertion_point(field_get:Proto.PlayerSyncOnlineToRedis.version)
  return version_;
}
inline void PlayerSyncOnlineToRedis::set_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:Proto.PlayerSyncOnlineToRedis.version)
}

// -------------------------------------------------------------------

// PlayerDeleteOnlineToRedis

// string account = 1;
inline void PlayerDeleteOnlineToRedis::clear_account() {
  account_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PlayerDeleteOnlineToRedis::account() const {
  // @@protoc_insertion_point(field_get:Proto.PlayerDeleteOnlineToRedis.account)
  return account_.GetNoArena();
}
inline void PlayerDeleteOnlineToRedis::set_account(const std::string& value) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Proto.PlayerDeleteOnlineToRedis.account)
}
inline void PlayerDeleteOnlineToRedis::set_account(std::string&& value) {
  
  account_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Proto.PlayerDeleteOnlineToRedis.account)
}
inline void PlayerDeleteOnlineToRedis::set_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proto.PlayerDeleteOnlineToRedis.account)
}
inline void PlayerDeleteOnlineToRedis::set_account(const char* value, size_t size) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proto.PlayerDeleteOnlineToRedis.account)
}
inline std::string* PlayerDeleteOnlineToRedis::mutable_account() {
  
  // @@protoc_insertion_point(field_mutable:Proto.PlayerDeleteOnlineToRedis.account)
  return account_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PlayerDeleteOnlineToRedis::release_account() {
  // @@protoc_insertion_point(field_release:Proto.PlayerDeleteOnlineToRedis.account)
  
  return account_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerDeleteOnlineToRedis::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:Proto.PlayerDeleteOnlineToRedis.account)
}

// int32 version = 2;
inline void PlayerDeleteOnlineToRedis::clear_version() {
  version_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerDeleteOnlineToRedis::version() const {
  // @@protoc_insertion_point(field_get:Proto.PlayerDeleteOnlineToRedis.version)
  return version_;
}
inline void PlayerDeleteOnlineToRedis::set_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:Proto.PlayerDeleteOnlineToRedis.version)
}

// -------------------------------------------------------------------

// GameTokenToRedis

// string account = 1;
inline void GameTokenToRedis::clear_account() {
  account_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GameTokenToRedis::account() const {
  // @@protoc_insertion_point(field_get:Proto.GameTokenToRedis.account)
  return account_.GetNoArena();
}
inline void GameTokenToRedis::set_account(const std::string& value) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Proto.GameTokenToRedis.account)
}
inline void GameTokenToRedis::set_account(std::string&& value) {
  
  account_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Proto.GameTokenToRedis.account)
}
inline void GameTokenToRedis::set_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proto.GameTokenToRedis.account)
}
inline void GameTokenToRedis::set_account(const char* value, size_t size) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proto.GameTokenToRedis.account)
}
inline std::string* GameTokenToRedis::mutable_account() {
  
  // @@protoc_insertion_point(field_mutable:Proto.GameTokenToRedis.account)
  return account_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GameTokenToRedis::release_account() {
  // @@protoc_insertion_point(field_release:Proto.GameTokenToRedis.account)
  
  return account_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GameTokenToRedis::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:Proto.GameTokenToRedis.account)
}

// -------------------------------------------------------------------

// TokenInfo

// string token = 1;
inline void TokenInfo::clear_token() {
  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TokenInfo::token() const {
  // @@protoc_insertion_point(field_get:Proto.TokenInfo.token)
  return token_.GetNoArena();
}
inline void TokenInfo::set_token(const std::string& value) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Proto.TokenInfo.token)
}
inline void TokenInfo::set_token(std::string&& value) {
  
  token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Proto.TokenInfo.token)
}
inline void TokenInfo::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proto.TokenInfo.token)
}
inline void TokenInfo::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proto.TokenInfo.token)
}
inline std::string* TokenInfo::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:Proto.TokenInfo.token)
  return token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TokenInfo::release_token() {
  // @@protoc_insertion_point(field_release:Proto.TokenInfo.token)
  
  return token_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TokenInfo::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:Proto.TokenInfo.token)
}

// uint64 player_sn = 2;
inline void TokenInfo::clear_player_sn() {
  player_sn_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TokenInfo::player_sn() const {
  // @@protoc_insertion_point(field_get:Proto.TokenInfo.player_sn)
  return player_sn_;
}
inline void TokenInfo::set_player_sn(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  player_sn_ = value;
  // @@protoc_insertion_point(field_set:Proto.TokenInfo.player_sn)
}

// -------------------------------------------------------------------

// GameTokenToRedisRs

// string account = 1;
inline void GameTokenToRedisRs::clear_account() {
  account_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GameTokenToRedisRs::account() const {
  // @@protoc_insertion_point(field_get:Proto.GameTokenToRedisRs.account)
  return account_.GetNoArena();
}
inline void GameTokenToRedisRs::set_account(const std::string& value) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Proto.GameTokenToRedisRs.account)
}
inline void GameTokenToRedisRs::set_account(std::string&& value) {
  
  account_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Proto.GameTokenToRedisRs.account)
}
inline void GameTokenToRedisRs::set_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proto.GameTokenToRedisRs.account)
}
inline void GameTokenToRedisRs::set_account(const char* value, size_t size) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proto.GameTokenToRedisRs.account)
}
inline std::string* GameTokenToRedisRs::mutable_account() {
  
  // @@protoc_insertion_point(field_mutable:Proto.GameTokenToRedisRs.account)
  return account_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GameTokenToRedisRs::release_account() {
  // @@protoc_insertion_point(field_release:Proto.GameTokenToRedisRs.account)
  
  return account_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GameTokenToRedisRs::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:Proto.GameTokenToRedisRs.account)
}

// .Proto.TokenInfo token_info = 2;
inline bool GameTokenToRedisRs::has_token_info() const {
  return this != internal_default_instance() && token_info_ != nullptr;
}
inline void GameTokenToRedisRs::clear_token_info() {
  if (GetArenaNoVirtual() == nullptr && token_info_ != nullptr) {
    delete token_info_;
  }
  token_info_ = nullptr;
}
inline const ::Proto::TokenInfo& GameTokenToRedisRs::token_info() const {
  const ::Proto::TokenInfo* p = token_info_;
  // @@protoc_insertion_point(field_get:Proto.GameTokenToRedisRs.token_info)
  return p != nullptr ? *p : *reinterpret_cast<const ::Proto::TokenInfo*>(
      &::Proto::_TokenInfo_default_instance_);
}
inline ::Proto::TokenInfo* GameTokenToRedisRs::release_token_info() {
  // @@protoc_insertion_point(field_release:Proto.GameTokenToRedisRs.token_info)
  
  ::Proto::TokenInfo* temp = token_info_;
  token_info_ = nullptr;
  return temp;
}
inline ::Proto::TokenInfo* GameTokenToRedisRs::mutable_token_info() {
  
  if (token_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::TokenInfo>(GetArenaNoVirtual());
    token_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Proto.GameTokenToRedisRs.token_info)
  return token_info_;
}
inline void GameTokenToRedisRs::set_allocated_token_info(::Proto::TokenInfo* token_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete token_info_;
  }
  if (token_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      token_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, token_info, submessage_arena);
    }
    
  } else {
    
  }
  token_info_ = token_info;
  // @@protoc_insertion_point(field_set_allocated:Proto.GameTokenToRedisRs.token_info)
}

// -------------------------------------------------------------------

// SyncPlayer

// int32 app_id = 1;
inline void SyncPlayer::clear_app_id() {
  app_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SyncPlayer::app_id() const {
  // @@protoc_insertion_point(field_get:Proto.SyncPlayer.app_id)
  return app_id_;
}
inline void SyncPlayer::set_app_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  app_id_ = value;
  // @@protoc_insertion_point(field_set:Proto.SyncPlayer.app_id)
}

// string account = 2;
inline void SyncPlayer::clear_account() {
  account_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SyncPlayer::account() const {
  // @@protoc_insertion_point(field_get:Proto.SyncPlayer.account)
  return account_.GetNoArena();
}
inline void SyncPlayer::set_account(const std::string& value) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Proto.SyncPlayer.account)
}
inline void SyncPlayer::set_account(std::string&& value) {
  
  account_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Proto.SyncPlayer.account)
}
inline void SyncPlayer::set_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proto.SyncPlayer.account)
}
inline void SyncPlayer::set_account(const char* value, size_t size) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proto.SyncPlayer.account)
}
inline std::string* SyncPlayer::mutable_account() {
  
  // @@protoc_insertion_point(field_mutable:Proto.SyncPlayer.account)
  return account_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SyncPlayer::release_account() {
  // @@protoc_insertion_point(field_release:Proto.SyncPlayer.account)
  
  return account_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SyncPlayer::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:Proto.SyncPlayer.account)
}

// .Proto.Player player = 3;
inline bool SyncPlayer::has_player() const {
  return this != internal_default_instance() && player_ != nullptr;
}
inline const ::Proto::Player& SyncPlayer::player() const {
  const ::Proto::Player* p = player_;
  // @@protoc_insertion_point(field_get:Proto.SyncPlayer.player)
  return p != nullptr ? *p : *reinterpret_cast<const ::Proto::Player*>(
      &::Proto::_Player_default_instance_);
}
inline ::Proto::Player* SyncPlayer::release_player() {
  // @@protoc_insertion_point(field_release:Proto.SyncPlayer.player)
  
  ::Proto::Player* temp = player_;
  player_ = nullptr;
  return temp;
}
inline ::Proto::Player* SyncPlayer::mutable_player() {
  
  if (player_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::Player>(GetArenaNoVirtual());
    player_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Proto.SyncPlayer.player)
  return player_;
}
inline void SyncPlayer::set_allocated_player(::Proto::Player* player) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_);
  }
  if (player) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      player = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player, submessage_arena);
    }
    
  } else {
    
  }
  player_ = player;
  // @@protoc_insertion_point(field_set_allocated:Proto.SyncPlayer.player)
}

// -------------------------------------------------------------------

// EnterWorld

// int32 world_id = 1;
inline void EnterWorld::clear_world_id() {
  world_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EnterWorld::world_id() const {
  // @@protoc_insertion_point(field_get:Proto.EnterWorld.world_id)
  return world_id_;
}
inline void EnterWorld::set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  world_id_ = value;
  // @@protoc_insertion_point(field_set:Proto.EnterWorld.world_id)
}

// .Proto.Vector3D position = 2;
inline bool EnterWorld::has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline const ::Proto::Vector3D& EnterWorld::position() const {
  const ::Proto::Vector3D* p = position_;
  // @@protoc_insertion_point(field_get:Proto.EnterWorld.position)
  return p != nullptr ? *p : *reinterpret_cast<const ::Proto::Vector3D*>(
      &::Proto::_Vector3D_default_instance_);
}
inline ::Proto::Vector3D* EnterWorld::release_position() {
  // @@protoc_insertion_point(field_release:Proto.EnterWorld.position)
  
  ::Proto::Vector3D* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::Proto::Vector3D* EnterWorld::mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::Vector3D>(GetArenaNoVirtual());
    position_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Proto.EnterWorld.position)
  return position_;
}
inline void EnterWorld::set_allocated_position(::Proto::Vector3D* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:Proto.EnterWorld.position)
}

// -------------------------------------------------------------------

// RequestWorld

// int32 world_id = 1;
inline void RequestWorld::clear_world_id() {
  world_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RequestWorld::world_id() const {
  // @@protoc_insertion_point(field_get:Proto.RequestWorld.world_id)
  return world_id_;
}
inline void RequestWorld::set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  world_id_ = value;
  // @@protoc_insertion_point(field_set:Proto.RequestWorld.world_id)
}

// -------------------------------------------------------------------

// CreateWorld

// int32 world_id = 1;
inline void CreateWorld::clear_world_id() {
  world_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateWorld::world_id() const {
  // @@protoc_insertion_point(field_get:Proto.CreateWorld.world_id)
  return world_id_;
}
inline void CreateWorld::set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  world_id_ = value;
  // @@protoc_insertion_point(field_set:Proto.CreateWorld.world_id)
}

// uint64 last_world_sn = 2;
inline void CreateWorld::clear_last_world_sn() {
  last_world_sn_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CreateWorld::last_world_sn() const {
  // @@protoc_insertion_point(field_get:Proto.CreateWorld.last_world_sn)
  return last_world_sn_;
}
inline void CreateWorld::set_last_world_sn(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  last_world_sn_ = value;
  // @@protoc_insertion_point(field_set:Proto.CreateWorld.last_world_sn)
}

// int32 game_app_id = 3;
inline void CreateWorld::clear_game_app_id() {
  game_app_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateWorld::game_app_id() const {
  // @@protoc_insertion_point(field_get:Proto.CreateWorld.game_app_id)
  return game_app_id_;
}
inline void CreateWorld::set_game_app_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  game_app_id_ = value;
  // @@protoc_insertion_point(field_set:Proto.CreateWorld.game_app_id)
}

// -------------------------------------------------------------------

// BroadcastCreateWorld

// int32 world_id = 1;
inline void BroadcastCreateWorld::clear_world_id() {
  world_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BroadcastCreateWorld::world_id() const {
  // @@protoc_insertion_point(field_get:Proto.BroadcastCreateWorld.world_id)
  return world_id_;
}
inline void BroadcastCreateWorld::set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  world_id_ = value;
  // @@protoc_insertion_point(field_set:Proto.BroadcastCreateWorld.world_id)
}

// uint64 world_sn = 2;
inline void BroadcastCreateWorld::clear_world_sn() {
  world_sn_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BroadcastCreateWorld::world_sn() const {
  // @@protoc_insertion_point(field_get:Proto.BroadcastCreateWorld.world_sn)
  return world_sn_;
}
inline void BroadcastCreateWorld::set_world_sn(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  world_sn_ = value;
  // @@protoc_insertion_point(field_set:Proto.BroadcastCreateWorld.world_sn)
}

// uint64 last_world_sn = 3;
inline void BroadcastCreateWorld::clear_last_world_sn() {
  last_world_sn_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BroadcastCreateWorld::last_world_sn() const {
  // @@protoc_insertion_point(field_get:Proto.BroadcastCreateWorld.last_world_sn)
  return last_world_sn_;
}
inline void BroadcastCreateWorld::set_last_world_sn(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  last_world_sn_ = value;
  // @@protoc_insertion_point(field_set:Proto.BroadcastCreateWorld.last_world_sn)
}

// -------------------------------------------------------------------

// BroadcastCreateWorldProxy

// int32 world_id = 1;
inline void BroadcastCreateWorldProxy::clear_world_id() {
  world_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BroadcastCreateWorldProxy::world_id() const {
  // @@protoc_insertion_point(field_get:Proto.BroadcastCreateWorldProxy.world_id)
  return world_id_;
}
inline void BroadcastCreateWorldProxy::set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  world_id_ = value;
  // @@protoc_insertion_point(field_set:Proto.BroadcastCreateWorldProxy.world_id)
}

// uint64 world_sn = 2;
inline void BroadcastCreateWorldProxy::clear_world_sn() {
  world_sn_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BroadcastCreateWorldProxy::world_sn() const {
  // @@protoc_insertion_point(field_get:Proto.BroadcastCreateWorldProxy.world_sn)
  return world_sn_;
}
inline void BroadcastCreateWorldProxy::set_world_sn(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  world_sn_ = value;
  // @@protoc_insertion_point(field_set:Proto.BroadcastCreateWorldProxy.world_sn)
}

// -------------------------------------------------------------------

// QueryWorld

// uint64 world_sn = 1;
inline void QueryWorld::clear_world_sn() {
  world_sn_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 QueryWorld::world_sn() const {
  // @@protoc_insertion_point(field_get:Proto.QueryWorld.world_sn)
  return world_sn_;
}
inline void QueryWorld::set_world_sn(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  world_sn_ = value;
  // @@protoc_insertion_point(field_set:Proto.QueryWorld.world_sn)
}

// uint64 last_world_sn = 2;
inline void QueryWorld::clear_last_world_sn() {
  last_world_sn_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 QueryWorld::last_world_sn() const {
  // @@protoc_insertion_point(field_get:Proto.QueryWorld.last_world_sn)
  return last_world_sn_;
}
inline void QueryWorld::set_last_world_sn(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  last_world_sn_ = value;
  // @@protoc_insertion_point(field_set:Proto.QueryWorld.last_world_sn)
}

// -------------------------------------------------------------------

// QueryWorldRs

// uint64 world_sn = 1;
inline void QueryWorldRs::clear_world_sn() {
  world_sn_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 QueryWorldRs::world_sn() const {
  // @@protoc_insertion_point(field_get:Proto.QueryWorldRs.world_sn)
  return world_sn_;
}
inline void QueryWorldRs::set_world_sn(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  world_sn_ = value;
  // @@protoc_insertion_point(field_set:Proto.QueryWorldRs.world_sn)
}

// .Proto.QueryWorldRs.ReturnCode return_code = 2;
inline void QueryWorldRs::clear_return_code() {
  return_code_ = 0;
}
inline ::Proto::QueryWorldRs_ReturnCode QueryWorldRs::return_code() const {
  // @@protoc_insertion_point(field_get:Proto.QueryWorldRs.return_code)
  return static_cast< ::Proto::QueryWorldRs_ReturnCode >(return_code_);
}
inline void QueryWorldRs::set_return_code(::Proto::QueryWorldRs_ReturnCode value) {
  
  return_code_ = value;
  // @@protoc_insertion_point(field_set:Proto.QueryWorldRs.return_code)
}

// -------------------------------------------------------------------

// Teleport

// uint64 last_world_sn = 1;
inline void Teleport::clear_last_world_sn() {
  last_world_sn_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Teleport::last_world_sn() const {
  // @@protoc_insertion_point(field_get:Proto.Teleport.last_world_sn)
  return last_world_sn_;
}
inline void Teleport::set_last_world_sn(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  last_world_sn_ = value;
  // @@protoc_insertion_point(field_set:Proto.Teleport.last_world_sn)
}

// uint64 player_sn = 2;
inline void Teleport::clear_player_sn() {
  player_sn_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Teleport::player_sn() const {
  // @@protoc_insertion_point(field_get:Proto.Teleport.player_sn)
  return player_sn_;
}
inline void Teleport::set_player_sn(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  player_sn_ = value;
  // @@protoc_insertion_point(field_set:Proto.Teleport.player_sn)
}

// string account = 3;
inline void Teleport::clear_account() {
  account_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Teleport::account() const {
  // @@protoc_insertion_point(field_get:Proto.Teleport.account)
  return account_.GetNoArena();
}
inline void Teleport::set_account(const std::string& value) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Proto.Teleport.account)
}
inline void Teleport::set_account(std::string&& value) {
  
  account_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Proto.Teleport.account)
}
inline void Teleport::set_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proto.Teleport.account)
}
inline void Teleport::set_account(const char* value, size_t size) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proto.Teleport.account)
}
inline std::string* Teleport::mutable_account() {
  
  // @@protoc_insertion_point(field_mutable:Proto.Teleport.account)
  return account_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Teleport::release_account() {
  // @@protoc_insertion_point(field_release:Proto.Teleport.account)
  
  return account_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Teleport::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:Proto.Teleport.account)
}

// .Proto.Player player = 4;
inline bool Teleport::has_player() const {
  return this != internal_default_instance() && player_ != nullptr;
}
inline const ::Proto::Player& Teleport::player() const {
  const ::Proto::Player* p = player_;
  // @@protoc_insertion_point(field_get:Proto.Teleport.player)
  return p != nullptr ? *p : *reinterpret_cast<const ::Proto::Player*>(
      &::Proto::_Player_default_instance_);
}
inline ::Proto::Player* Teleport::release_player() {
  // @@protoc_insertion_point(field_release:Proto.Teleport.player)
  
  ::Proto::Player* temp = player_;
  player_ = nullptr;
  return temp;
}
inline ::Proto::Player* Teleport::mutable_player() {
  
  if (player_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::Player>(GetArenaNoVirtual());
    player_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Proto.Teleport.player)
  return player_;
}
inline void Teleport::set_allocated_player(::Proto::Player* player) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_);
  }
  if (player) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      player = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player, submessage_arena);
    }
    
  } else {
    
  }
  player_ = player;
  // @@protoc_insertion_point(field_set_allocated:Proto.Teleport.player)
}

// -------------------------------------------------------------------

// TeleportAfter

// uint64 player_sn = 1;
inline void TeleportAfter::clear_player_sn() {
  player_sn_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TeleportAfter::player_sn() const {
  // @@protoc_insertion_point(field_get:Proto.TeleportAfter.player_sn)
  return player_sn_;
}
inline void TeleportAfter::set_player_sn(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  player_sn_ = value;
  // @@protoc_insertion_point(field_set:Proto.TeleportAfter.player_sn)
}

// -------------------------------------------------------------------

// RemovePlayer

// uint64 player_sn = 1;
inline void RemovePlayer::clear_player_sn() {
  player_sn_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RemovePlayer::player_sn() const {
  // @@protoc_insertion_point(field_get:Proto.RemovePlayer.player_sn)
  return player_sn_;
}
inline void RemovePlayer::set_player_sn(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  player_sn_ = value;
  // @@protoc_insertion_point(field_set:Proto.RemovePlayer.player_sn)
}

// -------------------------------------------------------------------

// RequestSyncPlayer

// uint64 player_sn = 1;
inline void RequestSyncPlayer::clear_player_sn() {
  player_sn_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RequestSyncPlayer::player_sn() const {
  // @@protoc_insertion_point(field_get:Proto.RequestSyncPlayer.player_sn)
  return player_sn_;
}
inline void RequestSyncPlayer::set_player_sn(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  player_sn_ = value;
  // @@protoc_insertion_point(field_set:Proto.RequestSyncPlayer.player_sn)
}

// -------------------------------------------------------------------

// Role

// string name = 1;
inline void Role::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Role::name() const {
  // @@protoc_insertion_point(field_get:Proto.Role.name)
  return name_.GetNoArena();
}
inline void Role::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Proto.Role.name)
}
inline void Role::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Proto.Role.name)
}
inline void Role::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proto.Role.name)
}
inline void Role::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proto.Role.name)
}
inline std::string* Role::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:Proto.Role.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Role::release_name() {
  // @@protoc_insertion_point(field_release:Proto.Role.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Role::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Proto.Role.name)
}

// uint64 sn = 2;
inline void Role::clear_sn() {
  sn_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Role::sn() const {
  // @@protoc_insertion_point(field_get:Proto.Role.sn)
  return sn_;
}
inline void Role::set_sn(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  sn_ = value;
  // @@protoc_insertion_point(field_set:Proto.Role.sn)
}

// .Proto.Gender gender = 3;
inline void Role::clear_gender() {
  gender_ = 0;
}
inline ::Proto::Gender Role::gender() const {
  // @@protoc_insertion_point(field_get:Proto.Role.gender)
  return static_cast< ::Proto::Gender >(gender_);
}
inline void Role::set_gender(::Proto::Gender value) {
  
  gender_ = value;
  // @@protoc_insertion_point(field_set:Proto.Role.gender)
}

// .Proto.Vector3D position = 4;
inline bool Role::has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline const ::Proto::Vector3D& Role::position() const {
  const ::Proto::Vector3D* p = position_;
  // @@protoc_insertion_point(field_get:Proto.Role.position)
  return p != nullptr ? *p : *reinterpret_cast<const ::Proto::Vector3D*>(
      &::Proto::_Vector3D_default_instance_);
}
inline ::Proto::Vector3D* Role::release_position() {
  // @@protoc_insertion_point(field_release:Proto.Role.position)
  
  ::Proto::Vector3D* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::Proto::Vector3D* Role::mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::Vector3D>(GetArenaNoVirtual());
    position_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Proto.Role.position)
  return position_;
}
inline void Role::set_allocated_position(::Proto::Vector3D* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:Proto.Role.position)
}

// int32 level = 5;
inline void Role::clear_level() {
  level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Role::level() const {
  // @@protoc_insertion_point(field_get:Proto.Role.level)
  return level_;
}
inline void Role::set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:Proto.Role.level)
}

// int32 xp = 6;
inline void Role::clear_xp() {
  xp_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Role::xp() const {
  // @@protoc_insertion_point(field_get:Proto.Role.xp)
  return xp_;
}
inline void Role::set_xp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xp_ = value;
  // @@protoc_insertion_point(field_set:Proto.Role.xp)
}

// int32 hp = 7;
inline void Role::clear_hp() {
  hp_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Role::hp() const {
  // @@protoc_insertion_point(field_get:Proto.Role.hp)
  return hp_;
}
inline void Role::set_hp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  hp_ = value;
  // @@protoc_insertion_point(field_set:Proto.Role.hp)
}

// int32 mp = 8;
inline void Role::clear_mp() {
  mp_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Role::mp() const {
  // @@protoc_insertion_point(field_get:Proto.Role.mp)
  return mp_;
}
inline void Role::set_mp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mp_ = value;
  // @@protoc_insertion_point(field_set:Proto.Role.mp)
}

// int32 atk = 9;
inline void Role::clear_atk() {
  atk_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Role::atk() const {
  // @@protoc_insertion_point(field_get:Proto.Role.atk)
  return atk_;
}
inline void Role::set_atk(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  atk_ = value;
  // @@protoc_insertion_point(field_set:Proto.Role.atk)
}

// int32 def = 10;
inline void Role::clear_def() {
  def_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Role::def() const {
  // @@protoc_insertion_point(field_get:Proto.Role.def)
  return def_;
}
inline void Role::set_def(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  def_ = value;
  // @@protoc_insertion_point(field_set:Proto.Role.def)
}

// -------------------------------------------------------------------

// AllRoleAppear

// repeated .Proto.Role roles = 1;
inline int AllRoleAppear::roles_size() const {
  return roles_.size();
}
inline void AllRoleAppear::clear_roles() {
  roles_.Clear();
}
inline ::Proto::Role* AllRoleAppear::mutable_roles(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.AllRoleAppear.roles)
  return roles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Role >*
AllRoleAppear::mutable_roles() {
  // @@protoc_insertion_point(field_mutable_list:Proto.AllRoleAppear.roles)
  return &roles_;
}
inline const ::Proto::Role& AllRoleAppear::roles(int index) const {
  // @@protoc_insertion_point(field_get:Proto.AllRoleAppear.roles)
  return roles_.Get(index);
}
inline ::Proto::Role* AllRoleAppear::add_roles() {
  // @@protoc_insertion_point(field_add:Proto.AllRoleAppear.roles)
  return roles_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Role >&
AllRoleAppear::roles() const {
  // @@protoc_insertion_point(field_list:Proto.AllRoleAppear.roles)
  return roles_;
}

// -------------------------------------------------------------------

// RoleDisappear

// uint64 sn = 1;
inline void RoleDisappear::clear_sn() {
  sn_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RoleDisappear::sn() const {
  // @@protoc_insertion_point(field_get:Proto.RoleDisappear.sn)
  return sn_;
}
inline void RoleDisappear::set_sn(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  sn_ = value;
  // @@protoc_insertion_point(field_set:Proto.RoleDisappear.sn)
}

// -------------------------------------------------------------------

// Move

// uint64 player_sn = 1;
inline void Move::clear_player_sn() {
  player_sn_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Move::player_sn() const {
  // @@protoc_insertion_point(field_get:Proto.Move.player_sn)
  return player_sn_;
}
inline void Move::set_player_sn(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  player_sn_ = value;
  // @@protoc_insertion_point(field_set:Proto.Move.player_sn)
}

// repeated .Proto.Vector3D position = 2;
inline int Move::position_size() const {
  return position_.size();
}
inline ::Proto::Vector3D* Move::mutable_position(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.Move.position)
  return position_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Vector3D >*
Move::mutable_position() {
  // @@protoc_insertion_point(field_mutable_list:Proto.Move.position)
  return &position_;
}
inline const ::Proto::Vector3D& Move::position(int index) const {
  // @@protoc_insertion_point(field_get:Proto.Move.position)
  return position_.Get(index);
}
inline ::Proto::Vector3D* Move::add_position() {
  // @@protoc_insertion_point(field_add:Proto.Move.position)
  return position_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Vector3D >&
Move::position() const {
  // @@protoc_insertion_point(field_list:Proto.Move.position)
  return position_;
}

// -------------------------------------------------------------------

// SyncEntityStatus

// uint64 sn = 1;
inline void SyncEntityStatus::clear_sn() {
  sn_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SyncEntityStatus::sn() const {
  // @@protoc_insertion_point(field_get:Proto.SyncEntityStatus.sn)
  return sn_;
}
inline void SyncEntityStatus::set_sn(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  sn_ = value;
  // @@protoc_insertion_point(field_set:Proto.SyncEntityStatus.sn)
}

// int32 hp = 2;
inline void SyncEntityStatus::clear_hp() {
  hp_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SyncEntityStatus::hp() const {
  // @@protoc_insertion_point(field_get:Proto.SyncEntityStatus.hp)
  return hp_;
}
inline void SyncEntityStatus::set_hp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  hp_ = value;
  // @@protoc_insertion_point(field_set:Proto.SyncEntityStatus.hp)
}

// -------------------------------------------------------------------

// SyncNpcPos

// uint64 npc_sn = 1;
inline void SyncNpcPos::clear_npc_sn() {
  npc_sn_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SyncNpcPos::npc_sn() const {
  // @@protoc_insertion_point(field_get:Proto.SyncNpcPos.npc_sn)
  return npc_sn_;
}
inline void SyncNpcPos::set_npc_sn(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  npc_sn_ = value;
  // @@protoc_insertion_point(field_set:Proto.SyncNpcPos.npc_sn)
}

// .Proto.Vector3D pos = 2;
inline bool SyncNpcPos::has_pos() const {
  return this != internal_default_instance() && pos_ != nullptr;
}
inline const ::Proto::Vector3D& SyncNpcPos::pos() const {
  const ::Proto::Vector3D* p = pos_;
  // @@protoc_insertion_point(field_get:Proto.SyncNpcPos.pos)
  return p != nullptr ? *p : *reinterpret_cast<const ::Proto::Vector3D*>(
      &::Proto::_Vector3D_default_instance_);
}
inline ::Proto::Vector3D* SyncNpcPos::release_pos() {
  // @@protoc_insertion_point(field_release:Proto.SyncNpcPos.pos)
  
  ::Proto::Vector3D* temp = pos_;
  pos_ = nullptr;
  return temp;
}
inline ::Proto::Vector3D* SyncNpcPos::mutable_pos() {
  
  if (pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::Vector3D>(GetArenaNoVirtual());
    pos_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Proto.SyncNpcPos.pos)
  return pos_;
}
inline void SyncNpcPos::set_allocated_pos(::Proto::Vector3D* pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pos_);
  }
  if (pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pos, submessage_arena);
    }
    
  } else {
    
  }
  pos_ = pos;
  // @@protoc_insertion_point(field_set_allocated:Proto.SyncNpcPos.pos)
}

// -------------------------------------------------------------------

// SyncFsmState

// int32 state = 1;
inline void SyncFsmState::clear_state() {
  state_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SyncFsmState::state() const {
  // @@protoc_insertion_point(field_get:Proto.SyncFsmState.state)
  return state_;
}
inline void SyncFsmState::set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:Proto.SyncFsmState.state)
}

// int32 code = 2;
inline void SyncFsmState::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SyncFsmState::code() const {
  // @@protoc_insertion_point(field_get:Proto.SyncFsmState.code)
  return code_;
}
inline void SyncFsmState::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:Proto.SyncFsmState.code)
}

// uint64 npc_sn = 3;
inline void SyncFsmState::clear_npc_sn() {
  npc_sn_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SyncFsmState::npc_sn() const {
  // @@protoc_insertion_point(field_get:Proto.SyncFsmState.npc_sn)
  return npc_sn_;
}
inline void SyncFsmState::set_npc_sn(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  npc_sn_ = value;
  // @@protoc_insertion_point(field_set:Proto.SyncFsmState.npc_sn)
}

// uint64 player_sn = 4;
inline void SyncFsmState::clear_player_sn() {
  player_sn_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SyncFsmState::player_sn() const {
  // @@protoc_insertion_point(field_get:Proto.SyncFsmState.player_sn)
  return player_sn_;
}
inline void SyncFsmState::set_player_sn(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  player_sn_ = value;
  // @@protoc_insertion_point(field_set:Proto.SyncFsmState.player_sn)
}

// -------------------------------------------------------------------

// SyncPlayerPos

// .Proto.Vector3D pos = 1;
inline bool SyncPlayerPos::has_pos() const {
  return this != internal_default_instance() && pos_ != nullptr;
}
inline const ::Proto::Vector3D& SyncPlayerPos::pos() const {
  const ::Proto::Vector3D* p = pos_;
  // @@protoc_insertion_point(field_get:Proto.SyncPlayerPos.pos)
  return p != nullptr ? *p : *reinterpret_cast<const ::Proto::Vector3D*>(
      &::Proto::_Vector3D_default_instance_);
}
inline ::Proto::Vector3D* SyncPlayerPos::release_pos() {
  // @@protoc_insertion_point(field_release:Proto.SyncPlayerPos.pos)
  
  ::Proto::Vector3D* temp = pos_;
  pos_ = nullptr;
  return temp;
}
inline ::Proto::Vector3D* SyncPlayerPos::mutable_pos() {
  
  if (pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::Vector3D>(GetArenaNoVirtual());
    pos_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Proto.SyncPlayerPos.pos)
  return pos_;
}
inline void SyncPlayerPos::set_allocated_pos(::Proto::Vector3D* pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pos_);
  }
  if (pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pos, submessage_arena);
    }
    
  } else {
    
  }
  pos_ = pos;
  // @@protoc_insertion_point(field_set_allocated:Proto.SyncPlayerPos.pos)
}

// -------------------------------------------------------------------

// SyncPlayerCmd

// int32 type = 1;
inline void SyncPlayerCmd::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SyncPlayerCmd::type() const {
  // @@protoc_insertion_point(field_get:Proto.SyncPlayerCmd.type)
  return type_;
}
inline void SyncPlayerCmd::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:Proto.SyncPlayerCmd.type)
}

// .Proto.Vector3D point = 2;
inline bool SyncPlayerCmd::has_point() const {
  return this != internal_default_instance() && point_ != nullptr;
}
inline const ::Proto::Vector3D& SyncPlayerCmd::point() const {
  const ::Proto::Vector3D* p = point_;
  // @@protoc_insertion_point(field_get:Proto.SyncPlayerCmd.point)
  return p != nullptr ? *p : *reinterpret_cast<const ::Proto::Vector3D*>(
      &::Proto::_Vector3D_default_instance_);
}
inline ::Proto::Vector3D* SyncPlayerCmd::release_point() {
  // @@protoc_insertion_point(field_release:Proto.SyncPlayerCmd.point)
  
  ::Proto::Vector3D* temp = point_;
  point_ = nullptr;
  return temp;
}
inline ::Proto::Vector3D* SyncPlayerCmd::mutable_point() {
  
  if (point_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::Vector3D>(GetArenaNoVirtual());
    point_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Proto.SyncPlayerCmd.point)
  return point_;
}
inline void SyncPlayerCmd::set_allocated_point(::Proto::Vector3D* point) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(point_);
  }
  if (point) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      point = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, point, submessage_arena);
    }
    
  } else {
    
  }
  point_ = point;
  // @@protoc_insertion_point(field_set_allocated:Proto.SyncPlayerCmd.point)
}

// uint64 player_sn = 3;
inline void SyncPlayerCmd::clear_player_sn() {
  player_sn_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SyncPlayerCmd::player_sn() const {
  // @@protoc_insertion_point(field_get:Proto.SyncPlayerCmd.player_sn)
  return player_sn_;
}
inline void SyncPlayerCmd::set_player_sn(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  player_sn_ = value;
  // @@protoc_insertion_point(field_set:Proto.SyncPlayerCmd.player_sn)
}

// uint64 target_sn = 4;
inline void SyncPlayerCmd::clear_target_sn() {
  target_sn_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SyncPlayerCmd::target_sn() const {
  // @@protoc_insertion_point(field_get:Proto.SyncPlayerCmd.target_sn)
  return target_sn_;
}
inline void SyncPlayerCmd::set_target_sn(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  target_sn_ = value;
  // @@protoc_insertion_point(field_set:Proto.SyncPlayerCmd.target_sn)
}

// -------------------------------------------------------------------

// ReqSyncNpc

// int32 npc_id = 1;
inline void ReqSyncNpc::clear_npc_id() {
  npc_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqSyncNpc::npc_id() const {
  // @@protoc_insertion_point(field_get:Proto.ReqSyncNpc.npc_id)
  return npc_id_;
}
inline void ReqSyncNpc::set_npc_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  npc_id_ = value;
  // @@protoc_insertion_point(field_set:Proto.ReqSyncNpc.npc_id)
}

// uint64 npc_sn = 2;
inline void ReqSyncNpc::clear_npc_sn() {
  npc_sn_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReqSyncNpc::npc_sn() const {
  // @@protoc_insertion_point(field_get:Proto.ReqSyncNpc.npc_sn)
  return npc_sn_;
}
inline void ReqSyncNpc::set_npc_sn(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  npc_sn_ = value;
  // @@protoc_insertion_point(field_set:Proto.ReqSyncNpc.npc_sn)
}

// -------------------------------------------------------------------

// ReqLinkPlayer

// int32 npc_id = 1;
inline void ReqLinkPlayer::clear_npc_id() {
  npc_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqLinkPlayer::npc_id() const {
  // @@protoc_insertion_point(field_get:Proto.ReqLinkPlayer.npc_id)
  return npc_id_;
}
inline void ReqLinkPlayer::set_npc_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  npc_id_ = value;
  // @@protoc_insertion_point(field_set:Proto.ReqLinkPlayer.npc_id)
}

// uint64 npc_sn = 2;
inline void ReqLinkPlayer::clear_npc_sn() {
  npc_sn_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReqLinkPlayer::npc_sn() const {
  // @@protoc_insertion_point(field_get:Proto.ReqLinkPlayer.npc_sn)
  return npc_sn_;
}
inline void ReqLinkPlayer::set_npc_sn(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  npc_sn_ = value;
  // @@protoc_insertion_point(field_set:Proto.ReqLinkPlayer.npc_sn)
}

// bool linker = 3;
inline void ReqLinkPlayer::clear_linker() {
  linker_ = false;
}
inline bool ReqLinkPlayer::linker() const {
  // @@protoc_insertion_point(field_get:Proto.ReqLinkPlayer.linker)
  return linker_;
}
inline void ReqLinkPlayer::set_linker(bool value) {
  
  linker_ = value;
  // @@protoc_insertion_point(field_set:Proto.ReqLinkPlayer.linker)
}

// -------------------------------------------------------------------

// NpcAtkEvent

// uint64 npc_sn = 1;
inline void NpcAtkEvent::clear_npc_sn() {
  npc_sn_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NpcAtkEvent::npc_sn() const {
  // @@protoc_insertion_point(field_get:Proto.NpcAtkEvent.npc_sn)
  return npc_sn_;
}
inline void NpcAtkEvent::set_npc_sn(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  npc_sn_ = value;
  // @@protoc_insertion_point(field_set:Proto.NpcAtkEvent.npc_sn)
}

// uint64 target_sn = 2;
inline void NpcAtkEvent::clear_target_sn() {
  target_sn_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NpcAtkEvent::target_sn() const {
  // @@protoc_insertion_point(field_get:Proto.NpcAtkEvent.target_sn)
  return target_sn_;
}
inline void NpcAtkEvent::set_target_sn(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  target_sn_ = value;
  // @@protoc_insertion_point(field_set:Proto.NpcAtkEvent.target_sn)
}

// -------------------------------------------------------------------

// PlayerAtkEvent

// uint64 player_sn = 1;
inline void PlayerAtkEvent::clear_player_sn() {
  player_sn_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PlayerAtkEvent::player_sn() const {
  // @@protoc_insertion_point(field_get:Proto.PlayerAtkEvent.player_sn)
  return player_sn_;
}
inline void PlayerAtkEvent::set_player_sn(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  player_sn_ = value;
  // @@protoc_insertion_point(field_set:Proto.PlayerAtkEvent.player_sn)
}

// uint64 target_sn = 2;
inline void PlayerAtkEvent::clear_target_sn() {
  target_sn_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PlayerAtkEvent::target_sn() const {
  // @@protoc_insertion_point(field_get:Proto.PlayerAtkEvent.target_sn)
  return target_sn_;
}
inline void PlayerAtkEvent::set_target_sn(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  target_sn_ = value;
  // @@protoc_insertion_point(field_set:Proto.PlayerAtkEvent.target_sn)
}

// -------------------------------------------------------------------

// DropItemList

// uint64 npc_sn = 1;
inline void DropItemList::clear_npc_sn() {
  npc_sn_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DropItemList::npc_sn() const {
  // @@protoc_insertion_point(field_get:Proto.DropItemList.npc_sn)
  return npc_sn_;
}
inline void DropItemList::set_npc_sn(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  npc_sn_ = value;
  // @@protoc_insertion_point(field_set:Proto.DropItemList.npc_sn)
}

// int32 exp = 2;
inline void DropItemList::clear_exp() {
  exp_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DropItemList::exp() const {
  // @@protoc_insertion_point(field_get:Proto.DropItemList.exp)
  return exp_;
}
inline void DropItemList::set_exp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  exp_ = value;
  // @@protoc_insertion_point(field_set:Proto.DropItemList.exp)
}

// int32 gold = 3;
inline void DropItemList::clear_gold() {
  gold_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DropItemList::gold() const {
  // @@protoc_insertion_point(field_get:Proto.DropItemList.gold)
  return gold_;
}
inline void DropItemList::set_gold(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gold_ = value;
  // @@protoc_insertion_point(field_set:Proto.DropItemList.gold)
}

// repeated .Proto.ItemData items = 4;
inline int DropItemList::items_size() const {
  return items_.size();
}
inline ::Proto::ItemData* DropItemList::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.DropItemList.items)
  return items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::ItemData >*
DropItemList::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:Proto.DropItemList.items)
  return &items_;
}
inline const ::Proto::ItemData& DropItemList::items(int index) const {
  // @@protoc_insertion_point(field_get:Proto.DropItemList.items)
  return items_.Get(index);
}
inline ::Proto::ItemData* DropItemList::add_items() {
  // @@protoc_insertion_point(field_add:Proto.DropItemList.items)
  return items_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::ItemData >&
DropItemList::items() const {
  // @@protoc_insertion_point(field_list:Proto.DropItemList.items)
  return items_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Proto

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Proto::CmdThread_CmdType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Proto::CmdThread_CmdType>() {
  return ::Proto::CmdThread_CmdType_descriptor();
}
template <> struct is_proto_enum< ::Proto::CmdApp_CmdType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Proto::CmdApp_CmdType>() {
  return ::Proto::CmdApp_CmdType_descriptor();
}
template <> struct is_proto_enum< ::Proto::CreateComponentParam_ParamType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Proto::CreateComponentParam_ParamType>() {
  return ::Proto::CreateComponentParam_ParamType_descriptor();
}
template <> struct is_proto_enum< ::Proto::SelectPlayerRs_SelectPlayerReturnCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Proto::SelectPlayerRs_SelectPlayerReturnCode>() {
  return ::Proto::SelectPlayerRs_SelectPlayerReturnCode_descriptor();
}
template <> struct is_proto_enum< ::Proto::GameToken_ReturnCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Proto::GameToken_ReturnCode>() {
  return ::Proto::GameToken_ReturnCode_descriptor();
}
template <> struct is_proto_enum< ::Proto::LoginByTokenRs_ReturnCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Proto::LoginByTokenRs_ReturnCode>() {
  return ::Proto::LoginByTokenRs_ReturnCode_descriptor();
}
template <> struct is_proto_enum< ::Proto::AccountQueryOnlineToRedisRs_ReturnCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Proto::AccountQueryOnlineToRedisRs_ReturnCode>() {
  return ::Proto::AccountQueryOnlineToRedisRs_ReturnCode_descriptor();
}
template <> struct is_proto_enum< ::Proto::QueryWorldRs_ReturnCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Proto::QueryWorldRs_ReturnCode>() {
  return ::Proto::QueryWorldRs_ReturnCode_descriptor();
}
template <> struct is_proto_enum< ::Proto::TagType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Proto::TagType>() {
  return ::Proto::TagType_descriptor();
}
template <> struct is_proto_enum< ::Proto::AccountCheckReturnCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Proto::AccountCheckReturnCode>() {
  return ::Proto::AccountCheckReturnCode_descriptor();
}
template <> struct is_proto_enum< ::Proto::LoginHttpReturnCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Proto::LoginHttpReturnCode>() {
  return ::Proto::LoginHttpReturnCode_descriptor();
}
template <> struct is_proto_enum< ::Proto::CreatePlayerReturnCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Proto::CreatePlayerReturnCode>() {
  return ::Proto::CreatePlayerReturnCode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_msg_2eproto

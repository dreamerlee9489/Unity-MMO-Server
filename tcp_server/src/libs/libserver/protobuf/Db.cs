// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: db.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Net {

  /// <summary>Holder for reflection information generated from db.proto</summary>
  public static partial class DbReflection {

    #region Descriptor
    /// <summary>File descriptor for db.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DbReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CghkYi5wcm90bxIDTmV0IisKCFZlY3RvcjNEEgkKAXgYASABKAISCQoBeRgC",
            "IAEoAhIJCgF6GAMgASgCIjgKClBsYXllckJhc2USGwoGZ2VuZGVyGAEgASgO",
            "MgsuTmV0LkdlbmRlchINCgVsZXZlbBgCIAEoBSJQCglMYXN0V29ybGQSEAoI",
            "d29ybGRfaWQYASABKAUSEAoId29ybGRfc24YAiABKAMSHwoIcG9zaXRpb24Y",
            "AyABKAsyDS5OZXQuVmVjdG9yM0QibgoKUGxheWVyTWlzYxIiCgpsYXN0X3dv",
            "cmxkGAEgASgLMg4uTmV0Lkxhc3RXb3JsZBIkCgxsYXN0X2R1bmdlb24YAiAB",
            "KAsyDi5OZXQuTGFzdFdvcmxkEhYKDm9ubGluZV92ZXJzaW9uGAMgASgFImAK",
            "BlBsYXllchIKCgJzbhgBIAEoBBIMCgRuYW1lGAIgASgJEh0KBGJhc2UYAyAB",
            "KAsyDy5OZXQuUGxheWVyQmFzZRIdCgRtaXNjGAQgASgLMg8uTmV0LlBsYXll",
            "ck1pc2MqKAoGR2VuZGVyEggKBG5vbmUQABIICgRtYWxlEAESCgoGZmVtYWxl",
            "EAJiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Net.Gender), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Net.Vector3D), global::Net.Vector3D.Parser, new[]{ "X", "Y", "Z" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Net.PlayerBase), global::Net.PlayerBase.Parser, new[]{ "Gender", "Level" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Net.LastWorld), global::Net.LastWorld.Parser, new[]{ "WorldId", "WorldSn", "Position" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Net.PlayerMisc), global::Net.PlayerMisc.Parser, new[]{ "LastWorld", "LastDungeon", "OnlineVersion" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Net.Player), global::Net.Player.Parser, new[]{ "Sn", "Name", "Base", "Misc" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum Gender {
    [pbr::OriginalName("none")] None = 0,
    [pbr::OriginalName("male")] Male = 1,
    [pbr::OriginalName("female")] Female = 2,
  }

  #endregion

  #region Messages
  public sealed partial class Vector3D : pb::IMessage<Vector3D> {
    private static readonly pb::MessageParser<Vector3D> _parser = new pb::MessageParser<Vector3D>(() => new Vector3D());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Vector3D> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Net.DbReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector3D() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector3D(Vector3D other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector3D Clone() {
      return new Vector3D(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private float z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Vector3D);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Vector3D other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Z, other.Z)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
      if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
      if (Z != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Z);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Z);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Vector3D other) {
      if (other == null) {
        return;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.Z != 0F) {
        Z = other.Z;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
          case 29: {
            Z = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerBase : pb::IMessage<PlayerBase> {
    private static readonly pb::MessageParser<PlayerBase> _parser = new pb::MessageParser<PlayerBase>(() => new PlayerBase());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerBase> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Net.DbReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerBase() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerBase(PlayerBase other) : this() {
      gender_ = other.gender_;
      level_ = other.level_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerBase Clone() {
      return new PlayerBase(this);
    }

    /// <summary>Field number for the "gender" field.</summary>
    public const int GenderFieldNumber = 1;
    private global::Net.Gender gender_ = global::Net.Gender.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Net.Gender Gender {
      get { return gender_; }
      set {
        gender_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 2;
    private int level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerBase);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerBase other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Gender != other.Gender) return false;
      if (Level != other.Level) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Gender != global::Net.Gender.None) hash ^= Gender.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Gender != global::Net.Gender.None) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Gender);
      }
      if (Level != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Level);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Gender != global::Net.Gender.None) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Gender);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerBase other) {
      if (other == null) {
        return;
      }
      if (other.Gender != global::Net.Gender.None) {
        Gender = other.Gender;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Gender = (global::Net.Gender) input.ReadEnum();
            break;
          }
          case 16: {
            Level = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 登录上一次的地图，两种情况
  /// 上次离开时，是一个公共地图，那么直接回到公共地图
  /// 上次离开时，是从一个副本离开的，如果副本SN还能找到，就再次进入副本
  /// </summary>
  public sealed partial class LastWorld : pb::IMessage<LastWorld> {
    private static readonly pb::MessageParser<LastWorld> _parser = new pb::MessageParser<LastWorld>(() => new LastWorld());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LastWorld> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Net.DbReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LastWorld() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LastWorld(LastWorld other) : this() {
      worldId_ = other.worldId_;
      worldSn_ = other.worldSn_;
      position_ = other.position_ != null ? other.position_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LastWorld Clone() {
      return new LastWorld(this);
    }

    /// <summary>Field number for the "world_id" field.</summary>
    public const int WorldIdFieldNumber = 1;
    private int worldId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WorldId {
      get { return worldId_; }
      set {
        worldId_ = value;
      }
    }

    /// <summary>Field number for the "world_sn" field.</summary>
    public const int WorldSnFieldNumber = 2;
    private long worldSn_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long WorldSn {
      get { return worldSn_; }
      set {
        worldSn_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 3;
    private global::Net.Vector3D position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Net.Vector3D Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LastWorld);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LastWorld other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WorldId != other.WorldId) return false;
      if (WorldSn != other.WorldSn) return false;
      if (!object.Equals(Position, other.Position)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (WorldId != 0) hash ^= WorldId.GetHashCode();
      if (WorldSn != 0L) hash ^= WorldSn.GetHashCode();
      if (position_ != null) hash ^= Position.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (WorldId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(WorldId);
      }
      if (WorldSn != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(WorldSn);
      }
      if (position_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Position);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WorldId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WorldId);
      }
      if (WorldSn != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(WorldSn);
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LastWorld other) {
      if (other == null) {
        return;
      }
      if (other.WorldId != 0) {
        WorldId = other.WorldId;
      }
      if (other.WorldSn != 0L) {
        WorldSn = other.WorldSn;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          Position = new global::Net.Vector3D();
        }
        Position.MergeFrom(other.Position);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            WorldId = input.ReadInt32();
            break;
          }
          case 16: {
            WorldSn = input.ReadInt64();
            break;
          }
          case 26: {
            if (position_ == null) {
              Position = new global::Net.Vector3D();
            }
            input.ReadMessage(Position);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerMisc : pb::IMessage<PlayerMisc> {
    private static readonly pb::MessageParser<PlayerMisc> _parser = new pb::MessageParser<PlayerMisc>(() => new PlayerMisc());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerMisc> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Net.DbReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerMisc() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerMisc(PlayerMisc other) : this() {
      lastWorld_ = other.lastWorld_ != null ? other.lastWorld_.Clone() : null;
      lastDungeon_ = other.lastDungeon_ != null ? other.lastDungeon_.Clone() : null;
      onlineVersion_ = other.onlineVersion_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerMisc Clone() {
      return new PlayerMisc(this);
    }

    /// <summary>Field number for the "last_world" field.</summary>
    public const int LastWorldFieldNumber = 1;
    private global::Net.LastWorld lastWorld_;
    /// <summary>
    /// 公共地图
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Net.LastWorld LastWorld {
      get { return lastWorld_; }
      set {
        lastWorld_ = value;
      }
    }

    /// <summary>Field number for the "last_dungeon" field.</summary>
    public const int LastDungeonFieldNumber = 2;
    private global::Net.LastWorld lastDungeon_;
    /// <summary>
    /// 副本地图
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Net.LastWorld LastDungeon {
      get { return lastDungeon_; }
      set {
        lastDungeon_ = value;
      }
    }

    /// <summary>Field number for the "online_version" field.</summary>
    public const int OnlineVersionFieldNumber = 3;
    private int onlineVersion_;
    /// <summary>
    /// 在线版本（乐观锁）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OnlineVersion {
      get { return onlineVersion_; }
      set {
        onlineVersion_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerMisc);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerMisc other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(LastWorld, other.LastWorld)) return false;
      if (!object.Equals(LastDungeon, other.LastDungeon)) return false;
      if (OnlineVersion != other.OnlineVersion) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (lastWorld_ != null) hash ^= LastWorld.GetHashCode();
      if (lastDungeon_ != null) hash ^= LastDungeon.GetHashCode();
      if (OnlineVersion != 0) hash ^= OnlineVersion.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (lastWorld_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(LastWorld);
      }
      if (lastDungeon_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(LastDungeon);
      }
      if (OnlineVersion != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(OnlineVersion);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (lastWorld_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LastWorld);
      }
      if (lastDungeon_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LastDungeon);
      }
      if (OnlineVersion != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OnlineVersion);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerMisc other) {
      if (other == null) {
        return;
      }
      if (other.lastWorld_ != null) {
        if (lastWorld_ == null) {
          LastWorld = new global::Net.LastWorld();
        }
        LastWorld.MergeFrom(other.LastWorld);
      }
      if (other.lastDungeon_ != null) {
        if (lastDungeon_ == null) {
          LastDungeon = new global::Net.LastWorld();
        }
        LastDungeon.MergeFrom(other.LastDungeon);
      }
      if (other.OnlineVersion != 0) {
        OnlineVersion = other.OnlineVersion;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (lastWorld_ == null) {
              LastWorld = new global::Net.LastWorld();
            }
            input.ReadMessage(LastWorld);
            break;
          }
          case 18: {
            if (lastDungeon_ == null) {
              LastDungeon = new global::Net.LastWorld();
            }
            input.ReadMessage(LastDungeon);
            break;
          }
          case 24: {
            OnlineVersion = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Player : pb::IMessage<Player> {
    private static readonly pb::MessageParser<Player> _parser = new pb::MessageParser<Player>(() => new Player());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Player> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Net.DbReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Player() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Player(Player other) : this() {
      sn_ = other.sn_;
      name_ = other.name_;
      base_ = other.base_ != null ? other.base_.Clone() : null;
      misc_ = other.misc_ != null ? other.misc_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Player Clone() {
      return new Player(this);
    }

    /// <summary>Field number for the "sn" field.</summary>
    public const int SnFieldNumber = 1;
    private ulong sn_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Sn {
      get { return sn_; }
      set {
        sn_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "base" field.</summary>
    public const int BaseFieldNumber = 3;
    private global::Net.PlayerBase base_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Net.PlayerBase Base {
      get { return base_; }
      set {
        base_ = value;
      }
    }

    /// <summary>Field number for the "misc" field.</summary>
    public const int MiscFieldNumber = 4;
    private global::Net.PlayerMisc misc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Net.PlayerMisc Misc {
      get { return misc_; }
      set {
        misc_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Player);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Player other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Sn != other.Sn) return false;
      if (Name != other.Name) return false;
      if (!object.Equals(Base, other.Base)) return false;
      if (!object.Equals(Misc, other.Misc)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Sn != 0UL) hash ^= Sn.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (base_ != null) hash ^= Base.GetHashCode();
      if (misc_ != null) hash ^= Misc.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Sn != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Sn);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (base_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Base);
      }
      if (misc_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Misc);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Sn != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Sn);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (base_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Base);
      }
      if (misc_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Misc);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Player other) {
      if (other == null) {
        return;
      }
      if (other.Sn != 0UL) {
        Sn = other.Sn;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.base_ != null) {
        if (base_ == null) {
          Base = new global::Net.PlayerBase();
        }
        Base.MergeFrom(other.Base);
      }
      if (other.misc_ != null) {
        if (misc_ == null) {
          Misc = new global::Net.PlayerMisc();
        }
        Misc.MergeFrom(other.Misc);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Sn = input.ReadUInt64();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            if (base_ == null) {
              Base = new global::Net.PlayerBase();
            }
            input.ReadMessage(Base);
            break;
          }
          case 34: {
            if (misc_ == null) {
              Misc = new global::Net.PlayerMisc();
            }
            input.ReadMessage(Misc);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
